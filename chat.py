import streamlit as st
from analyzer import SimpleAnalyzer
import pandas as pd
import json

st.set_page_config(page_title="–ß–∞—Ç CRM + Perplexity (sonar-pro)", page_icon="üí¨", layout="wide")
st.title("üí¨ Chat-–±–æ—Ç Bitrix24 x Perplexity (sonar-pro)")

@st.cache_resource
def get_analyzer():
    return SimpleAnalyzer()

analyzer = get_analyzer()

st.sidebar.title("–î–∞–Ω–Ω—ã–µ –∏–∑ CRM")
date_from = st.sidebar.date_input("C –∫–∞–∫–æ–π –¥–∞—Ç—ã?", pd.Timestamp.today() - pd.Timedelta(days=30))
date_to = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É?", pd.Timestamp.today())

deals = analyzer.get_deals(
    date_from=str(date_from) if date_from else None,
    date_to=str(date_to) if date_to else None,
    limit=50
)
if not deals:
    st.error("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

df = pd.DataFrame(deals)
summary = {
    "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": len(df),
    "–û–±—â–∏–π –æ–±—ä—ë–º (‚ÇΩ)": int(df['OPPORTUNITY'].astype(float).sum()),
    "–ü–æ —ç—Ç–∞–ø–∞–º": df.groupby('STAGE_ID').size().to_dict()
}

st.markdown(f"**–í—ã–≥—Ä—É–∂–µ–Ω–æ {summary['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫']} —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å—É–º–º—É {summary['–û–±—â–∏–π –æ–±—ä—ë–º (‚ÇΩ)']} ‚ÇΩ**")
st.write("**–ü–æ —ç—Ç–∞–ø–∞–º:**", summary["–ü–æ —ç—Ç–∞–ø–∞–º"])

st.subheader("–°–ø—Ä–æ—Å–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Å–¥–µ–ª–∫–∞—Ö üëá")
user_question = st.text_area("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ CRM –∏ –ø—Ä–æ–¥–∞–∂–∞—Ö:",
                             placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ —É –Ω–∞—Å?', '–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å?' –∏ —Ç.–¥.")

if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Perplexity"):
    prompt = f"""
–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è CRM-—Å–≤–æ–¥–∫–∞:

{json.dumps(summary, ensure_ascii=False, indent=2)}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

{user_question}

–û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –°–æ–≤–µ—Ç—ã –≤—ã–Ω–µ—Å–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º!
    """
    with st.spinner("Perplexity –¥—É–º–∞–µ—Ç..."):
        import requests
        import os
        from dotenv import load_dotenv
        load_dotenv()
        url = "https://api.perplexity.ai/chat/completions"
        headers = {
            "Authorization": "Bearer " + os.getenv("PERPLEXITY_API_KEY"),
            "Content-Type": "application/json"
        }
        data = {
            "model": "sonar-pro",
            "messages": [
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 900,
            "temperature": 0.19
        }
        resp = requests.post(url, headers=headers, json=data)
        if resp.ok:
            answer = resp.json()["choices"][0]["message"]["content"]
            st.markdown("**–û—Ç–≤–µ—Ç Perplexity:**")
            st.write(answer)
        else:
            st.error("–û—à–∏–±–∫–∞ API –∏–ª–∏ –ª–∏–º–∏—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

st.caption("¬© 2025 Bitrix24 + Perplexity PRO | Chat sonar-pro")