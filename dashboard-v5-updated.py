# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ v5.0
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
- –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ù–ò–¢, –≥–æ–¥, –∫–≤–∞—Ä—Ç–∞–ª, –º–µ—Å—è—Ü, –Ω–µ–¥–µ–ª—è)
- –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ –∏–∑ 3 –≤–æ—Ä–æ–Ω–æ–∫
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç–∞–¥–∏–π
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
- AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import os, time, math, json
from datetime import datetime, timedelta, date
from dateutil.relativedelta import relativedelta
import numpy as np
import pandas as pd
import streamlit as st
import requests

try:
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
except:
    px = go = None

# ============ CONFIG ============
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM v5.0", page_icon="üüß", layout="wide")

# ============ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ============
AUTH_KEY = "burmash_auth_ok"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    
    if st.session_state[AUTH_KEY]:
        return
    
    st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
    with st.form("login_form", clear_on_submit=False):
        login = st.text_input("–õ–æ–≥–∏–Ω", value="", key="auth_user")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password", key="auth_pass")
        ok = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if ok:
            st.session_state[AUTH_KEY] = (login == "admin" and password == "admin123")
            if not st.session_state[AUTH_KEY]:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            st.rerun()
    st.stop()

require_auth()

with st.sidebar:
    if st.button("–í—ã–π—Ç–∏", key="logout_btn"):
        st.session_state[AUTH_KEY] = False
        st.rerun()

def get_secret(name, default=None):
    return st.secrets.get(name) or os.getenv(name, default) or default

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
PERPLEXITY_API_KEY = (get_secret("PERPLEXITY_API_KEY", "") or "").strip()

# ============ –ö–û–ù–°–¢–ê–ù–¢–´ ============
# –°—Ç–∞–¥–∏–∏ –ø—Ä–æ–≤–∞–ª–∞ –¥–ª—è –≤–æ—Ä–æ–Ω–æ–∫
FAILURE_STAGES_GROUP1 = {
    "main_stages": ["–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ", "–í —Ä–∞–±–æ—Ç–µ", "–°–¥–µ–ª–∫–∞ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞", "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è"],
    "failure_stages": ["–ù–µ–¥–æ–∑–≤–æ–Ω", "–ù–µ –∞–±–æ–Ω–µ–Ω—Ç", "–°–ü–ê–ú", "–ù–µ—Ü–µ–ª–µ–≤–æ–π", "–î–æ—Ä–æ–≥–æ", 
                      "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞",
                      "–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏", "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º", "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –Ω–µ—Ä–∞–∑–æ–±—Ä. –ê–≤–∏—Ç–æ"]
}

FAILURE_STAGES_GROUP2 = {
    "main_stages": ["–ö–ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "–°—á—ë—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω/–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã"],
    "failure_stages": ["–í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "–î–æ—Ä–æ–≥–æ", "–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç",
                      "–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞", "–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏", "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"]
}

# –°—Ç–∞–¥–∏–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫
SUCCESS_STAGES = {
    "–û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂": "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
    "–§–∏–∑.–õ–∏—Ü–∞": "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞",
    "–ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏": "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞"
}

# ============ BITRIX HELPERS ============
def _bx_get(method, params=None, pause=0.4):
    """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Bitrix24"""
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    out, start = [], 0
    params = dict(params or {})
    
    while True:
        params["start"] = start
        r = requests.get(url, params=params, timeout=30)
        data = r.json()
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        
        if not batch:
            break
        
        out.extend(batch)
        if len(batch) < 50:
            break
        
        start += 50
        time.sleep(pause)
    
    return out

@st.cache_data(ttl=300)
def bx_get_deals(date_from=None, date_to=None, limit=5000):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    params = {"select[]": [
        "ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "ASSIGNED_BY_ID", 
        "COMPANY_ID", "CONTACT_ID", "PROBABILITY", "DATE_CREATE", 
        "DATE_MODIFY", "LAST_ACTIVITY_TIME", "CATEGORY_ID", 
        "BEGINDATE", "CLOSEDATE", "CLOSED"
    ]}
    
    if date_from:
        params["filter[>=DATE_CREATE]"] = date_from
    if date_to:
        params["filter[<=DATE_CREATE]"] = date_to
    
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=300)
def bx_get_users_full():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = _bx_get("user.get", {})
    out = {}
    
    for u in users:
        depts = u.get("UF_DEPARTMENT") or []
        if isinstance(depts, str):
            depts = [int(x) for x in depts.split(",") if x]
        
        out[int(u["ID"])] = {
            "name": ((u.get("NAME", "") + " " + u.get("LAST_NAME", "")).strip() or u.get("LOGIN", "")).strip(),
            "depts": list(map(int, depts)) if depts else [],
            "active": (u.get("ACTIVE", "Y") == "Y")
        }
    
    return out

@st.cache_data(ttl=300)
def bx_get_open_activities_for_deal_ids(deal_ids):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è —Å–¥–µ–ª–æ–∫"""
    out = {}
    if not deal_ids:
        return out
    
    for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
        params = {
            "filter[OWNER_TYPE_ID]": 2,
            "filter[OWNER_ID]": ",".join(map(str, chunk)),
            "filter[COMPLETED]": "N"
        }
        acts = _bx_get("crm.activity.list", params)
        
        for a in acts:
            out.setdefault(int(a["OWNER_ID"]), []).append(a)
    
    return out

@st.cache_data(ttl=600)
def bx_get_stage_map(stage_ids):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–¥–∏—è—Ö"""
    sort_map, name_map = {}, {}
    
    if not BITRIX24_WEBHOOK or not stage_ids:
        return sort_map, name_map
    
    cats = set()
    for sid in stage_ids:
        if isinstance(sid, str) and sid.startswith("C"):
            try:
                cats.add(int(sid.split(":")[0][1:]))
            except:
                pass
    
    try:
        base = _bx_get("crm.status.list", {"filter[ENTITY_ID]": "DEAL_STAGE"})
        for s in base:
            sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
            name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
    except:
        pass
    
    for cid in cats:
        try:
            resp = _bx_get("crm.status.list", {"filter[ENTITY_ID]": f"DEAL_STAGE_{cid}"})
            for s in resp:
                sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
                name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
        except:
            continue
    
    return sort_map, name_map

@st.cache_data(ttl=600)
def bx_get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–æ—Ä–æ–Ω–æ–∫)"""
    try:
        cats = _bx_get("crm.category.list", {})
        return {int(c["ID"]): c.get("NAME", "–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
    except:
        return {}

@st.cache_data(ttl=600)
def bx_get_timeline_for_deal(deal_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        params = {
            "ENTITY_TYPE": "deal",
            "ENTITY_ID": deal_id
        }
        timeline = _bx_get("crm.timeline.list", params)
        return timeline
    except:
        return []

# ============ UTILS ============
def to_dt(x):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ datetime"""
    try:
        ts = pd.to_datetime(x, utc=True, errors="coerce")
        if pd.isna(ts):
            return pd.NaT
        return ts.tz_convert(None)
    except:
        return pd.NaT

def days_between(later, earlier):
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏"""
    a, b = to_dt(later), to_dt(earlier)
    if pd.isna(a) or pd.isna(b):
        return None
    return max(0, int((a - b) / pd.Timedelta(days=1)))

def get_period_dates(period_type, reference_date=None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    period_type: 'year', 'quarter', 'month', 'week'
    """
    if reference_date is None:
        reference_date = datetime.now()
    
    if period_type == 'year':
        start = datetime(reference_date.year, 1, 1)
        end = datetime(reference_date.year, 12, 31)
    elif period_type == 'quarter':
        quarter = (reference_date.month - 1) // 3 + 1
        start = datetime(reference_date.year, (quarter - 1) * 3 + 1, 1)
        if quarter == 4:
            end = datetime(reference_date.year, 12, 31)
        else:
            end = datetime(reference_date.year, quarter * 3 + 1, 1) - timedelta(days=1)
    elif period_type == 'month':
        start = datetime(reference_date.year, reference_date.month, 1)
        next_month = start + relativedelta(months=1)
        end = next_month - timedelta(days=1)
    elif period_type == 'week':
        start = reference_date - timedelta(days=reference_date.weekday())
        end = start + timedelta(days=6)
    else:
        start = reference_date
        end = reference_date
    
    return start, end

def get_previous_period(period_type, reference_date=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if reference_date is None:
        reference_date = datetime.now()
    
    if period_type == 'year':
        prev_date = datetime(reference_date.year - 1, reference_date.month, reference_date.day)
    elif period_type == 'quarter':
        prev_date = reference_date - relativedelta(months=3)
    elif period_type == 'month':
        prev_date = reference_date - relativedelta(months=1)
    elif period_type == 'week':
        prev_date = reference_date - timedelta(weeks=1)
    else:
        prev_date = reference_date - timedelta(days=1)
    
    return get_period_dates(period_type, prev_date)

# ============ SCORING ============
def compute_health_scores(df, open_tasks_map, stuck_days=5):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è —Å–¥–µ–ª–æ–∫"""
    now = to_dt(pd.Timestamp.utcnow())
    rows = []
    
    for _, r in df.iterrows():
        create_dt = to_dt(r.get("DATE_CREATE"))
        last = to_dt(r.get("LAST_ACTIVITY_TIME")) or to_dt(r.get("DATE_MODIFY")) or create_dt
        begin_dt = to_dt(r.get("BEGINDATE")) or create_dt
        
        d_work = days_between(now, create_dt) or 0
        d_noact = days_between(now, last) or 0
        d_in_stage = days_between(now, begin_dt) or 0
        
        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0
        
        flags = {
            "no_company": int(r.get("COMPANY_ID") or 0) == 0,
            "no_contact": int(r.get("CONTACT_ID") or 0) == 0,
            "no_tasks": not has_task,
            "stuck": d_noact >= stuck_days,
            "lost": str(r.get("STAGE_ID", "")).upper().find("LOSE") >= 0
        }
        
        score = 100
        if flags["no_company"]:
            score -= 10
        if flags["no_contact"]:
            score -= 10
        if flags["no_tasks"]:
            score -= 25
        if flags["stuck"]:
            score -= 25
        if flags["lost"]:
            score = min(score, 15)
        
        opp = float(r.get("OPPORTUNITY") or 0.0)
        prob = float(r.get("PROBABILITY") or 0.0)
        potential = min(100, int((opp > 0) * (30 + min(70, math.log10(max(1, opp))/5 * 70)) * (0.4 + prob/100 * 0.6)))
        
        rows.append({
            "ID —Å–¥–µ–ª–∫–∏": int(r["ID"]),
            "–ù–∞–∑–≤–∞–Ω–∏–µ": r.get("TITLE", ""),
            "–ú–µ–Ω–µ–¥–∂–µ—Ä ID": int(r.get("ASSIGNED_BY_ID") or 0),
            "–≠—Ç–∞–ø ID": r.get("STAGE_ID", ""),
            "–í–æ—Ä–æ–Ω–∫–∞ ID": r.get("CATEGORY_ID"),
            "–°—É–º–º–∞": opp,
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": prob,
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": create_dt,
            "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è": to_dt(r.get("DATE_MODIFY")),
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": last,
            "–ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞": begin_dt,
            "–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è": to_dt(r.get("CLOSEDATE")),
            "–ó–∞–∫—Ä—ã—Ç–∞": r.get("CLOSED") == "Y",
            "–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ": d_work,
            "–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": d_noact,
            "–î–Ω–µ–π –Ω–∞ —ç—Ç–∞–ø–µ": d_in_stage,
            "–ó–¥–æ—Ä–æ–≤—å–µ": max(0, min(100, int(score))),
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª": max(0, min(100, int(potential))),
            "–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏": flags["no_company"],
            "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞": flags["no_contact"],
            "–ù–µ—Ç –∑–∞–¥–∞—á": flags["no_tasks"],
            "–ó–∞—Å—Ç—Ä—è–ª–∞": flags["stuck"],
            "–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞": flags["lost"],
        })
    
    return pd.DataFrame(rows)

def is_success_stage(stage_name, funnel_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–¥–∏—è —É—Å–ø–µ—à–Ω–æ–π"""
    success_stage = SUCCESS_STAGES.get(funnel_name)
    if success_stage:
        return success_stage.lower() in stage_name.lower()
    return False

def is_failure_stage(stage_name, stage_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞–¥–∏—è –ø—Ä–æ–≤–∞–ª—å–Ω–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    failure_keywords = ["–ø—Ä–æ–∏–≥", "–æ—Ç–∫–∞–∑", "lose", "fail", "–Ω–µ–¥–æ–∑–≤–æ–Ω", "—Å–ø–∞–º", "–Ω–µ—Ü–µ–ª–µ–≤–æ–π"]
    stage_lower = stage_name.lower()
    
    for keyword in failure_keywords:
        if keyword in stage_lower:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —Å—Ç–∞–¥–∏–∏
    if "LOSE" in str(stage_id).upper():
        return True
    
    return False

def get_failure_group(stage_name):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ–≤–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞–¥–∏–∏"""
    if stage_name in FAILURE_STAGES_GROUP1["main_stages"]:
        return "–ì—Ä—É–ø–ø–∞ 1"
    elif stage_name in FAILURE_STAGES_GROUP2["main_stages"]:
        return "–ì—Ä—É–ø–ø–∞ 2"
    return None

# ============ AI ANALYSIS ============
def ai_analyze_health_recommendations(deals_summary, avg_health):
    """AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –∑–¥–æ—Ä–æ–≤—å—è –¥–æ 70%"""
    if not PERPLEXITY_API_KEY:
        return "AI-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    
    prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂–∞–º–∏. –¢–µ–∫—É—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–¥–µ–ª–æ–∫: {avg_health:.1f}%.

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫:
- –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {deals_summary.get('total', 0)}
- –ë–µ–∑ –∑–∞–¥–∞—á: {deals_summary.get('no_tasks', 0)}
- –ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏: {deals_summary.get('no_company', 0)}
- –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {deals_summary.get('no_contact', 0)}
- –ó–∞—Å—Ç—Ä—è–≤—à–∏—Ö: {deals_summary.get('stuck', 0)}
- –ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö: {deals_summary.get('lost', 0)}

–ó–ê–î–ê–ß–ê: –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ß–¢–û –ò–ú–ï–ù–ù–û –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ CRM Bitrix24, —á—Ç–æ–±—ã:
1. –ü–æ–¥–Ω—è—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–¥–µ–ª–æ–∫ –¥–æ 70%
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –Ω–∏–∂–µ 70%

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ (–∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ CRM)
- –ò–∑–º–µ—Ä–∏–º—ã–º–∏ (–∫–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å)
- –ü—Ä–∏–º–µ–Ω–∏–º—ã–º–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
- –° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –∫—Ä–∞—Ç–∫–∏–µ bullet points –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    
    data = {
        "model": "sonar-pro",
        "messages": [
            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–∞–º."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 1000,
        "temperature": 0.3
    }
    
    try:
        resp = requests.post(
            "https://api.perplexity.ai/chat/completions",
            headers={"Authorization": f"Bearer {PERPLEXITY_API_KEY}"},
            json=data,
            timeout=30
        )
        result = resp.json()
        return result["choices"][0]["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

def detect_system_bypass(df_scores, timeline_data=None):
    """
    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–æ–π—Ç–∏ —Å–∏—Å—Ç–µ–º—É
    - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
    - –ü–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–æ–≤
    - –ë—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π
    """
    suspicious_deals = []
    
    # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á —Å –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    recent_no_tasks = df_scores[
        (df_scores["–ù–µ—Ç –∑–∞–¥–∞—á"]) & 
        (df_scores["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"] < 3)
    ]
    
    for _, deal in recent_no_tasks.iterrows():
        suspicious_deals.append({
            "ID —Å–¥–µ–ª–∫–∏": deal["ID —Å–¥–µ–ª–∫–∏"],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": deal["–ù–∞–∑–≤–∞–Ω–∏–µ"],
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": deal.get("–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–î–µ—Ç–∞–ª–∏": f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {deal['–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']} –¥–Ω. –Ω–∞–∑–∞–¥, –Ω–æ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á",
            "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å": "–°—Ä–µ–¥–Ω—è—è"
        })
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —Å–¥–µ–ª–æ–∫ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    stuck_high_prob = df_scores[
        (df_scores["–ó–∞—Å—Ç—Ä—è–ª–∞"]) & 
        (df_scores["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"] > 70)
    ]
    
    for _, deal in stuck_high_prob.iterrows():
        suspicious_deals.append({
            "ID —Å–¥–µ–ª–∫–∏": deal["ID —Å–¥–µ–ª–∫–∏"],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": deal["–ù–∞–∑–≤–∞–Ω–∏–µ"],
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": deal.get("–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ": "–ó–∞—Å—Ç–æ–π —Å–¥–µ–ª–∫–∏ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é",
            "–î–µ—Ç–∞–ª–∏": f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {deal['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å']:.0f}%, –Ω–æ {deal['–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']} –¥–Ω. –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å": "–í—ã—Å–æ–∫–∞—è"
        })
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–¥–æ—Ä–æ–≤—å—è (—Ç—Ä–µ–±—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
    # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
    low_health_high_opp = df_scores[
        (df_scores["–ó–¥–æ—Ä–æ–≤—å–µ"] < 50) & 
        (df_scores["–°—É–º–º–∞"] > df_scores["–°—É–º–º–∞"].quantile(0.75))
    ]
    
    for _, deal in low_health_high_opp.iterrows():
        suspicious_deals.append({
            "ID —Å–¥–µ–ª–∫–∏": deal["ID —Å–¥–µ–ª–∫–∏"],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": deal["–ù–∞–∑–≤–∞–Ω–∏–µ"],
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": deal.get("–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ": "–ö—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å –Ω–∏–∑–∫–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º",
            "–î–µ—Ç–∞–ª–∏": f"–°—É–º–º–∞ {deal['–°—É–º–º–∞']:,.0f} ‚ÇΩ, –∑–¥–æ—Ä–æ–≤—å–µ {deal['–ó–¥–æ—Ä–æ–≤—å–µ']}%",
            "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å": "–í—ã—Å–æ–∫–∞—è"
        })
    
    return pd.DataFrame(suspicious_deals) if suspicious_deals else pd.DataFrame()

# ============ –ì–û–î–û–í–û–ô –ü–õ–ê–ù ============
def calculate_yearly_plan(df_scores, yearly_target, current_date=None):
    """
    –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ–¥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    """
    if current_date is None:
        current_date = datetime.now()
    
    year = current_date.year
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
    df_year = df_scores[
        (df_scores["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.year == year)
    ].copy()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
    df_year["–£—Å–ø–µ—à–Ω–∞"] = df_year.apply(
        lambda row: is_success_stage(row.get("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞", ""), row.get("–í–æ—Ä–æ–Ω–∫–∞", "")),
        axis=1
    )
    
    # –§–∞–∫—Ç –ø–æ –º–µ—Å—è—Ü–∞–º
    df_year["–ú–µ—Å—è—Ü"] = df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.month
    df_year["–ö–≤–∞—Ä—Ç–∞–ª"] = df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.quarter
    
    actual_by_month = df_year[df_year["–£—Å–ø–µ—à–Ω–∞"]].groupby("–ú–µ—Å—è—Ü")["–°—É–º–º–∞"].sum()
    actual_by_quarter = df_year[df_year["–£—Å–ø–µ—à–Ω–∞"]].groupby("–ö–≤–∞—Ä—Ç–∞–ª")["–°—É–º–º–∞"].sum()
    
    # –§–∞–∫—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º
    total_actual = actual_by_month.sum()
    
    # –ü–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
    monthly_plan = yearly_target / 12
    
    # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å
    remaining_amount = max(0, yearly_target - total_actual)
    
    # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—è—Ü–µ–≤
    months_left = 12 - current_date.month + 1
    
    # –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
    adjusted_monthly_plan = remaining_amount / months_left if months_left > 0 else 0
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    completion_pct = (total_actual / yearly_target * 100) if yearly_target > 0 else 0
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
    open_deals = df_year[~df_year["–£—Å–ø–µ—à–Ω–∞"] & ~df_year["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"]]
    weighted_potential = (open_deals["–°—É–º–º–∞"] * open_deals["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"] / 100).sum()
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü –≥–æ–¥–∞
    forecast_total = total_actual + weighted_potential
    forecast_pct = (forecast_total / yearly_target * 100) if yearly_target > 0 else 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        "year": year,
        "target": yearly_target,
        "actual": total_actual,
        "remaining": remaining_amount,
        "completion_pct": completion_pct,
        "months_left": months_left,
        "monthly_plan_original": monthly_plan,
        "monthly_plan_adjusted": adjusted_monthly_plan,
        "forecast_total": forecast_total,
        "forecast_pct": forecast_pct,
        "actual_by_month": actual_by_month,
        "actual_by_quarter": actual_by_quarter,
        "weighted_potential": weighted_potential
    }
    
    return result

# ============ SIDEBAR –§–ò–õ–¨–¢–†–´ ============
st.sidebar.title("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")

# –ù–ò–¢ (–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
nit_date = st.sidebar.date_input(
    "–ù–ò–¢ (—Å –∫–∞–∫–æ–π –¥–∞—Ç—ã)", 
    datetime.now().date() - timedelta(days=90),
    help="–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
period_type = st.sidebar.selectbox(
    "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
    ["–ì–æ–¥", "–ö–≤–∞—Ä—Ç–∞–ª", "–ú–µ—Å—è—Ü", "–ù–µ–¥–µ–ª—è"],
    index=2
)

period_map = {
    "–ì–æ–¥": "year",
    "–ö–≤–∞—Ä—Ç–∞–ª": "quarter", 
    "–ú–µ—Å—è—Ü": "month",
    "–ù–µ–¥–µ–ª—è": "week"
}

selected_period = period_map[period_type]

# –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
reference_date = st.sidebar.date_input(
    "–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –¥–∞—Ç–∞",
    datetime.now().date(),
    help="–î–∞—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
stuck_days = st.sidebar.slider("–ó–∞—Å—Ç—Ä—è–ª–∞ (–¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)", 3, 30, 7)
limit = st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –∏–∑ API", 500, 5000, 2000, step=500)

# –ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω
st.sidebar.markdown("---")
st.sidebar.subheader("üéØ –ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω")
yearly_target = st.sidebar.number_input(
    "–¶–µ–ª—å –Ω–∞ –≥–æ–¥, ‚ÇΩ",
    min_value=0,
    value=50_000_000,
    step=1_000_000,
    format="%d",
    help="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤—ã—Ä—É—á–∫—É –Ω–∞ –≥–æ–¥"
)

# ============ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ============
with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Bitrix24..."):
    if not BITRIX24_WEBHOOK:
        st.error("‚ùå –ó–∞–¥–∞–π—Ç–µ BITRIX24_WEBHOOK –≤ Secrets")
        st.stop()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    current_period_start, current_period_end = get_period_dates(selected_period, reference_date)
    prev_period_start, prev_period_end = get_previous_period(selected_period, reference_date)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å —É—á–µ—Ç–æ–º –ù–ò–¢
    deals_raw = bx_get_deals(str(nit_date), str(datetime.now().date()), limit=limit)
    
    if not deals_raw:
        st.error("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        st.stop()
    
    df_raw = pd.DataFrame(deals_raw)
    df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw.get("OPPORTUNITY"), errors="coerce").fillna(0.0)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    users_full = bx_get_users_full()
    users_map = {uid: users_full[uid]["name"] for uid in users_full}
    
    open_tasks_map = bx_get_open_activities_for_deal_ids(df_raw["ID"].tolist())
    categories_map = bx_get_categories()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    df_scores = compute_health_scores(df_raw, open_tasks_map, stuck_days=stuck_days)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–¥–∏—è—Ö
    stage_ids = df_scores["–≠—Ç–∞–ø ID"].dropna().unique().tolist()
    sort_map, name_map = bx_get_stage_map(stage_ids)
    
    df_scores["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"] = df_scores["–≠—Ç–∞–ø ID"].map(lambda s: name_map.get(str(s), str(s)))
    df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"] = df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    df_scores["–í–æ—Ä–æ–Ω–∫–∞"] = df_scores["–í–æ—Ä–æ–Ω–∫–∞ ID"].map(lambda x: categories_map.get(int(x or 0), "–û—Å–Ω–æ–≤–Ω–∞—è"))
    
    # –ú–∞—Ä–∫–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∏ –ø—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    df_scores["–£—Å–ø–µ—à–Ω–∞"] = df_scores.apply(
        lambda row: is_success_stage(row["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"], row["–í–æ—Ä–æ–Ω–∫–∞"]),
        axis=1
    )
    
    df_scores["–ü—Ä–æ–≤–∞–ª"] = df_scores.apply(
        lambda row: is_failure_stage(row["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"], row["–≠—Ç–∞–ø ID"]),
        axis=1
    )

# –§–∏–ª—å—Ç—Ä—ã –≤ —Å–∞–π–¥–±–∞—Ä–µ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
funnels = sorted(df_scores["–í–æ—Ä–æ–Ω–∫–∞"].unique())
selected_funnels = st.sidebar.multiselect("–í–æ—Ä–æ–Ω–∫–∏", funnels, default=funnels)

managers = sorted(df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"].unique())
selected_managers = st.sidebar.multiselect("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", managers, default=managers)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
view_df = df_scores[
    (df_scores["–í–æ—Ä–æ–Ω–∫–∞"].isin(selected_funnels)) &
    (df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"].isin(selected_managers))
].copy()

if view_df.empty:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
df_current = view_df[
    (view_df["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] >= pd.Timestamp(current_period_start)) &
    (view_df["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] <= pd.Timestamp(current_period_end))
]

df_previous = view_df[
    (view_df["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] >= pd.Timestamp(prev_period_start)) &
    (view_df["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] <= pd.Timestamp(prev_period_end))
]

# ============ HEADER ============
st.markdown("# üüß –ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ v5.0")
st.markdown(f"""
**–ù–ò–¢**: {nit_date} | **–ü–µ—Ä–∏–æ–¥**: {period_type} ({current_period_start.strftime('%d.%m.%Y')} - {current_period_end.strftime('%d.%m.%Y')})  
**–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫**: {len(view_df):,} | **–í —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ**: {len(df_current):,}
""")

# ============ TABS ============
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "üìä –û–±–∑–æ—Ä",
    "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã", 
    "üë§ –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
    "üéØ –ì—Ä–∞–¥–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫",
    "‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —ç—Ç–∞–ø–∞—Ö",
    "üí∞ –ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω",
    "ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
])

# ===== TAB 1: –û–ë–ó–û–† =====
with tab1:
    st.subheader("üìà –°—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å –¥–∏–Ω–∞–º–∏–∫–æ–π
    col1, col2, col3, col4 = st.columns(4)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    deals_current = len(df_current)
    deals_previous = len(df_previous)
    deals_delta = deals_current - deals_previous
    deals_delta_pct = (deals_delta / deals_previous * 100) if deals_previous > 0 else 0
    
    col1.metric(
        "–°–¥–µ–ª–æ–∫",
        f"{deals_current:,}",
        f"{deals_delta:+,} ({deals_delta_pct:+.1f}%)",
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ"
    )
    
    # –í—ã—Ä—É—á–∫–∞ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Ç—Ä–µ—Ö –≤–æ—Ä–æ–Ω–æ–∫
    revenue_current = df_current[df_current["–£—Å–ø–µ—à–Ω–∞"]]["–°—É–º–º–∞"].sum()
    revenue_previous = df_previous[df_previous["–£—Å–ø–µ—à–Ω–∞"]]["–°—É–º–º–∞"].sum()
    revenue_delta = revenue_current - revenue_previous
    revenue_delta_pct = (revenue_delta / revenue_previous * 100) if revenue_previous > 0 else 0
    
    col2.metric(
        "–í—ã—Ä—É—á–∫–∞, ‚ÇΩ",
        f"{revenue_current:,.0f}",
        f"{revenue_delta:+,.0f} ({revenue_delta_pct:+.1f}%)",
        help="–í—ã—Ä—É—á–∫–∞ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ 3 –≤–æ—Ä–æ–Ω–æ–∫"
    )
    
    # –°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    health_current = df_current["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()
    health_previous = df_previous["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()
    health_delta = health_current - health_previous
    
    col3.metric(
        "–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ",
        f"{health_current:.1f}%",
        f"{health_delta:+.1f}%",
        help="–°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–¥–µ–ª–æ–∫"
    )
    
    # –°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
    potential_current = df_current["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"].mean()
    potential_previous = df_previous["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"].mean()
    potential_delta = potential_current - potential_previous
    
    col4.metric(
        "–°—Ä. –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
        f"{potential_current:.1f}%",
        f"{potential_delta:+.1f}%",
        help="–°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–¥–µ–ª–æ–∫"
    )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏
    if px:
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Å–¥–µ–ª–æ–∫")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        df_timeline = view_df.copy()
        df_timeline["–î–∞—Ç–∞"] = df_timeline["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.date
        
        deals_by_date = df_timeline.groupby("–î–∞—Ç–∞").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        fig_deals = px.line(
            deals_by_date,
            x="–î–∞—Ç–∞",
            y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞—Ç–∞–º",
            markers=True
        )
        fig_deals.update_layout(height=400)
        st.plotly_chart(fig_deals, use_container_width=True, key="overview_deals_timeline")
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä—É—á–∫–∏ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
        st.subheader("–í—ã—Ä—É—á–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º")
        
        df_timeline["–î–∞—Ç–∞"] = df_timeline["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.date
        revenue_by_funnel_date = df_timeline[df_timeline["–£—Å–ø–µ—à–Ω–∞"]].groupby(
            ["–î–∞—Ç–∞", "–í–æ—Ä–æ–Ω–∫–∞"]
        )["–°—É–º–º–∞"].sum().reset_index()
        
        fig_revenue = px.line(
            revenue_by_funnel_date,
            x="–î–∞—Ç–∞",
            y="–°—É–º–º–∞",
            color="–í–æ—Ä–æ–Ω–∫–∞",
            title="–í—ã—Ä—É—á–∫–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º (—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏)",
            markers=True
        )
        fig_revenue.update_layout(height=400)
        st.plotly_chart(fig_revenue, use_container_width=True, key="overview_revenue_timeline")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞")
        
        health_by_date = df_timeline.groupby("–î–∞—Ç–∞").agg({
            "–ó–¥–æ—Ä–æ–≤—å–µ": "mean",
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª": "mean"
        }).reset_index()
        
        fig_health = go.Figure()
        fig_health.add_trace(go.Scatter(
            x=health_by_date["–î–∞—Ç–∞"],
            y=health_by_date["–ó–¥–æ—Ä–æ–≤—å–µ"],
            name="–°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            mode="lines+markers",
            line=dict(color="#FF6B35")
        ))
        fig_health.add_trace(go.Scatter(
            x=health_by_date["–î–∞—Ç–∞"],
            y=health_by_date["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"],
            name="–°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
            mode="lines+markers",
            line=dict(color="#4ECDC4")
        ))
        fig_health.update_layout(
            title="–î–∏–Ω–∞–º–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞",
            yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç",
            height=400
        )
        st.plotly_chart(fig_health, use_container_width=True, key="overview_health_timeline")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–≤–æ—Ä–æ–Ω–∫–∞ —Å —à–∞–≥–æ–º 5%)
    st.markdown("---")
    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–¥–µ–ª–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Å —à–∞–≥–æ–º 5%
    bins = list(range(0, 101, 5))
    df_current["–î–∏–∞–ø–∞–∑–æ–Ω –∑–¥–æ—Ä–æ–≤—å—è"] = pd.cut(
        df_current["–ó–¥–æ—Ä–æ–≤—å–µ"],
        bins=bins,
        labels=[f"{i}-{i+5}%" for i in range(0, 100, 5)],
        include_lowest=True
    )
    
    health_dist = df_current["–î–∏–∞–ø–∞–∑–æ–Ω –∑–¥–æ—Ä–æ–≤—å—è"].value_counts().sort_index()
    health_dist_df = health_dist.reset_index()
    health_dist_df.columns = ["–î–∏–∞–ø–∞–∑–æ–Ω", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    
    if px:
        fig_funnel = go.Figure(go.Funnel(
            y=health_dist_df["–î–∏–∞–ø–∞–∑–æ–Ω"],
            x=health_dist_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
            textinfo="value+percent initial"
        ))
        fig_funnel.update_layout(title="–í–æ—Ä–æ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–¥–µ–ª–æ–∫ (—à–∞–≥ 5%)", height=600)
        st.plotly_chart(fig_funnel, use_container_width=True, key="overview_health_funnel")
    
    # –í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫ –ø–æ —ç—Ç–∞–ø–∞–º
    st.markdown("---")
    st.subheader("üîÑ –í–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂")
    
    for funnel in selected_funnels:
        if funnel == "–ü—Ä–æ–≤–∞–ª":
            continue
            
        df_funnel = df_current[df_current["–í–æ—Ä–æ–Ω–∫–∞"] == funnel]
        
        if df_funnel.empty:
            continue
        
        st.markdown(f"### {funnel}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç—Ç–∞–ø–∞–º
        stage_counts = df_funnel.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        stage_counts = stage_counts.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            if px:
                fig_stages = px.bar(
                    stage_counts,
                    x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    y="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞",
                    orientation="h",
                    title=f"–°–¥–µ–ª–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º: {funnel}"
                )
                st.plotly_chart(fig_stages, use_container_width=True, key=f"funnel_stages_{funnel}")
        
        with col2:
            st.dataframe(stage_counts, use_container_width=True, hide_index=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–æ–≤
    st.markdown("---")
    st.subheader("‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–æ–≤")
    
    df_failures = df_current[df_current["–ü—Ä–æ–≤–∞–ª"]]
    
    if not df_failures.empty:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø—Ä–æ–≤–∞–ª–∞
        failure_reasons = df_failures.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        failure_reasons = failure_reasons.sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            if px:
                fig_failures = px.bar(
                    failure_reasons,
                    x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    y="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞",
                    orientation="h",
                    title="–ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–≤–∞–ª–æ–≤",
                    color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    color_continuous_scale="Reds"
                )
                st.plotly_chart(fig_failures, use_container_width=True, key="overview_failures")
        
        with col2:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–æ–≤", len(df_failures))
            st.dataframe(failure_reasons.head(10), use_container_width=True, hide_index=True)
        
        # –ü—Ä–æ–≤–∞–ª—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        st.markdown("#### –ü—Ä–æ–≤–∞–ª—ã –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç–∞–¥–∏–π")
        
        # –ì—Ä—É–ø–ø–∞ 1
        group1_failures = df_failures[
            df_failures["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"].isin(FAILURE_STAGES_GROUP1["failure_stages"])
        ]
        
        # –ì—Ä—É–ø–ø–∞ 2
        group2_failures = df_failures[
            df_failures["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"].isin(FAILURE_STAGES_GROUP2["failure_stages"])
        ]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ì—Ä—É–ø–ø–∞ 1** (—Ä–∞–Ω–Ω–∏–µ —Å—Ç–∞–¥–∏–∏)")
            if not group1_failures.empty:
                g1_reasons = group1_failures.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                st.dataframe(g1_reasons, use_container_width=True, hide_index=True)
            else:
                st.info("–ù–µ—Ç –ø—Ä–æ–≤–∞–ª–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
        
        with col2:
            st.markdown("**–ì—Ä—É–ø–ø–∞ 2** (–ø–æ–∑–¥–Ω–∏–µ —Å—Ç–∞–¥–∏–∏)")
            if not group2_failures.empty:
                g2_reasons = group2_failures.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                st.dataframe(g2_reasons, use_container_width=True, hide_index=True)
            else:
                st.info("–ù–µ—Ç –ø—Ä–æ–≤–∞–ª–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ")
    else:
        st.success("‚úÖ –ù–µ—Ç –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä–∏–æ–¥–µ!")

# ===== TAB 2: –ü–†–û–ë–õ–ï–ú–´ =====
with tab2:
    st.subheader("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    problems_current = {
        "–ë–µ–∑ –∑–∞–¥–∞—á": len(df_current[df_current["–ù–µ—Ç –∑–∞–¥–∞—á"]]),
        "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": len(df_current[df_current["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"]]),
        "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞": len(df_current[df_current["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"]]),
        "–ó–∞—Å—Ç—Ä—è–ª–∏": len(df_current[df_current["–ó–∞—Å—Ç—Ä—è–ª–∞"]]),
        "–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã": len(df_current[df_current["–ü—Ä–æ–≤–∞–ª"]])
    }
    
    problems_previous = {
        "–ë–µ–∑ –∑–∞–¥–∞—á": len(df_previous[df_previous["–ù–µ—Ç –∑–∞–¥–∞—á"]]),
        "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": len(df_previous[df_previous["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"]]),
        "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞": len(df_previous[df_previous["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"]]),
        "–ó–∞—Å—Ç—Ä—è–ª–∏": len(df_previous[df_previous["–ó–∞—Å—Ç—Ä—è–ª–∞"]]),
        "–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã": len(df_previous[df_previous["–ü—Ä–æ–≤–∞–ª"]])
    }
    
    cols = st.columns(5)
    
    for idx, (problem, count_current) in enumerate(problems_current.items()):
        count_prev = problems_previous[problem]
        delta = count_current - count_prev
        
        with cols[idx]:
            st.metric(
                problem,
                count_current,
                f"{delta:+d}",
                help=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º"
            )
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if px:
        st.markdown("---")
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
        df_timeline = view_df.copy()
        df_timeline["–î–∞—Ç–∞"] = df_timeline["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.date
        
        problems_timeline = []
        
        for date in df_timeline["–î–∞—Ç–∞"].unique():
            df_date = df_timeline[df_timeline["–î–∞—Ç–∞"] == date]
            
            problems_timeline.append({
                "–î–∞—Ç–∞": date,
                "–ë–µ–∑ –∑–∞–¥–∞—á": len(df_date[df_date["–ù–µ—Ç –∑–∞–¥–∞—á"]]),
                "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": len(df_date[df_date["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"]]),
                "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞": len(df_date[df_date["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"]]),
                "–ó–∞—Å—Ç—Ä—è–ª–∏": len(df_date[df_date["–ó–∞—Å—Ç—Ä—è–ª–∞"]]),
                "–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã": len(df_date[df_date["–ü—Ä–æ–≤–∞–ª"]])
            })
        
        df_problems_timeline = pd.DataFrame(problems_timeline)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df_problems_long = df_problems_timeline.melt(
            id_vars=["–î–∞—Ç–∞"],
            var_name="–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã",
            value_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
        
        fig_problems = px.line(
            df_problems_long,
            x="–î–∞—Ç–∞",
            y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            color="–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã",
            title="–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º",
            markers=True
        )
        fig_problems.update_layout(height=400)
        st.plotly_chart(fig_problems, use_container_width=True, key="problems_timeline")
    
    # –°–ø–∏—Å–∫–∏ —Å–¥–µ–ª–æ–∫ –ø–æ –≤–∏–¥–∞–º –ø—Ä–æ–±–ª–µ–º
    st.markdown("---")
    st.subheader("–°–ø–∏—Å–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
    
    with st.expander(f"‚ùó –ë–µ–∑ –∑–∞–¥–∞—á ({problems_current['–ë–µ–∑ –∑–∞–¥–∞—á']})"):
        df_no_tasks = df_current[df_current["–ù–µ—Ç –∑–∞–¥–∞—á"]]
        if not df_no_tasks.empty:
            st.dataframe(
                df_no_tasks[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"]],
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á")
    
    with st.expander(f"üè¢ –ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏ ({problems_current['–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏']})"):
        df_no_company = df_current[df_current["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"]]
        if not df_no_company.empty:
            st.dataframe(
                df_no_company[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"]],
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    with st.expander(f"üìá –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ({problems_current['–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞']})"):
        df_no_contact = df_current[df_current["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"]]
        if not df_no_contact.empty:
            st.dataframe(
                df_no_contact[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"]],
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    
    with st.expander(f"‚è∏Ô∏è –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ ({problems_current['–ó–∞—Å—Ç—Ä—è–ª–∏']})"):
        df_stuck = df_current[df_current["–ó–∞—Å—Ç—Ä—è–ª–∞"]]
        if not df_stuck.empty:
            st.dataframe(
                df_stuck[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ó–¥–æ—Ä–æ–≤—å–µ"]],
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —Å–¥–µ–ª–æ–∫")
    
    with st.expander(f"‚ùå –ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ ({problems_current['–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã']})"):
        df_lost = df_current[df_current["–ü—Ä–æ–≤–∞–ª"]]
        if not df_lost.empty:
            st.dataframe(
                df_lost[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞", "–°—É–º–º–∞"]],
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")

# ===== TAB 3: –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–ú =====
with tab3:
    st.subheader("üë• –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
    
    mgr_stats = []
    
    for mgr in selected_managers:
        mg_current = df_current[df_current["–ú–µ–Ω–µ–¥–∂–µ—Ä"] == mgr]
        mg_all = view_df[view_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"] == mgr]
        
        if mg_current.empty:
            continue
        
        total = len(mg_current)
        
        # –í—ã—Ä—É—á–∫–∞ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ 3 –≤–æ—Ä–æ–Ω–æ–∫
        revenue = mg_current[mg_current["–£—Å–ø–µ—à–Ω–∞"]]["–°—É–º–º–∞"].sum()
        
        # –°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        avg_health = mg_current["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()
        
        # –í—ã–∏–≥—Ä–∞–Ω–æ (—É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ 3 –≤–æ—Ä–æ–Ω–æ–∫)
        won = len(mg_current[mg_current["–£—Å–ø–µ—à–Ω–∞"]])
        
        # –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ (–ø—Ä–æ–≤–∞–ª—å–Ω—ã–µ —Å—Ç–∞–¥–∏–∏)
        lost = len(mg_current[mg_current["–ü—Ä–æ–≤–∞–ª"]])
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        conv_rate = (won / total * 100) if total > 0 else 0
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–∑—ã
        base_quality = 100 - (
            mg_current["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"].sum() + mg_current["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"].sum()
        ) / (total * 2) * 100
        
        mgr_stats.append({
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": mgr,
            "–°–¥–µ–ª–æ–∫": total,
            "–í—ã—Ä—É—á–∫–∞, ‚ÇΩ": int(revenue),
            "–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ, %": round(avg_health, 1),
            "–í—ã–∏–≥—Ä–∞–Ω–æ": won,
            "–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ": lost,
            "–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %": round(conv_rate, 1),
            "–ö–∞—á–µ—Å—Ç–≤–æ –±–∞–∑—ã, %": round(base_quality, 1)
        })
    
    df_mgr = pd.DataFrame(mgr_stats)
    
    if not df_mgr.empty:
        st.dataframe(df_mgr, use_container_width=True, hide_index=True)
        
        if px:
            st.markdown("---")
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
            
            # –í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            fig_mgr_revenue = px.bar(
                df_mgr,
                x="–ú–µ–Ω–µ–¥–∂–µ—Ä",
                y="–í—ã—Ä—É—á–∫–∞, ‚ÇΩ",
                color="–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ, %",
                title="–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                color_continuous_scale="RdYlGn"
            )
            st.plotly_chart(fig_mgr_revenue, use_container_width=True, key="mgr_revenue")
            
            # –°–¥–µ–ª–∫–∏ vs –ö–æ–Ω–≤–µ—Ä—Å–∏—è
            fig_mgr_conv = px.scatter(
                df_mgr,
                x="–°–¥–µ–ª–æ–∫",
                y="–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %",
                size="–í—ã—Ä—É—á–∫–∞, ‚ÇΩ",
                hover_data=["–ú–µ–Ω–µ–¥–∂–µ—Ä"],
                title="–°–¥–µ–ª–∫–∏ vs –ö–æ–Ω–≤–µ—Ä—Å–∏—è",
                color="–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ, %",
                color_continuous_scale="RdYlGn"
            )
            st.plotly_chart(fig_mgr_conv, use_container_width=True, key="mgr_conversion")
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å)
        st.markdown("---")
        st.subheader("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏")
        
        for mgr in selected_managers:
            mg_data = df_current[df_current["–ú–µ–Ω–µ–¥–∂–µ—Ä"] == mgr]
            
            if mg_data.empty:
                continue
            
            with st.expander(f"üë§ {mgr} ({len(mg_data)} —Å–¥–µ–ª–æ–∫)"):
                for funnel in mg_data["–í–æ—Ä–æ–Ω–∫–∞"].unique():
                    mg_funnel = mg_data[mg_data["–í–æ—Ä–æ–Ω–∫–∞"] == funnel]
                    
                    st.markdown(f"**{funnel}**")
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ —ç—Ç–∞–ø–∞–º
                    stage_counts = mg_funnel.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").size()
                    total_deals = len(mg_funnel)
                    
                    stage_conv = pd.DataFrame({
                        "–≠—Ç–∞–ø": stage_counts.index,
                        "–°–¥–µ–ª–æ–∫": stage_counts.values,
                        "–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %": (stage_counts.values / total_deals * 100).round(1)
                    })
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                    stage_conv = stage_conv.sort_values("–°–¥–µ–ª–æ–∫", ascending=False)
                    
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        if px:
                            fig_conv = px.bar(
                                stage_conv,
                                x="–ö–æ–Ω–≤–µ—Ä—Å–∏—è, %",
                                y="–≠—Ç–∞–ø",
                                orientation="h",
                                text="–°–¥–µ–ª–æ–∫"
                            )
                            st.plotly_chart(fig_conv, use_container_width=True, key=f"conv_{mgr}_{funnel}")
                    
                    with col2:
                        st.dataframe(stage_conv, use_container_width=True, hide_index=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")

# ===== TAB 4: –ì–†–ê–î–ê–¶–ò–Ø –°–î–ï–õ–û–ö =====
with tab4:
    st.subheader("üéØ –ì—Ä–∞–¥–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    quick_wins = df_current[
        (df_current["–ó–¥–æ—Ä–æ–≤—å–µ"] >= 70) &
        (df_current["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"] >= 50) &
        (~df_current["–ü—Ä–æ–≤–∞–ª"])
    ]
    
    work_on = df_current[
        (df_current["–ó–¥–æ—Ä–æ–≤—å–µ"] >= 40) &
        (df_current["–ó–¥–æ—Ä–æ–≤—å–µ"] < 70) &
        (~df_current["–ü—Ä–æ–≤–∞–ª"])
    ]
    
    stop_list = df_current[
        (df_current["–ó–¥–æ—Ä–æ–≤—å–µ"] < 40) |
        (df_current["–ü—Ä–æ–≤–∞–ª"]) |
        ((df_current["–ó–∞—Å—Ç—Ä—è–ª–∞"]) & (df_current["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"] > 14))
    ]
    
    col1, col2, col3 = st.columns(3)
    
    col1.metric(
        "üü¢ Quick Wins",
        len(quick_wins),
        f"{int(quick_wins['–°—É–º–º–∞'].sum()):,} ‚ÇΩ"
    )
    
    col2.metric(
        "üü° –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞",
        len(work_on),
        f"{int(work_on['–°—É–º–º–∞'].sum()):,} ‚ÇΩ"
    )
    
    col3.metric(
        "üî¥ Stop List",
        len(stop_list),
        f"{int(stop_list['–°—É–º–º–∞'].sum()):,} ‚ÇΩ"
    )
    
    if px:
        gradation_data = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["Quick Wins", "–ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞", "Stop List"],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [len(quick_wins), len(work_on), len(stop_list)],
            "–°—É–º–º–∞": [
                quick_wins["–°—É–º–º–∞"].sum(),
                work_on["–°—É–º–º–∞"].sum(),
                stop_list["–°—É–º–º–∞"].sum()
            ]
        })
        
        fig_grad = px.bar(
            gradation_data,
            x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            title="–ì—Ä–∞–¥–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫",
            color_discrete_map={
                "Quick Wins": "green",
                "–ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞": "orange",
                "Stop List": "red"
            }
        )
        st.plotly_chart(fig_grad, use_container_width=True, key="gradation_chart")
    
    # –°–ø–∏—Å–∫–∏ —Å–¥–µ–ª–æ–∫
    with st.expander(f"üü¢ Quick Wins ({len(quick_wins)})"):
        if not quick_wins.empty:
            st.dataframe(
                quick_wins[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]],
                use_container_width=True,
                hide_index=True
            )
    
    with st.expander(f"üü° –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ ({len(work_on)})"):
        if not work_on.empty:
            st.dataframe(
                work_on[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"]],
                use_container_width=True,
                hide_index=True
            )
    
    with st.expander(f"üî¥ Stop List ({len(stop_list)})"):
        if not stop_list.empty:
            st.dataframe(
                stop_list[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–í–æ—Ä–æ–Ω–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞", "–°—É–º–º–∞", "–ó–¥–æ—Ä–æ–≤—å–µ"]],
                use_container_width=True,
                hide_index=True
            )

# ===== TAB 5: –í–†–ï–ú–Ø –ù–ê –≠–¢–ê–ü–ê–• =====
with tab5:
    st.subheader("‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —ç—Ç–∞–ø–∞—Ö –≤–æ—Ä–æ–Ω–∫–∏")
    
    stage_time = df_current.groupby("–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞").agg({
        "–î–Ω–µ–π –Ω–∞ —ç—Ç–∞–ø–µ": ["mean", "std", "min", "max", "count"]
    }).round(1)
    
    stage_time.columns = ["–°—Ä. –¥–Ω–µ–π", "–û—Ç–∫–ª. (œÉ)", "–ú–∏–Ω", "–ú–∞–∫—Å", "–°–¥–µ–ª–æ–∫"]
    stage_time = stage_time.reset_index()
    stage_time = stage_time.sort_values("–°–¥–µ–ª–æ–∫", ascending=False)
    
    st.dataframe(stage_time, use_container_width=True, hide_index=True)
    
    if px:
        fig_time = px.bar(
            stage_time.head(10),
            x="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞",
            y="–°—Ä. –¥–Ω–µ–π",
            error_y="–û—Ç–∫–ª. (œÉ)",
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–∞–ø–∞—Ö (—Ç–æ–ø-10)",
            color="–°—Ä. –¥–Ω–µ–π",
            color_continuous_scale="Blues"
        )
        st.plotly_chart(fig_time, use_container_width=True, key="stage_time")

# ===== TAB 6: –ì–û–î–û–í–û–ô –ü–õ–ê–ù =====
with tab6:
    st.subheader("üí∞ –ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω
    plan_data = calculate_yearly_plan(view_df, yearly_target, datetime.now())
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    col1, col2, col3, col4 = st.columns(4)
    
    col1.metric(
        "–¶–µ–ª—å –Ω–∞ –≥–æ–¥",
        f"{plan_data['target']:,.0f} ‚ÇΩ"
    )
    
    col2.metric(
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        f"{plan_data['actual']:,.0f} ‚ÇΩ",
        f"{plan_data['completion_pct']:.1f}%"
    )
    
    col3.metric(
        "–û—Å—Ç–∞–ª–æ—Å—å",
        f"{plan_data['remaining']:,.0f} ‚ÇΩ",
        f"{plan_data['months_left']} –º–µ—Å."
    )
    
    col4.metric(
        "–ü—Ä–æ–≥–Ω–æ–∑",
        f"{plan_data['forecast_total']:,.0f} ‚ÇΩ",
        f"{plan_data['forecast_pct']:.1f}%"
    )
    
    # –ü–ª–∞–Ω –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã
    st.markdown("---")
    st.subheader("–ü–ª–∞–Ω –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric(
            "–ú–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω (–∏—Å—Ö–æ–¥–Ω—ã–π)",
            f"{plan_data['monthly_plan_original']:,.0f} ‚ÇΩ"
        )
    
    with col2:
        st.metric(
            "–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω",
            f"{plan_data['monthly_plan_adjusted']:,.0f} ‚ÇΩ",
            help="–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω"
        )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    if px:
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∞–∫—Ç vs –ø–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º
        months_names = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", 
                       "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
        
        monthly_data = []
        for month in range(1, 13):
            actual = plan_data['actual_by_month'].get(month, 0)
            plan = plan_data['monthly_plan_original']
            
            monthly_data.append({
                "–ú–µ—Å—è—Ü": months_names[month-1],
                "–§–∞–∫—Ç": actual,
                "–ü–ª–∞–Ω": plan,
                "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, %": (actual / plan * 100) if plan > 0 else 0
            })
        
        df_monthly = pd.DataFrame(monthly_data)
        
        fig_monthly = go.Figure()
        
        fig_monthly.add_trace(go.Bar(
            x=df_monthly["–ú–µ—Å—è—Ü"],
            y=df_monthly["–§–∞–∫—Ç"],
            name="–§–∞–∫—Ç",
            marker_color="#4ECDC4"
        ))
        
        fig_monthly.add_trace(go.Scatter(
            x=df_monthly["–ú–µ—Å—è—Ü"],
            y=df_monthly["–ü–ª–∞–Ω"],
            name="–ü–ª–∞–Ω",
            mode="lines+markers",
            marker_color="#FF6B35",
            line=dict(dash="dash")
        ))
        
        fig_monthly.update_layout(
            title="–§–∞–∫—Ç vs –ü–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
            yaxis_title="–°—É–º–º–∞, ‚ÇΩ",
            height=400
        )
        
        st.plotly_chart(fig_monthly, use_container_width=True, key="yearly_plan_monthly")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        st.dataframe(df_monthly, use_container_width=True, hide_index=True)
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        st.markdown("---")
        st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–æ–Ω–µ—Ü –≥–æ–¥–∞")
        
        st.info(f"""
        **–ü—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:**
        - –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞: {plan_data['actual']:,.0f} ‚ÇΩ
        - –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: {plan_data['weighted_potential']:,.0f} ‚ÇΩ
        - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∏—Ç–æ–≥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞: {plan_data['forecast_total']:,.0f} ‚ÇΩ
        - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {plan_data['forecast_pct']:.1f}%
        """)
        
        if plan_data['forecast_pct'] >= 100:
            st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞!")
        elif plan_data['forecast_pct'] >= 80:
            st.warning("‚ö†Ô∏è –ï—Å—Ç—å —Ä–∏—Å–∫ –Ω–µ–¥–æ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–∏–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        else:
            st.error("‚ùå –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –¢—Ä–µ–±—É—é—Ç—Å—è —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã!")

# ===== TAB 7: AI-–ê–ù–ê–õ–ò–¢–ò–ö–ê =====
with tab7:
    st.subheader("ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é
    st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Å–¥–µ–ª–æ–∫")
    
    avg_health = view_df["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()
    
    deals_summary = {
        "total": len(view_df),
        "no_tasks": view_df["–ù–µ—Ç –∑–∞–¥–∞—á"].sum(),
        "no_company": view_df["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"].sum(),
        "no_contact": view_df["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"].sum(),
        "stuck": view_df["–ó–∞—Å—Ç—Ä—è–ª–∞"].sum(),
        "lost": view_df["–ü—Ä–æ–≤–∞–ª"].sum()
    }
    
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
        recommendations = ai_analyze_health_recommendations(deals_summary, avg_health)
        st.markdown(recommendations)
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã
    st.markdown("---")
    st.markdown("### üö® –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    suspicious = detect_system_bypass(view_df)
    
    if not suspicious.empty:
        st.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(suspicious)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        for criticality in ["–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è"]:
            crit_deals = suspicious[suspicious["–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å"] == criticality]
            
            if not crit_deals.empty:
                with st.expander(f"‚ö†Ô∏è {criticality} –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å ({len(crit_deals)})"):
                    st.dataframe(
                        crit_deals[["ID —Å–¥–µ–ª–∫–∏", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä", "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ", "–î–µ—Ç–∞–ª–∏"]],
                        use_container_width=True,
                        hide_index=True
                    )
    else:
        st.success("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # AI-–∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    st.markdown("---")
    st.markdown("### üë• AI-–∞–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
    
    for mgr in selected_managers[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        mg_data = view_df[view_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"] == mgr]
        
        if mg_data.empty:
            continue
        
        mgr_summary = {
            "total_deals": len(mg_data),
            "revenue": int(mg_data[mg_data["–£—Å–ø–µ—à–Ω–∞"]]["–°—É–º–º–∞"].sum()),
            "avg_health": int(mg_data["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()),
            "no_tasks": int(mg_data["–ù–µ—Ç –∑–∞–¥–∞—á"].sum()),
            "stuck": int(mg_data["–ó–∞—Å—Ç—Ä—è–ª–∞"].sum()),
            "won": int(mg_data["–£—Å–ø–µ—à–Ω–∞"].sum()),
            "lost": int(mg_data["–ü—Ä–æ–≤–∞–ª"].sum())
        }
        
        with st.expander(f"üë§ {mgr} ({len(mg_data)} —Å–¥–µ–ª–æ–∫)"):
            if PERPLEXITY_API_KEY:
                with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {mgr}..."):
                    prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞:

–ú–µ–Ω–µ–¥–∂–µ—Ä: {mgr}
–°–¥–µ–ª–æ–∫: {mgr_summary['total_deals']}
–í—ã—Ä—É—á–∫–∞: {mgr_summary['revenue']:,} ‚ÇΩ
–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ: {mgr_summary['avg_health']}%
–í—ã–∏–≥—Ä–∞–Ω–æ: {mgr_summary['won']}
–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {mgr_summary['lost']}
–ë–µ–∑ –∑–∞–¥–∞—á: {mgr_summary['no_tasks']}
–ó–∞—Å—Ç—Ä—è–ª–æ: {mgr_summary['stuck']}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (2-3 –∞–±–∑–∞—Ü–∞):
1. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
2. –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã
3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–§–æ—Ä–º–∞—Ç: bullet points –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
"""
                    
                    data = {
                        "model": "sonar-pro",
                        "messages": [
                            {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM –∏ –ø—Ä–æ–¥–∞–∂–∞–º."},
                            {"role": "user", "content": prompt}
                        ],
                        "max_tokens": 800,
                        "temperature": 0.3
                    }
                    
                    try:
                        resp = requests.post(
                            "https://api.perplexity.ai/chat/completions",
                            headers={"Authorization": f"Bearer {PERPLEXITY_API_KEY}"},
                            json=data,
                            timeout=30
                        )
                        result = resp.json()
                        analysis = result["choices"][0]["message"]["content"]
                        st.markdown(analysis)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ AI: {str(e)}")
            else:
                st.info("AI-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# ============ FOOTER ============
st.markdown("---")
st.caption("–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ v5.0 | Powered by Bitrix24 + Perplexity AI")
