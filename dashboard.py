import streamlit as st
from analyzer import SimpleAnalyzer
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="CRM-–¥—ç—à–±–æ—Ä–¥ | Bitrix24 + Perplexity (sonar-pro)", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ CRM | Bitrix24 + Perplexity (sonar-pro)")

@st.cache_resource
def load_analyzer():
    return SimpleAnalyzer()

analyzer = load_analyzer()

st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
date_from = st.sidebar.date_input("C –∫–∞–∫–æ–π –¥–∞—Ç—ã?", pd.Timestamp.today() - pd.Timedelta(days=30))
date_to = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É?", pd.Timestamp.today())
run_button = st.sidebar.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å–¥–µ–ª–∫–∏ —Å Bitrix24..."):
    deals = analyzer.get_deals(
        date_from=str(date_from) if date_from else None,
        date_to=str(date_to) if date_to else None,
        limit=50
    )
if not deals:
    st.warning("–í –ë–∏—Ç—Ä–∏–∫—Å24 –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä.")
    st.stop()

df = pd.DataFrame(deals)
df['OPPORTUNITY'] = pd.to_numeric(df['OPPORTUNITY'], errors='coerce').fillna(0)
df['DATE_CREATE'] = pd.to_datetime(df['DATE_CREATE'], errors='coerce')
df['DATE_MODIFY'] = pd.to_datetime(df['DATE_MODIFY'], errors='coerce')

col1, col2, col3, col4 = st.columns(4)
col1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", len(df))
col2.metric("–û–±—â–∏–π –æ–±—ä—ë–º, ‚ÇΩ", int(df['OPPORTUNITY'].sum()))
col3.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", int(df['OPPORTUNITY'].mean()))
col4.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", str(df['DATE_MODIFY'].max())[:19])

st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º —Å–¥–µ–ª–∫–∏")
fig = px.bar(
    df.groupby('STAGE_ID').agg({'OPPORTUNITY': 'sum', 'ID': 'count'}).reset_index(),
    x='STAGE_ID', y='OPPORTUNITY',
    text='ID', labels={'STAGE_ID': "–≠—Ç–∞–ø", "OPPORTUNITY": "–°—É–º–º–∞, ‚ÇΩ", "ID": "–°–¥–µ–ª–æ–∫"},
    title="–°—É–º–º—ã —Å–¥–µ–ª–æ–∫ –ø–æ —ç—Ç–∞–ø–∞–º"
)
st.plotly_chart(fig, use_container_width=True)

st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫")
st.dataframe(df[['ID', 'TITLE', 'STAGE_ID', 'OPPORTUNITY', 'ASSIGNED_BY_ID', 'DATE_CREATE', 'DATE_MODIFY']]
             .sort_values("DATE_CREATE", ascending=False), height=300)

st.subheader("ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç Perplexity (sonar-pro)")
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑"):
    with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏..."):
        result = analyzer.run_ai_analysis(deals)
        if isinstance(result, dict):
            st.success(f"–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–æ–Ω–∫–∏: **{result.get('health_score', 'N/A')}%**")
            st.info(result.get("summary", ""))
            st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            for rec in result.get("recommendations", []):
                st.write("- " + rec)
        else:
            st.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI-–∞–Ω–∞–ª–∏–∑–∞.")
else:
    st.info("–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

st.caption("¬© 2025 –ë–∏—Ç—Ä–∏–∫—Å24 + Perplexity PRO. sonar-pro –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")