# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ (v6.0 - –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

üöÄ –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
+ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–∫–µ (persist="disk") - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
+ Batch-–∑–∞–ø—Ä–æ—Å—ã –∫ –ë–∏—Ç—Ä–∏–∫—Å24 (–¥–æ 50 –∫–æ–º–∞–Ω–¥ –∑–∞ —Ä–∞–∑) - –≤ 10-50 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!
+ –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞: 30 –º–∏–Ω—É—Ç –¥–ª—è —Å–¥–µ–ª–æ–∫, 60 –º–∏–Ω—É—Ç –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
+ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (batch –ø–æ 40 —Å–¥–µ–ª–æ–∫)
+ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–¥–∏–π (batch –ø–æ 50 —Å–¥–µ–ª–æ–∫)

üéõÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú:
+ –ö–Ω–æ–ø–∫–∞ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å" - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
+ –ö–Ω–æ–ø–∫–∞ "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å" - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
+ –ü–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
+ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏

‚ö° –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ~30-60 —Å–µ–∫, –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ!
"""

import os, time, math, calendar
from datetime import datetime, timedelta, date
import numpy as np
import pandas as pd
import streamlit as st
import requests

try:
    import plotly.express as px
except Exception:
    px = None

# ============ UI ============
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM", page_icon="üüß", layout="wide")

THEME_CSS = """
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# ============ AUTH ============
AUTH_KEY = "burmash_auth_ok"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    
    if st.session_state[AUTH_KEY]:
        return
    
    st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
    with st.form("login_form", clear_on_submit=False):
        login = st.text_input("–õ–æ–≥–∏–Ω", value="", key="auth_user")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password", key="auth_pass")
        ok = st.form_submit_button("–í–æ–π—Ç–∏")
        
        if ok:
            st.session_state[AUTH_KEY] = (login == "admin" and password == "admin123")
            if not st.session_state[AUTH_KEY]:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            st.rerun()
    st.stop()

require_auth()

# ============ SIDEBAR: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º ============

with st.sidebar:
    st.markdown("### ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if st.button("üö™ –í—ã–π—Ç–∏", key="logout_btn", use_container_width=True):
        st.session_state[AUTH_KEY] = False
        st.rerun()
    
    st.markdown("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
    st.markdown("### üì¶ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö")
    st.caption("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    
    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="refresh_btn", help="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24", use_container_width=True):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.session_state["last_refresh"] = datetime.now()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–∞–Ω–Ω—ã—Ö
            st.cache_data.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24...")
            time.sleep(1)
            st.rerun()
    
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", key="clear_cache_btn", help="–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à", use_container_width=True):
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∫—ç—à–∞
            st.cache_data.clear()
            st.cache_resource.clear()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if "last_refresh" in st.session_state:
                del st.session_state["last_refresh"]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            st.success("‚úÖ –í–µ—Å—å –∫—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!")
            time.sleep(1)
            st.rerun()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if "last_refresh" not in st.session_state:
        st.session_state["last_refresh"] = datetime.now()
    
    last_time = st.session_state["last_refresh"].strftime('%d.%m.%Y %H:%M:%S')
    st.caption(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n{last_time}")
    
    st.markdown("---")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞", expanded=False):
        st.markdown("""
        **‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (TTL):**
        - üìã –°–¥–µ–ª–∫–∏: 30 –º–∏–Ω—É—Ç
        - üè¢ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: 60 –º–∏–Ω—É—Ç  
        - üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 15 –º–∏–Ω—É—Ç
        - üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–¥–∏–π: 30 –º–∏–Ω—É—Ç
        
        **üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:**
        - Batch-–∑–∞–ø—Ä–æ—Å—ã (–¥–æ 50x –±—ã—Å—Ç—Ä–µ–µ)
        - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫–µ (persist)
        - –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ~30-60 —Å–µ–∫
        - –ò–∑ –∫—ç—à–∞: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚ö°
        
        **üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:**
        –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å" –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
        —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM
        """)

# ============ Secrets ============
def get_secret(name, default=None):
    if name in st.secrets:
        return st.secrets[name]
    return os.getenv(name, default)

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
PERPLEXITY_API_KEY = (get_secret("PERPLEXITY_API_KEY", "") or "").strip()
# ============ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 1: Batch-–∑–∞–ø—Ä–æ—Å—ã –∫ –ë–∏—Ç—Ä–∏–∫—Å24 ============

def _bx_call(method, params=None, timeout=30):
    """–ë–∞–∑–æ–≤—ã–π –≤—ã–∑–æ–≤ API –ë–∏—Ç—Ä–∏–∫—Å24"""
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    r = requests.get(url, params=(params or {}), timeout=timeout)
    r.raise_for_status()
    data = r.json()
    
    if "error" in data:
        raise RuntimeError(f"{method}: {data.get('error_description') or data.get('error')}")
    
    return data


def _bx_batch_call(commands, halt_on_error=False):
    """
    üöÄ –ö–õ–Æ–ß–ï–í–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í—ã–ø–æ–ª–Ω—è–µ—Ç batch-–∑–∞–ø—Ä–æ—Å –∫ –ë–∏—Ç—Ä–∏–∫—Å24
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ 50 –∫–æ–º–∞–Ω–¥ –∑–∞ –æ–¥–∏–Ω HTTP-–∑–∞–ø—Ä–æ—Å!
    –≠—Ç–æ –≤ 10-50 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É.
    
    –ü—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ = 1000 √ó 0.5 —Å–µ–∫ = 8 –º–∏–Ω—É—Ç
            –ø–æ–ª—É—á–∞–µ–º 20 batch-–∑–∞–ø—Ä–æ—Å–æ–≤ = 20 √ó 0.5 —Å–µ–∫ = 10 —Å–µ–∫—É–Ω–¥!
    """
    url = BITRIX24_WEBHOOK.rstrip("/") + "/batch.json"
    
    payload = {
        "halt": 1 if halt_on_error else 0,
        "cmd": commands
    }
    
    r = requests.post(url, json=payload, timeout=60)
    r.raise_for_status()
    data = r.json()
    
    if "error" in data:
        raise RuntimeError(f"batch: {data.get('error_description') or data.get('error')}")
    
    return data.get("result", {}).get("result", {})


def _bx_get(method, params=None, pause=0.35):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    out, start = [], 0
    params = dict(params or {})
    
    while True:
        params["start"] = start
        data = _bx_call(method, params=params)
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        
        if not batch:
            break
        
        out.extend(batch)
        
        if len(batch) < 50 and "next" not in data:
            break
        
        start = data.get("next", start + 50)
        time.sleep(pause)
    
    return out


# ============ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º TTL –∏ persist="disk" ============

@st.cache_data(ttl=1800, show_spinner="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫)...", persist="disk")
def bx_get_deals_by_date(field_from, field_to, limit=3000):
    """
    üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–∞–º
    
    –ö–≠–®–ò–†–û–í–ê–ù–ò–ï:
    - TTL = 1800 —Å–µ–∫ (30 –º–∏–Ω—É—Ç) - –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑ –≤ –ø–æ–ª—á–∞—Å–∞
    - persist="disk" - –∫—ç—à —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –¥–∏—Å–∫ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–≥–∞—è, –Ω–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ!
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API
    st.session_state["last_api_call"] = datetime.now()
    
    params = {
        "select[]": [
            "ID", "TITLE", "STAGE_ID", "OPPORTUNITY", "ASSIGNED_BY_ID", "COMPANY_ID", "CONTACT_ID",
            "PROBABILITY", "DATE_CREATE", "DATE_MODIFY", "LAST_ACTIVITY_TIME", "CATEGORY_ID",
            "BEGINDATE", "CLOSEDATE", "STAGE_SEMANTIC_ID"
        ]
    }
    
    if field_from:
        params[f"filter[>={field_from[0]}]"] = str(field_from[1])
    if field_to:
        params[f"filter[<={field_to[0]}]"] = str(field_to[1])
    
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]


@st.cache_data(ttl=1800, show_spinner="üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è...", persist="disk")
def bx_get_deals_dual(start, end, limit=3000):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–≤—É–º –¥–∞—Ç–∞–º: —Å–æ–∑–¥–∞–Ω–∏–µ + –∑–∞–∫—Ä—ã—Ç–∏–µ"""
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    st.session_state["last_refresh"] = datetime.now()
    
    created = bx_get_deals_by_date(("DATE_CREATE", start), ("DATE_CREATE", end), limit=limit)
    closed = bx_get_deals_by_date(("CLOSEDATE", start), ("CLOSEDATE", end), limit=limit)
    
    by_id = {}
    for r in created + closed:
        by_id[int(r["ID"])] = r
    
    out = [by_id[k] for k in sorted(by_id.keys())][:limit]
    return out


@st.cache_data(ttl=3600, persist="disk")
def bx_get_categories():
    """
    üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫)
    TTL = 3600 —Å–µ–∫ (1 —á–∞—Å) - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–¥–∫–æ
    """
    try:
        cats = _bx_get("crm.dealcategory.list")
        return {int(c["ID"]): c.get("NAME", "–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
    except Exception:
        try:
            cats = _bx_get("crm.category.list")
            return {int(c["ID"]): c.get("NAME", "–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
        except Exception:
            return {}


@st.cache_data(ttl=3600, persist="disk", show_spinner="üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–¥–∏–π —Å–¥–µ–ª–æ–∫...")
def bx_get_stage_map_by_category(category_ids):
    """
    üöÄ –ö–õ–Æ–ß–ï–í–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–π –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å—Ä–∞–∑—É
    
    –ë–´–õ–û: 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π = 10 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ = 5-10 —Å–µ–∫—É–Ω–¥
    –°–¢–ê–õ–û: 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π = 1 batch-–∑–∞–ø—Ä–æ—Å = 0.5 —Å–µ–∫—É–Ω–¥—ã (–≤ 20 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!)
    """
    sort_map, name_map = {}, {}
    
    if not category_ids:
        return sort_map, name_map
    
    unique_cats = sorted(set(int(x) for x in category_ids if pd.notna(x)))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º batch-–∑–∞–ø—Ä–æ—Å (–¥–æ 50 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ —Ä–∞–∑)
    commands = {}
    for cid in unique_cats[:50]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API –ë–∏—Ç—Ä–∏–∫—Å24
        commands[f"cat_{cid}"] = f"crm.dealcategory.stage.list?id={cid}"
    
    try:
        results = _bx_batch_call(commands)
        
        for key, stages in results.items():
            if isinstance(stages, list):
                for s in stages:
                    sid = s.get("STATUS_ID") or s.get("ID")
                    if not sid:
                        continue
                    sort_map[sid] = int(s.get("SORT", 5000))
                    name_map[sid] = s.get("NAME") or sid
    except Exception:
        # Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ batch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        for cid in unique_cats:
            try:
                stages = _bx_get("crm.dealcategory.stage.list", {"id": cid})
                for s in stages:
                    sid = s.get("STATUS_ID") or s.get("ID")
                    if not sid:
                        continue
                    sort_map[sid] = int(s.get("SORT", 5000))
                    name_map[sid] = s.get("NAME") or sid
            except Exception:
                continue
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–¥–∏–∏
    if not name_map:
        try:
            base = _bx_get("crm.status.list", {"filter[ENTITY_ID]": "DEAL_STAGE"})
            for s in base:
                sid = s.get("STATUS_ID")
                if not sid:
                    continue
                sort_map[sid] = int(s.get("SORT", 5000))
                name_map[sid] = s.get("NAME") or sid
        except Exception:
            pass
    
    return sort_map, name_map


@st.cache_data(ttl=1800, persist="disk")
def bx_get_departments():
    """üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤"""
    try:
        return _bx_get("department.get", {})
    except:
        return []


@st.cache_data(ttl=1800, persist="disk")
def bx_get_users_full():
    """üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = _bx_get("user.get", {})
    out = {}
    
    for u in users:
        depts = u.get("UF_DEPARTMENT") or []
        if isinstance(depts, str):
            depts = [int(x) for x in depts.split(",") if x]
        
        out[int(u["ID"])] = {
            "name": ((u.get("NAME", "") + " " + u.get("LAST_NAME", "")).strip() or u.get("LOGIN", "")).strip(),
            "depts": list(map(int, depts)) if depts else [],
            "active": (u.get("ACTIVE", "Y") == "Y")
        }
    
    return out


@st.cache_data(ttl=900, show_spinner="üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –∑–≤–æ–Ω–∫–∏)...", persist="disk")
def bx_get_activities(deal_ids, include_completed=True):
    """
    üöÄ –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    
    –ë–´–õ–û: 1000 —Å–¥–µ–ª–æ–∫ = 2000 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ + –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ) = 15-20 –º–∏–Ω—É—Ç
    –°–¢–ê–õ–û: 1000 —Å–¥–µ–ª–æ–∫ = 50 batch-–∑–∞–ø—Ä–æ—Å–æ–≤ = 30-60 —Å–µ–∫—É–Ω–¥ (–≤ 20-40 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!)
    
    Batch-—Ä–∞–∑–º–µ—Ä: 40 —Å–¥–µ–ª–æ–∫ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è API –ë–∏—Ç—Ä–∏–∫—Å24)
    """
    out = {}
    if not deal_ids:
        return out
    
    states = ["N", "Y"] if include_completed else ["N"]
    deal_ids = list(map(int, deal_ids))
    
    for state in states:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 40 —à—Ç—É–∫ (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ë–∏—Ç—Ä–∏–∫—Å24)
        chunks = [deal_ids[i:i+40] for i in range(0, len(deal_ids), 40)]
        
        for chunk in chunks:
            # Batch-–∑–∞–ø—Ä–æ—Å: –¥–æ 40 –∫–æ–º–∞–Ω–¥ –∑–∞ —Ä–∞–∑
            commands = {}
            for did in chunk:
                commands[f"act_{did}"] = f"crm.activity.list?filter[OWNER_TYPE_ID]=2&filter[OWNER_ID]={did}&filter[COMPLETED]={state}"
            
            try:
                results = _bx_batch_call(commands)
                
                for key, acts in results.items():
                    if isinstance(acts, list):
                        deal_id = int(key.split("_")[1])
                        out.setdefault(deal_id, []).extend(acts)
            except Exception:
                # Fallback: –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ batch –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                params = {
                    "filter[OWNER_TYPE_ID]": 2,
                    "filter[OWNER_ID]": ",".join(map(str, chunk)),
                    "filter[COMPLETED]": state
                }
                try:
                    acts = _bx_get("crm.activity.list", params)
                    for a in acts:
                        out.setdefault(int(a["OWNER_ID"]), []).append(a)
                except Exception:
                    pass
    
    return out


@st.cache_data(ttl=1800, show_spinner="üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –ø–æ —Å—Ç–∞–¥–∏—è–º...", persist="disk")
def bx_get_stage_history_lite(deal_ids, max_deals=300):
    """
    üöÄ –ú–ï–ì–ê-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–¥–∏–π
    
    –ë–´–õ–û: 300 —Å–¥–µ–ª–æ–∫ = 600 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–≤–∞ –º–µ—Ç–æ–¥–∞ API) = 5-8 –º–∏–Ω—É—Ç
    –°–¢–ê–õ–û: 300 —Å–¥–µ–ª–æ–∫ = 12 batch-–∑–∞–ø—Ä–æ—Å–æ–≤ = 10-20 —Å–µ–∫—É–Ω–¥ (–≤ 30 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!)
    
    Batch-—Ä–∞–∑–º–µ—Ä: 50 —Å–¥–µ–ª–æ–∫ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ (–º–∞–∫—Å–∏–º—É–º –¥–ª—è API –ë–∏—Ç—Ä–∏–∫—Å24)
    """
    if not deal_ids:
        return {}
    
    hist = {}
    ids = list(map(int, deal_ids))[:max_deals]
    
    # Batch-–∑–∞–ø—Ä–æ—Å: –¥–æ 50 —Å–¥–µ–ª–æ–∫ –∑–∞ —Ä–∞–∑ (–º–∞–∫—Å–∏–º—É–º API –ë–∏—Ç—Ä–∏–∫—Å24)
    chunks = [ids[i:i+50] for i in range(0, len(ids), 50)]
    
    for chunk in chunks:
        commands = {}
        for did in chunk:
            commands[f"hist_{did}"] = f"crm.stagehistory.deal.list?filter[OWNER_ID]={did}"
        
        try:
            results = _bx_batch_call(commands)
            
            for key, items in results.items():
                if isinstance(items, list) and items:
                    deal_id = int(key.split("_")[1])
                    hist[deal_id] = items
        except Exception:
            # Fallback: –æ–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            for did in chunk:
                try:
                    items = _bx_get("crm.stagehistory.deal.list", {"filter[OWNER_ID]": did})
                    if items:
                        hist[did] = items
                except Exception:
                    pass
    
    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–¥–µ–ª–æ–∫, –≥–¥–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    try:
        remain = [i for i in ids if i not in hist]
        if remain:
            chunks2 = [remain[i:i+50] for i in range(0, len(remain), 50)]
            
            for chunk in chunks2:
                commands = {}
                for did in chunk:
                    commands[f"hist_{did}"] = f"crm.stagehistory.list?filter[OWNER_TYPE_ID]=2&filter[OWNER_ID]={did}"
                
                try:
                    results = _bx_batch_call(commands)
                    
                    for key, items in results.items():
                        if isinstance(items, list) and items:
                            deal_id = int(key.split("_")[1])
                            hist[deal_id] = items
                except Exception:
                    pass
    except Exception:
        pass
    
    return hist
# ============ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ============
CAT_MAIN = "–æ—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"
CAT_PHYS = "—Ñ–∏–∑.–ª–∏—Ü–∞"
CAT_LOW = "–Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏"

SUCCESS_NAME_BY_CAT = {
    CAT_MAIN: "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
    CAT_PHYS: "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞",
    CAT_LOW: "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞",
}

FAIL_GROUP1 = {
    "–ù–µ–¥–æ–∑–≤–æ–Ω", "–ù–µ –∞–±–æ–Ω–µ–Ω—Ç", "–°–ü–ê–ú", "–ù–µ—Ü–µ–ª–µ–≤–æ–π", "–î–æ—Ä–æ–≥–æ", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç",
    "–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞", "–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏", "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º", "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –Ω–µ—Ä–∞–∑–æ–±—Ä. –ê–≤–∏—Ç–æ"
}

FAIL_GROUP2 = {
    "–í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", "–î–æ—Ä–æ–≥–æ", "–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç",
    "–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞", "–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏", "–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"
}

# ============ –î–∞—Ç—ã/–ø–µ—Ä–∏–æ–¥—ã ============
def get_date_range():
    today = date.today()
    return {
        "–°–µ–≥–æ–¥–Ω—è": (today, today),
        "–í—á–µ—Ä–∞": (today - timedelta(days=1), today - timedelta(days=1)),
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": (today - timedelta(days=7), today),
        "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü": (today.replace(day=1), today),
        "–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü": (
            (today.replace(day=1) - timedelta(days=1)).replace(day=1),
            today.replace(day=1) - timedelta(days=1)
        )
    }

# ============ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ============
ranges = get_date_range()
period = st.sidebar.selectbox("–ü–µ—Ä–∏–æ–¥", list(ranges.keys()), index=0)
start_date, end_date = ranges[period]

deals = bx_get_deals_dual(start_date, end_date)
categories = bx_get_categories()
stage_sort_map, stage_name_map = bx_get_stage_map_by_category([d.get("STAGE_ID") for d in deals])

# ============ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ============
df = pd.DataFrame(deals)
df["DATE_CREATE"] = pd.to_datetime(df["DATE_CREATE"])
df["CLOSEDATE"] = pd.to_datetime(df["CLOSEDATE"])
df["OPPORTUNITY"] = pd.to_numeric(df["OPPORTUNITY"], errors="coerce").fillna(0)

df["CATEGORY_NAME"] = df["CATEGORY_ID"].map(categories)
df["STAGE_NAME"] = df["STAGE_ID"].map(stage_name_map).fillna(df["STAGE_ID"])
df["STAGE_ORDER"] = df["STAGE_ID"].map(stage_sort_map).fillna(9999).astype(int)

# ============ –§–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ============
col1, col2 = st.columns(2)
with col1:
    sel_category = st.selectbox("–í–æ—Ä–æ–Ω–∫–∞", ["–í—Å–µ"] + sorted(set(df["CATEGORY_NAME"].dropna())))
with col2:
    sel_stage = st.selectbox("–°—Ç–∞–¥–∏—è", ["–í—Å–µ"] + sorted(set(df["STAGE_NAME"].dropna()), key=lambda x: stage_sort_map.get(x, 9999)))

if sel_category != "–í—Å–µ":
    df = df[df["CATEGORY_NAME"] == sel_category]
if sel_stage != "–í—Å–µ":
    df = df[df["STAGE_NAME"] == sel_stage]

# ============ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ============
total_deals = len(df)
won_deals = len(df[df["STAGE_SEMANTIC_ID"] == "S"])
lost_deals = total_deals - won_deals
sum_opportunity = df["OPPORTUNITY"].sum()

st.markdown(f"## –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_deals}  |  –£—Å–ø–µ—à–Ω–æ: {won_deals}  |  –ü—Ä–æ–≤–∞–ª: {lost_deals}")
st.markdown(f"### –û–±—â–∞—è —Å—É–º–º–∞: {sum_opportunity:,.0f} ‚ÇΩ")

# ============ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ç—É—Å—ã —Å–¥–µ–ª–æ–∫ ============
if px:
    fig = px.histogram(
        df,
        x="STAGE_NAME",
        category_orders={"STAGE_NAME": sorted(df["STAGE_NAME"].unique(), key=lambda x: stage_sort_map.get(x, 9999))},
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ —Å—Ç–∞–¥–∏—è–º",
        labels={"STAGE_NAME": "–°—Ç–∞–¥–∏—è", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫"}
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.write("Plotly –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∂—É —Ç–∞–±–ª–∏—Ü—É:")
    st.dataframe(df.groupby("STAGE_NAME").size().reset_index(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"))

# ============ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Å—É–º–º–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º ============
users = bx_get_users_full()
df["MANAGER"] = df["ASSIGNED_BY_ID"].map(lambda x: users.get(x, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

fig2 = px.bar(
    df.groupby("MANAGER")["OPPORTUNITY"].sum().reset_index(),
    x="MANAGER",
    y="OPPORTUNITY",
    title="–í—ã—Ä—É—á–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
    labels={"OPPORTUNITY": "–°—É–º–º–∞, ‚ÇΩ", "MANAGER": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}
)
st.plotly_chart(fig2, use_container_width=True)

# ============ –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ ============
st.markdown("## –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫")
st.dataframe(df[[
    "ID", "TITLE", "CATEGORY_NAME", "STAGE_NAME", "OPPORTUNITY", "DATE_CREATE", "CLOSEDATE", "MANAGER"
]].sort_values(by="DATE_CREATE", ascending=False), height=600)

# ============ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ============
st.markdown("---")
st.caption("–í–µ—Ä—Å–∏—è 6.0 ‚ÅÇ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: admin@burmash.ru")
