# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ (v4.3)
‚Äî –ù–∞–¥—ë–∂–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ñ–æ—Ä–º–∞, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞—Ö)
‚Äî –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ key —É –≤—Å–µ—Ö plotly_chart (–Ω–µ—Ç StreamlitDuplicateElementId)
‚Äî –ü–æ–¥—Å–∫–∞–∑—á–∏–∫ –†–û–ü—É: Quick Wins / Stop List + ETA
‚Äî –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤ –∏–∑ Bitrix (crm.status.list), —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
‚Äî –û–ø—Ü–∏—è ¬´–¢–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂¬ª (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –æ—Ç–¥–µ–ª–æ–≤ —Å ‚Äú–ø—Ä–æ–¥–∞–∂‚Äù + —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä)
‚Äî –ë–µ–ª–æ/–æ—Ä–∞–Ω–∂–µ–≤–æ/—á—ë—Ä–Ω–∞—è —Ç–µ–º–∞, –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤—ã—Ö –≤—ã–≥—Ä—É–∑–æ–∫
"""

import os
import time
import math
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import streamlit as st
import requests

# =========================
# –ì—Ä–∞—Ñ–∏–∫–∏
# =========================
try:
    import plotly.express as px
except Exception:
    px = None

# =========================
# UI / –¢–ï–ú–ê
# =========================
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM", page_icon="üüß", layout="wide")

THEME_CSS = """
<style>
:root{ --brand:#ff7a00; --black:#0a0a0a; --border:#e9edf2; --muted:#6b7280; --good:#10b981; --bad:#ef4444; --warn:#f59e0b; }
html,body,[data-testid="stAppViewContainer"]{ background:#ffffff; color:var(--black); }
.block-container{ padding-top:.6rem; padding-bottom:1.2rem; }
.card{ background:#fff; border:1px solid var(--border); border-radius:14px; padding:16px 16px 10px; box-shadow:0 2px 12px rgba(0,0,0,.04); }
.title{ font-weight:700; font-size:18px; margin-bottom:6px; }
.subtle{ color:var(--muted); font-size:12px; }
.badge{ display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; border:1px solid var(--border); background:#fff; font-size:12px; margin-right:6px; margin-bottom:6px;}
.badge.good{ color:var(--good); border-color:rgba(16,185,129,.3); }
.badge.bad{ color:var(--bad); border-color:rgba(239,68,68,.3); }
.badge.warn{ color:var(--warn); border-color:rgba(245,158,11,.3); }
.kpi{ font-weight:800; font-size:28px; line-height:1; }
.kpi-caption{ color:var(--muted); font-size:12px; margin-top:-6px }
.pill{ display:inline-block; padding:8px 12px; border-radius:12px; background:rgba(255,122,0,.08); color:var(--brand); font-weight:800; border:1px solid rgba(255,122,0,.25); }
hr{ border:0; border-top:1px solid var(--border); margin:10px 0 8px }
div[data-testid="stMetricValue"]{ font-size:22px !important; }
.score{ width:64px;height:64px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;background:#fff;border:2px solid var(--border);font-weight:800;font-size:22px;margin-right:10px }
.grid2{ display:grid; grid-template-columns:1fr 1fr; gap:12px; }
.grid3{ display:grid; grid-template-columns:1fr 1fr 1fr; gap:12px; }
.headerbar{ display:flex; align-items:center; gap:16px; margin-bottom:8px; }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# =========================
# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (—Ñ–æ—Ä–º–∞)
# =========================
AUTH_KEY = "burmash_auth_ok"

def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False

    if st.session_state[AUTH_KEY]:
        return

    st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
    with st.form("login_form", clear_on_submit=False):
        login = st.text_input("–õ–æ–≥–∏–Ω", value="", key="auth_user")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password", key="auth_pass")
        ok = st.form_submit_button("–í–æ–π—Ç–∏")
    if ok:
        st.session_state[AUTH_KEY] = (login == "admin" and password == "admin123")
        if not st.session_state[AUTH_KEY]:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        st.rerun()
    st.stop()

require_auth()

with st.sidebar:
    if st.button("–í—ã–π—Ç–∏", key="logout_btn"):
        st.session_state[AUTH_KEY] = False
        st.rerun()

# =========================
# –°–µ–∫—Ä–µ—Ç—ã / –æ–∫—Ä—É–∂–µ–Ω–∏–µ
# =========================
def get_secret(name, default=None):
    if name in st.secrets:
        return st.secrets[name]
    return os.getenv(name, default)

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
PERPLEXITY_API_KEY = (get_secret("PERPLEXITY_API_KEY", "") or "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî AI-–≤–∫–ª–∞–¥–∫–∞ –ø–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

# =========================
# Bitrix24 helpers
# =========================
def _bx_get(method, params=None, pause=0.4):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        r = requests.get(url, params=params, timeout=30)
        data = r.json()
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        if not batch:
            break
        out.extend(batch)
        if len(batch) < 50:
            break
        start += 50
        time.sleep(pause)
    return out

@st.cache_data(ttl=300)
def bx_get_deals(date_from=None, date_to=None, limit=1000):
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID",
        "PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME","CATEGORY_ID","BEGINDATE"
    ]}
    if date_from: params["filter[>=DATE_CREATE]"] = date_from
    if date_to:   params["filter[<=DATE_CREATE]"] = date_to
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=300)
def bx_get_departments():
    try:
        return _bx_get("department.get", {})
    except Exception:
        return []

@st.cache_data(ttl=300)
def bx_get_users_full():
    users = _bx_get("user.get", {})
    out = {}
    for u in users:
        depts = u.get("UF_DEPARTMENT") or []
        if isinstance(depts, str):
            depts = [int(x) for x in depts.split(",") if x]
        out[int(u["ID"])] = {
            "name": ((u.get("NAME","")+" "+u.get("LAST_NAME","")).strip() or u.get("LOGIN","")).strip(),
            "depts": list(map(int, depts)) if depts else [],
            "active": (u.get("ACTIVE","Y")=="Y")
        }
    return out

@st.cache_data(ttl=300)
def bx_get_open_activities_for_deal_ids(deal_ids):
    out = {}
    if not deal_ids:
        return out
    for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
        params = {"filter[OWNER_TYPE_ID]":2,"filter[OWNER_ID]":",".join(map(str,chunk)),"filter[COMPLETED]":"N"}
        acts = _bx_get("crm.activity.list", params)
        for a in acts:
            out.setdefault(int(a["OWNER_ID"]), []).append(a)
    return out

@st.cache_data(ttl=600)
def bx_get_stage_map(stage_ids):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sort_map, name_map) –¥–ª—è —ç—Ç–∞–ø–æ–≤ –∏–∑ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫."""
    sort_map, name_map = {}, {}
    if not BITRIX24_WEBHOOK or not stage_ids:
        return sort_map, name_map

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ C{ID}:STAGE
    cats = set()
    for sid in stage_ids:
        if isinstance(sid, str) and sid.startswith("C"):
            try:
                cats.add(int(sid.split(":")[0][1:]))
            except Exception:
                pass

    # –ë–∞–∑–æ–≤–∞—è –≤–æ—Ä–æ–Ω–∫–∞
    try:
        base = _bx_get("crm.status.list", {"filter[ENTITY_ID]":"DEAL_STAGE"})
        for s in base:
            sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
            name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
    except Exception:
        pass

    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cid in cats:
        try:
            resp = _bx_get("crm.status.list", {"filter[ENTITY_ID]": f"DEAL_STAGE_{cid}"})
            for s in resp:
                sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
                name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
        except Exception:
            continue

    return sort_map, name_map

@st.cache_data(ttl=600)
def bx_get_categories():
    try:
        cats = _bx_get("crm.category.list", {})
        return {int(c["ID"]): c.get("NAME","–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
    except Exception:
        return {}

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def to_dt(x):
    try:
        ts = pd.to_datetime(x, utc=True, errors="coerce")
        if pd.isna(ts): return pd.NaT
        return ts.tz_convert(None)  # —Å–¥–µ–ª–∞—Ç—å naive UTC
    except Exception:
        return pd.NaT

def days_between(later, earlier):
    a, b = to_dt(later), to_dt(earlier)
    if pd.isna(a) or pd.isna(b):
        return None
    return max(0, int((a - b) / pd.Timedelta(days=1)))

# =========================
# –°–∫–æ—Ä–∏–Ω–≥–∏
# =========================
def compute_health_scores(df, open_tasks_map, stuck_days=5):
    now = to_dt(pd.Timestamp.utcnow())
    rows = []
    for _, r in df.iterrows():
        create_dt = to_dt(r.get("DATE_CREATE"))
        last = to_dt(r.get("LAST_ACTIVITY_TIME")) or to_dt(r.get("DATE_MODIFY")) or create_dt
        begin_dt = to_dt(r.get("BEGINDATE")) or create_dt

        d_work  = days_between(now, create_dt) or 0
        d_noact = days_between(now, last) or 0
        d_in_stage = days_between(now, begin_dt) or 0

        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0
        flags = {
            "no_company": int(r.get("COMPANY_ID") or 0) == 0,
            "no_contact": int(r.get("CONTACT_ID") or 0) == 0,
            "no_tasks": not has_task,
            "stuck": d_noact >= stuck_days,
            "lost": str(r.get("STAGE_ID","")).upper().find("LOSE") >= 0
        }

        score = 100
        if flags["no_company"]: score -= 10
        if flags["no_contact"]: score -= 10
        if flags["no_tasks"]:   score -= 25
        if flags["stuck"]:      score -= 25
        if flags["lost"]:       score = min(score, 15)

        opp  = float(r.get("OPPORTUNITY") or 0.0)
        prob = float(r.get("PROBABILITY")  or 0.0)
        potential = min(100, int((opp > 0) * (30 + min(70, math.log10(max(1, opp))/5 * 70)) * (0.4 + prob/100*0.6)))

        rows.append({
            "ID —Å–¥–µ–ª–∫–∏": int(r["ID"]),
            "–ù–∞–∑–≤–∞–Ω–∏–µ": r.get("TITLE",""),
            "–ú–µ–Ω–µ–¥–∂–µ—Ä ID": int(r.get("ASSIGNED_BY_ID") or 0),
            "–≠—Ç–∞–ø ID": r.get("STAGE_ID",""),
            "–í–æ—Ä–æ–Ω–∫–∞ ID": r.get("CATEGORY_ID"),
            "–°—É–º–º–∞": opp,
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": prob,
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": create_dt,
            "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è": to_dt(r.get("DATE_MODIFY")),
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": last,
            "–ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞": begin_dt,
            "–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ": d_work,
            "–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": d_noact,
            "–î–Ω–µ–π –Ω–∞ —ç—Ç–∞–ø–µ": d_in_stage,
            "–ó–¥–æ—Ä–æ–≤—å–µ": max(0, min(100, int(score))),
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª": max(0, min(100, int(potential))),
            "–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏": flags["no_company"],
            "–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞": flags["no_contact"],
            "–ù–µ—Ç –∑–∞–¥–∞—á": flags["no_tasks"],
            "–ó–∞—Å—Ç—Ä—è–ª–∞": flags["stuck"],
            "–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞": flags["lost"],
        })
    return pd.DataFrame(rows)

def focus_scores(df, horizon_days=14, min_prob=50):
    """–û—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑—á–∏–∫–∞ –†–û–ü—É."""
    if df.empty:
        return df.assign(**{"–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã":0.0, "ETA –¥–Ω–µ–π":np.nan, "–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞":0.0})

    eps = 1e-9
    prob = df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"].clip(0,100) / 100.0
    health = df["–ó–¥–æ—Ä–æ–≤—å–µ"].clip(0,100) / 100.0
    opp = df["–°—É–º–º–∞"].clip(lower=0)
    opp_norm = np.log1p(opp) / max(np.log1p(opp).max(), eps)

    smin, smax = float(df["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"].min()), float(df["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"].max())
    if smax - smin < eps:
        stage_closeness = pd.Series(0.5, index=df.index)
    else:
        stage_closeness = (df["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"] - smin) / (smax - smin)
    stage_closeness = np.where(df["–≠—Ç–∞–ø ID"].astype(str).str.contains("LOSE", case=False, na=False), 0.0, stage_closeness)

    recency = 1 - (df["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"].clip(lower=0) / max(horizon_days, 1)).clip(0,1)

    quick = 0.35*prob + 0.25*health + 0.15*recency + 0.15*stage_closeness + 0.10*opp_norm
    quick_score = (quick*100).round(1)

    eta = (30*(1-stage_closeness)*(1 - 0.5*health - 0.5*prob)).clip(lower=0).round(0)

    age_norm = (df["–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ"]/max(df["–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ"].max(),1)).clip(0,1)
    noact_norm = (df["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]/max(df["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"].max(),1)).clip(0,1)
    drop = (1-prob)*0.4 + (1-health)*0.3 + noact_norm*0.2 + age_norm*0.1
    drop_score = (drop*100).round(1)

    out = df.copy()
    out["–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã"] = quick_score
    out["ETA –¥–Ω–µ–π"] = eta
    out["–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞"] = drop_score
    out["–ë—ã—Å—Ç—Ä–∞—è –ø–æ–±–µ–¥–∞?"] = (out["–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã"]>=60) & (out["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]>=min_prob) & (~out["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"])
    out["–°—Ç–æ–ø-–ª–∏—Å—Ç?"] = (out["–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞"]>=70) | (out["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"]) | ((out["–ó–¥–æ—Ä–æ–≤—å–µ"]<40) & (out["–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]>horizon_days))
    return out

def compute_conversion_by_manager_and_funnel(df, sort_map):
    results = []
    for (mgr, cat), g in df.groupby(["–ú–µ–Ω–µ–¥–∂–µ—Ä","–í–æ—Ä–æ–Ω–∫–∞"], dropna=False):
        stages_sorted = sorted(g["–≠—Ç–∞–ø ID"].unique(), key=lambda s: sort_map.get(str(s), 9999))
        stage_counts = g.groupby("–≠—Ç–∞–ø ID").size()
        total = len(g)
        stage_data = []
        for s in stages_sorted:
            cnt = int(stage_counts.get(s, 0))
            conv = (cnt/total*100) if total>0 else 0
            stage_data.append({"–≠—Ç–∞–ø": s, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": cnt, "–ö–æ–Ω–≤–µ—Ä—Å–∏—è %": round(conv,1)})
        results.append({"–ú–µ–Ω–µ–¥–∂–µ—Ä": mgr, "–í–æ—Ä–æ–Ω–∫–∞": cat, "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": total, "–≠—Ç–∞–ø—ã": stage_data})
    return pd.DataFrame(results)

# =========================
# –°–∞–π–¥–±–∞—Ä: —Ñ–∏–ª—å—Ç—Ä—ã
# =========================
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
date_from  = st.sidebar.date_input("–° –∫–∞–∫–æ–π –¥–∞—Ç—ã", datetime.now().date() - timedelta(days=30))
date_to    = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É", datetime.now().date())
stuck_days = st.sidebar.slider("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚â• (–¥–Ω–µ–π)", 2, 21, 5)
limit      = st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (API)", 50, 3000, 600, step=50)

st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–∫—É—Å–∞ –†–û–ü–∞")
focus_horizon   = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç —Ñ–æ–∫—É—Å–∞ (–¥–Ω–µ–π)", 7, 45, 14)
focus_min_prob  = st.sidebar.slider("–ú–∏–Ω. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–æ–∫—É—Å–∞, %", 0, 100, 50)

# =========================
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# =========================
with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶"):
    if not BITRIX24_WEBHOOK:
        st.error("–ù–µ —É–∫–∞–∑–∞–Ω BITRIX24_WEBHOOK –≤ Secrets. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã —Ç—è–Ω—É—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ CRM.")
        st.stop()

    deals_raw = bx_get_deals(str(date_from), str(date_to), limit=limit)
    if not deals_raw:
        st.error("–°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        st.stop()
    df_raw = pd.DataFrame(deals_raw)
    df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw.get("OPPORTUNITY"), errors="coerce").fillna(0.0)

    users_full = bx_get_users_full()
    users_map = {uid: users_full[uid]["name"] for uid in users_full}
    categories_map = bx_get_categories()
    open_tasks_map = bx_get_open_activities_for_deal_ids(df_raw["ID"].tolist())

# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–æ—Ä–∏–Ω–≥
df_scores = compute_health_scores(df_raw, open_tasks_map, stuck_days=stuck_days)

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏ –∏–º–µ–Ω–∞ —ç—Ç–∞–ø–æ–≤
stage_ids = df_scores["–≠—Ç–∞–ø ID"].dropna().unique().tolist()
sort_map, name_map = bx_get_stage_map(stage_ids)

FALLBACK_ORDER = ["NEW","NEW_LEAD","PREPARATION","PREPAYMENT_INVOICE","EXECUTING","FINAL_INVOICE","WON","LOSE","LOSE_REASON"]
def fallback_sort(sid):
    sid = str(sid or "")
    sid_short = sid.split(":")[1] if ":" in sid else sid
    return (FALLBACK_ORDER.index(sid_short)*100 if sid_short in FALLBACK_ORDER else 10000 + hash(sid_short)%1000)

df_scores["–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"] = df_scores["–≠—Ç–∞–ø ID"].map(lambda s: sort_map.get(str(s), fallback_sort(s)))
df_scores["–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞"]   = df_scores["–≠—Ç–∞–ø ID"].map(lambda s: name_map.get(str(s), str(s)))
df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"]         = df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
df_scores["–í–æ—Ä–æ–Ω–∫–∞"]          = df_scores["–í–æ—Ä–æ–Ω–∫–∞ ID"].map(lambda x: categories_map.get(int(x or 0), "–û—Å–Ω–æ–≤–Ω–∞—è"))

# –§–∏–ª—å—Ç—Ä ¬´—Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂¬ª
departments = bx_get_departments()
sales_depts = [d for d in departments if "–ø—Ä–æ–¥–∞–∂" in (d.get("NAME","").lower())]
sales_dept_ids = {int(d["ID"]) for d in sales_depts}
default_sales_only = bool(sales_dept_ids)

if departments:
    show_sales_only = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂", value=default_sales_only)
    selected_depts = st.sidebar.multiselect(
        "–û—Ç–¥–µ–ª—ã (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º)",
        options=[(int(d["ID"]), d["NAME"]) for d in departments],
        default=[(int(d["ID"]), d["NAME"]) for d in sales_depts],
        format_func=lambda t: t[1] if isinstance(t, tuple) else str(t)
    )
    selected_dept_ids = {t[0] for t in selected_depts} if selected_depts else sales_dept_ids
    if show_sales_only and selected_dept_ids:
        keep_ids = [uid for uid, info in users_full.items() if set(info["depts"]) & selected_dept_ids]
        df_scores = df_scores[df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä ID"].isin(keep_ids)]

# –ü–æ–¥—Å–∫–∞–∑—á–∏–∫ –†–û–ü—É
df_scores = focus_scores(df_scores, horizon_days=focus_horizon, min_prob=focus_min_prob)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º/–≤–æ—Ä–æ–Ω–∫–∞–º
funnels  = sorted(df_scores["–í–æ—Ä–æ–Ω–∫–∞"].unique())
managers = sorted(df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"].unique())
selected_funnels  = st.sidebar.multiselect("–í–æ—Ä–æ–Ω–∫–∏", funnels, default=funnels)
selected_managers = st.sidebar.multiselect("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", managers, default=managers)

view_df = df_scores[(df_scores["–í–æ—Ä–æ–Ω–∫–∞"].isin(selected_funnels)) & (df_scores["–ú–µ–Ω–µ–¥–∂–µ—Ä"].isin(selected_managers))].copy()
if view_df.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    st.stop()

# =========================
# –®–∞–ø–∫–∞
# =========================
st.markdown("<div class='headerbar'><div class='pill'>–ë–£–†–ú–ê–® ¬∑ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂</div></div>", unsafe_allow_html=True)
st.caption("–ü—É–ª—å—Å –≤–æ—Ä–æ–Ω–∫–∏ ¬∑ –ê—É–¥–∏—Ç ¬∑ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã ¬∑ –ö–∞—Ä—Ç–æ—á–∫–∏ ¬∑ –û—Ç—á—ë—Ç ¬∑ –§–æ–∫—É—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é ¬∑ –ü–ª–∞–Ω/—Ñ–∞–∫—Ç")

c1,c2,c3,c4,c5 = st.columns(5, gap="small")
with c1: st.metric("–°–¥–µ–ª–æ–∫", int(view_df.shape[0]))
with c2: st.metric("–û–±—ä—ë–º, ‚ÇΩ", f"{int(view_df['–°—É–º–º–∞'].sum()):,}".replace(","," "))
with c3: st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", f"{int(view_df['–°—É–º–º–∞'].replace(0,np.nan).mean() or 0):,}".replace(","," "))
with c4: st.metric("–°—Ä. –∑–¥–æ—Ä–æ–≤—å–µ", f"{view_df['–ó–¥–æ—Ä–æ–≤—å–µ'].mean():.0f}%")
with c5: st.metric("–°—É–º–º–∞—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", int(view_df["–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª"].sum()))

# =========================
# –í–∫–ª–∞–¥–∫–∏
# =========================
tab_focus, tab_pulse, tab_audit, tab_managers, tab_cards, tab_deal, tab_plan, tab_ai = st.tabs([
    "üéØ –§–æ–∫—É—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é", "‚õµ –ü—É–ª—å—Å –≤–æ—Ä–æ–Ω–∫–∏", "üöß –ê—É–¥–∏—Ç", "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏", "üìÑ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ", "üìÖ –ü–ª–∞–Ω/—Ñ–∞–∫—Ç", "ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
])

# --- –§–û–ö–£–° –†–û–ü—É ---
with tab_focus:
    st.markdown("#### –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏ (Quick Wins)")
    quick = (view_df[view_df["–ë—ã—Å—Ç—Ä–∞—è –ø–æ–±–µ–¥–∞?"]]
             .sort_values(["–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã","–°—É–º–º–∞"], ascending=[False, False])
             .loc[:, ["ID —Å–¥–µ–ª–∫–∏","–ù–∞–∑–≤–∞–Ω–∏–µ","–ú–µ–Ω–µ–¥–∂–µ—Ä","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞","–°—É–º–º–∞","–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å","–ó–¥–æ—Ä–æ–≤—å–µ","–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏","ETA –¥–Ω–µ–π","–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã"]]
             .head(30))
    if quick.empty:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—è–º —Ñ–æ–∫—É—Å–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä–æ–≥–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
    else:
        st.dataframe(quick.rename(columns={
            "ID —Å–¥–µ–ª–∫–∏":"ID","–ù–∞–∑–≤–∞–Ω–∏–µ":"–°–¥–µ–ª–∫–∞","–ú–µ–Ω–µ–¥–∂–µ—Ä":"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞":"–≠—Ç–∞–ø",
            "–°—É–º–º–∞":"–°—É–º–º–∞, ‚ÇΩ","–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å":"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %","–ó–¥–æ—Ä–æ–≤—å–µ":"–ó–¥–æ—Ä–æ–≤—å–µ, %",
            "–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":"–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–Ω","ETA –¥–Ω–µ–π":"ETA, –¥–Ω","–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã":"Quick Win, –±–∞–ª–ª—ã"
        }), height=420, use_container_width=True)

    st.markdown("#### –°—Ç–æ–∏—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Stop List)")
    stop = (view_df[view_df["–°—Ç–æ–ø-–ª–∏—Å—Ç?"]]
            .sort_values(["–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞","–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏","–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ"], ascending=[False, False, False])
            .loc[:, ["ID —Å–¥–µ–ª–∫–∏","–ù–∞–∑–≤–∞–Ω–∏–µ","–ú–µ–Ω–µ–¥–∂–µ—Ä","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞","–°—É–º–º–∞","–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å","–ó–¥–æ—Ä–æ–≤—å–µ","–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ","–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏","–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞"]]
            .head(30))
    if stop.empty:
        st.success("–Ø–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        st.dataframe(stop.rename(columns={
            "ID —Å–¥–µ–ª–∫–∏":"ID","–ù–∞–∑–≤–∞–Ω–∏–µ":"–°–¥–µ–ª–∫–∞","–ú–µ–Ω–µ–¥–∂–µ—Ä":"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞":"–≠—Ç–∞–ø",
            "–°—É–º–º–∞":"–°—É–º–º–∞, ‚ÇΩ","–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å":"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %","–ó–¥–æ—Ä–æ–≤—å–µ":"–ó–¥–æ—Ä–æ–≤—å–µ, %",
            "–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ":"–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ","–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏":"–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –¥–Ω","–°–∫–æ—Ä –æ—Ç–∫–∞–∑–∞":"StopScore, –±–∞–ª–ª—ã"
        }), height=380, use_container_width=True)

    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.markdown("#### –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
    top_actions = view_df.sort_values("–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã", ascending=False).head(6)
    cols = st.columns(3, gap="medium")
    for i, (_, r) in enumerate(top_actions.iterrows()):
        with cols[i % 3]:
            st.markdown(f"""
            <div class="card">
              <div class="title">{r['–ù–∞–∑–≤–∞–Ω–∏–µ']}</div>
              <div class="subtle">–≠—Ç–∞–ø: {r['–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞']} ‚Ä¢ –û—Ç–≤.: {r['–ú–µ–Ω–µ–¥–∂–µ—Ä']}</div><hr/>
              <span class="badge good">Quick Win: <b>{r['–°–∫–æ—Ä –±—ã—Å—Ç—Ä–æ–π –ø–æ–±–µ–¥—ã']}</b></span>
              <span class="badge">ETA: <b>{int(r['ETA –¥–Ω–µ–π'])} –¥–Ω</b></span>
              <span class="badge">–í–µ—Ä–æ—è—Ç–Ω.: <b>{int(r['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'])}%</b></span>
              <span class="badge">–°—É–º–º–∞: <b>{int(r['–°—É–º–º–∞']):,} ‚ÇΩ</b></span>
              <hr/>
              <div class="subtle">üëâ {('–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ–∑–≤–æ–Ω –∏ —Å—á—ë—Ç' if r['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å']>=70 and r['–ó–¥–æ—Ä–æ–≤—å–µ']>=70 else '–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–µ–º–æ/–≤—Å—Ç—Ä–µ—á—É —Å –õ–ü–† –∏ –≤—ã—Å–ª–∞—Ç—å –ö–ü')}</div>
            </div>
            """, unsafe_allow_html=True)

# --- –ü–£–õ–¨–° –í–û–†–û–ù–ö–ò ---
with tab_pulse:
    st.markdown("##### –í–æ—Ä–æ–Ω–∫–∞ —ç—Ç–∞–ø–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)")
    if px is None:
        st.info("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        metric_kind = st.radio("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞, ‚ÇΩ"], horizontal=True, key="metric_kind_funnel")
        funnel_df = (
            view_df.groupby(["–≠—Ç–∞–ø ID","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞","–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞"])
            .agg(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID —Å–¥–µ–ª–∫–∏","count"), –°—É–º–º–∞=("–°—É–º–º–∞","sum"))
            .reset_index()
            .sort_values("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞")
        )
        if metric_kind == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            fig = px.funnel(funnel_df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞", color_discrete_sequence=["#ff7a00"])
        else:
            fig = px.funnel(funnel_df, x="–°—É–º–º–∞", y="–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞", color_discrete_sequence=["#ff7a00"])
        fig.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=420)
        st.plotly_chart(fig, use_container_width=True, key="chart_funnel_main")

    st.markdown("##### –¢—Ä–µ–Ω–¥ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è")
    if px:
        trend = view_df.copy()
        trend["date"] = pd.to_datetime(trend["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"]).dt.date
        trend = trend.groupby("date").agg(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID —Å–¥–µ–ª–∫–∏","count"), –°—É–º–º–∞=("–°—É–º–º–∞","sum")).reset_index()
        c1, c2 = st.columns(2, gap="large")
        with c1:
            fig1 = px.line(trend, x="date", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", markers=True, color_discrete_sequence=["#ff7a00"])
            fig1.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=280)
            st.plotly_chart(fig1, use_container_width=True, key="chart_trend_qty")
        with c2:
            fig2 = px.area(trend, x="date", y="–°—É–º–º–∞", color_discrete_sequence=["#111111"])
            fig2.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=280)
            st.plotly_chart(fig2, use_container_width=True, key="chart_trend_sum")

    st.markdown("##### –õ–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)")
    st.dataframe(
        view_df.sort_values("–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", ascending=False)[
            ["ID —Å–¥–µ–ª–∫–∏","–ù–∞–∑–≤–∞–Ω–∏–µ","–ú–µ–Ω–µ–¥–∂–µ—Ä","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞","–°—É–º–º–∞","–ó–¥–æ—Ä–æ–≤—å–µ","–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª","–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è"]
        ].head(200),
        height=360, use_container_width=True
    )

# --- –ê–£–î–ò–¢ ---
with tab_audit:
    st.markdown("##### –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã")
    kpis = {
        "–ë–µ–∑ –∑–∞–¥–∞—á": int(view_df["–ù–µ—Ç –∑–∞–¥–∞—á"].sum()),
        "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": int(view_df["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"].sum()),
        "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π": int(view_df["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"].sum()),
        "–ó–∞—Å—Ç—Ä—è–ª–∏": int(view_df["–ó–∞—Å—Ç—Ä—è–ª–∞"].sum()),
        "–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ": int(view_df["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"].sum()),
    }
    a,b,c,d,e = st.columns(5)
    a.metric("–ë–µ–∑ –∑–∞–¥–∞—á", kpis["–ë–µ–∑ –∑–∞–¥–∞—á"])
    b.metric("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", kpis["–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    c.metric("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", kpis["–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π"])
    d.metric("–ó–∞—Å—Ç—Ä—è–ª–∏", kpis["–ó–∞—Å—Ç—Ä—è–ª–∏"])
    e.metric("–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ", kpis["–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ"])

    if px:
        audit_df = pd.DataFrame({"–ü—Ä–æ–±–ª–µ–º–∞": list(kpis.keys()), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": list(kpis.values())}).sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False)
        fig_p = px.bar(audit_df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ü—Ä–æ–±–ª–µ–º–∞", orientation="h",
                       color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color_continuous_scale=["#ffe8d6","#ff7a00"])
        fig_p.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=320)
        st.plotly_chart(fig_p, use_container_width=True, key="chart_audit_bar")

    st.markdown("##### –°–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    cols = st.columns(5, gap="small")
    lists = [
        ("–ë–µ–∑ –∑–∞–¥–∞—á", view_df["–ù–µ—Ç –∑–∞–¥–∞—á"]),
        ("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", view_df["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"]),
        ("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", view_df["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"]),
        ("–ó–∞—Å—Ç—Ä—è–ª–∏", view_df["–ó–∞—Å—Ç—Ä—è–ª–∞"]),
        ("–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ", view_df["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"]),
    ]
    for (title, mask), holder in zip(lists, cols):
        with holder:
            st.markdown(f"<div class='card'><div class='title'>{title}</div>", unsafe_allow_html=True)
            st.dataframe(
                view_df[mask][["ID —Å–¥–µ–ª–∫–∏","–ù–∞–∑–≤–∞–Ω–∏–µ","–ú–µ–Ω–µ–¥–∂–µ—Ä","–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞","–°—É–º–º–∞","–ó–¥–æ—Ä–æ–≤—å–µ","–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]].head(80),
                height=260, use_container_width=True
            )
            st.markdown("</div>", unsafe_allow_html=True)

# --- –ú–ï–ù–ï–î–ñ–ï–†–´ ---
with tab_managers:
    st.markdown("##### –ö–≤–∞–¥—Ä–∞–Ω—Ç: –∑–¥–æ—Ä–æ–≤—å–µ √ó –±–µ–∑ –∑–∞–¥–∞—á (—Ä–∞–∑–º–µ—Ä ‚Äî —Å—É–º–º–∞)")
    if px:
        quad = view_df.groupby("–ú–µ–Ω–µ–¥–∂–µ—Ä").agg(
            health_avg=("–ó–¥–æ—Ä–æ–≤—å–µ","mean"),
            no_tasks=("–ù–µ—Ç –∑–∞–¥–∞—á","sum"),
            opp_sum=("–°—É–º–º–∞","sum"),
            deals=("ID —Å–¥–µ–ª–∫–∏","count")
        ).reset_index()
        fig_q = px.scatter(quad, x="health_avg", y="no_tasks", size="opp_sum",
                           hover_data=["deals","–ú–µ–Ω–µ–¥–∂–µ—Ä"], color="health_avg",
                           color_continuous_scale=["#ffe8d6","#ff7a00","#111111"])
        fig_q.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=420)
        st.plotly_chart(fig_q, use_container_width=True, key="chart_mgr_quad")

    st.markdown("##### –†–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é")
    if px:
        rating = view_df.groupby("–ú–µ–Ω–µ–¥–∂–µ—Ä").agg(health_avg=("–ó–¥–æ—Ä–æ–≤—å–µ","mean"), deals=("ID —Å–¥–µ–ª–∫–∏","count")).reset_index()
        rating = rating.sort_values("health_avg", ascending=True)
        fig_r = px.bar(rating, x="health_avg", y="–ú–µ–Ω–µ–¥–∂–µ—Ä", orientation="h", text="deals",
                       color="health_avg", color_continuous_scale=["#ffe8d6","#ff7a00"])
        fig_r.update_traces(texttemplate="—Å–¥–µ–ª–æ–∫: %{text}", textposition="outside", cliponaxis=False)
        fig_r.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=520)
        st.plotly_chart(fig_r, use_container_width=True, key="chart_mgr_rating")

    st.markdown("##### –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º (–ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ –≤–æ—Ä–æ–Ω–∫–∞–º)")
    conv_data = compute_conversion_by_manager_and_funnel(view_df, sort_map)
    for idx, row in conv_data.iterrows():
        with st.expander(f"üë§ {row['–ú–µ–Ω–µ–¥–∂–µ—Ä']} | {row['–í–æ—Ä–æ–Ω–∫–∞']} ({row['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫']} —Å–¥–µ–ª–æ–∫)"):
            stage_df = pd.DataFrame(row['–≠—Ç–∞–ø—ã'])
            # –∑–∞–º–µ–Ω–∏—Ç—å ID —ç—Ç–∞–ø–∞ –Ω–∞ –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            stage_df["–≠—Ç–∞–ø"] = stage_df["–≠—Ç–∞–ø"].map(lambda s: name_map.get(str(s), str(s)))
            st.dataframe(stage_df, use_container_width=True)
            if px and not stage_df.empty:
                fig_f = px.funnel(stage_df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–≠—Ç–∞–ø", title="–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏")
                st.plotly_chart(fig_f, use_container_width=True, key=f"chart_conv_funnel_{idx}")

# --- –ö–ê–†–¢–û–ß–ö–ò ---
with tab_cards:
    st.markdown("##### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ —Å–ª–∞–±—ã–µ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é)")
    pick = view_df.sort_values(["–ó–¥–æ—Ä–æ–≤—å–µ","–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª","–°—É–º–º–∞"], ascending=[True,False,False]).head(30)
    cols = st.columns(3, gap="medium")
    for i, (_, row) in enumerate(pick.iterrows()):
        with cols[i % 3]:
            badge_cls = "bad" if row["–ó–¥–æ—Ä–æ–≤—å–µ"] < 60 else ("good" if row["–ó–¥–æ—Ä–æ–≤—å–µ"]>=80 else "warn")
            risks_list = [name for name,flag in {
                "–±–µ–∑ –∑–∞–¥–∞—á": row["–ù–µ—Ç –∑–∞–¥–∞—á"], "–±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": row["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"],
                "–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": row["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"], "–∑–∞—Å—Ç—Ä—è–ª–∞": row["–ó–∞—Å—Ç—Ä—è–ª–∞"]
            }.items() if flag]
            steps = []
            if row["–ù–µ—Ç –∑–∞–¥–∞—á"]: steps.append("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–æ–∫–æ–º.")
            if row["–ó–∞—Å—Ç—Ä—è–ª–∞"]:  steps.append("–°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ø.")
            if row["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]<40 and row["–°—É–º–º–∞"]>0: steps.append("–£—Ç–æ—á–Ω–∏—Ç—å –±—é–¥–∂–µ—Ç/—Å—Ä–æ–∫/–õ–ü–† –∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.")
            if not steps: steps.append("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ –¥–∞—Ç—É.")
            st.markdown(f"""
            <div class="card">
              <div class="title">{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}</div>
              <div class="subtle">ID {row['ID —Å–¥–µ–ª–∫–∏']} ‚Ä¢ {row['–ú–µ–Ω–µ–¥–∂–µ—Ä']}</div>
              <hr/>
              <span class="badge {badge_cls}">–ó–¥–æ—Ä–æ–≤—å–µ: <b>{int(row['–ó–¥–æ—Ä–æ–≤—å–µ'])}%</b></span>
              <span class="badge">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: <b>{int(row['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª'])}%</b></span>
              <span class="badge">–°—É–º–º–∞: <b>{int(row['–°—É–º–º–∞']):,} ‚ÇΩ</b></span>
              <span class="badge">–≠—Ç–∞–ø: <b>{row['–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞']}</b></span>
              <span class="badge">–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <b>{row['–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏']} –¥–Ω</b></span>
              <hr/>
              <div class="subtle">‚ö†Ô∏è –†–∏—Å–∫–∏: {", ".join(risks_list) or "–Ω–µ—Ç"}</div>
              <div class="subtle">‚úÖ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:<br/>‚Ä¢ {"<br/>‚Ä¢ ".join(steps)}</div>
            </div>
            """, unsafe_allow_html=True)

# --- –û–¢–ß–Å–¢ –ü–û –°–î–ï–õ–ö–ï ---
with tab_deal:
    st.markdown("##### –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ")
    options = view_df.sort_values("–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", ascending=False)
    if options.empty:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        st.stop()
    label_map = {int(r.ID): f"[{int(r.ID)}] {r.–ù–∞–∑–≤–∞–Ω–∏–µ} ‚Äî {r.–ú–µ–Ω–µ–¥–∂–µ—Ä}" for r in options[["ID —Å–¥–µ–ª–∫–∏","–ù–∞–∑–≤–∞–Ω–∏–µ","–ú–µ–Ω–µ–¥–∂–µ—Ä"]].rename(columns={"ID —Å–¥–µ–ª–∫–∏":"ID"}).itertuples(index=False)}
    chosen_id = st.selectbox("–°–¥–µ–ª–∫–∞", list(label_map.keys()), format_func=lambda x: label_map[x])
    deal = view_df[view_df["ID —Å–¥–µ–ª–∫–∏"]==chosen_id].iloc[0]

    a,b,c,d = st.columns(4)
    with a:
        st.markdown(f"<div class='title'>{deal['–ù–∞–∑–≤–∞–Ω–∏–µ']}</div>", unsafe_allow_html=True)
        st.caption(f"–ö–æ–º–ø–∞–Ω–∏—è: –ë–£–†–ú–ê–® ‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {deal['–ú–µ–Ω–µ–¥–∂–µ—Ä']} ‚Ä¢ –≠—Ç–∞–ø: {deal['–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞']}")
    with b: st.markdown(f"<div class='score'>{int(deal['–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª'])}</div><div class='kpi-caption'>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</div>", unsafe_allow_html=True)
    with c: st.markdown(f"<div class='score'>{int(deal['–ó–¥–æ—Ä–æ–≤—å–µ'])}</div><div class='kpi-caption'>–ó–¥–æ—Ä–æ–≤—å–µ</div>", unsafe_allow_html=True)
    with d: st.markdown(f"<div class='kpi'>{int(deal['–°—É–º–º–∞'])}</div><div class='kpi-caption'>–°—É–º–º–∞, ‚ÇΩ</div>", unsafe_allow_html=True)

    left, right = st.columns(2, gap="large")
    with left:
        st.markdown("<div class='title'>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</div>", unsafe_allow_html=True)
        st.markdown(f"""
        <div class="grid2">
          <div class="card"><div class="title">–°—É–º–º–∞</div><div class="kpi">{int(deal['–°—É–º–º–∞'])}</div><div class="kpi-caption">–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {int(deal['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'])}%</div></div>
          <div class="card"><div class="title">–°—Ä–æ–∫–∏</div><div class="kpi">{int(deal['–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ'])}</div><div class="kpi-caption">–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {int(deal['–î–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'])} –¥–Ω</div></div>
        </div>
        """, unsafe_allow_html=True)

        fin = ("–ë—é–¥–∂–µ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Å—É–º–º–∞ –≤ —Å–¥–µ–ª–∫–µ = 0." if deal["–°—É–º–º–∞"]<=0
               else ("–ë—é–¥–∂–µ—Ç –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –õ–ü–† –∏ –ö–ü."
                     if deal["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]<40 else
                     "–ë—é–¥–∂–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π."))
        lpr = "–ö–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å" if not deal["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"] else "–õ–ü–† –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –§–ò–û –∏ —Ä–æ–ª—å."
        need = "–ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω; —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏ —Å—Ä–æ–∫–∏." if deal["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]>=30 else "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        timebox = ("–ù–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–∞." if deal["–ù–µ—Ç –∑–∞–¥–∞—á"]
                   else ("–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∞–ø." if deal["–ó–∞—Å—Ç—Ä—è–ª–∞"]
                         else "–°—Ä–æ–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è –∑–∞–¥–∞—á–∞–º–∏."))
        main_task = "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ö–ü" if deal["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"]<50 else "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä/—Å—á—ë—Ç"

        st.markdown(f"""
        <div class="grid2">
          <div class="card"><div class="title">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</div><div class="subtle">{fin}</div></div>
          <div class="card"><div class="title">–ü–æ–ª–Ω–æ–º–æ—á–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è</div><div class="subtle">{lpr}</div></div>
        </div>
        <div class="grid2">
          <div class="card"><div class="title">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ –Ω–∞—à —Ñ–æ–∫—É—Å</div><div class="subtle">{need}</div></div>
          <div class="card"><div class="title">–°—Ä–æ–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</div><div class="subtle">{timebox}</div></div>
        </div>
        <div class="card"><div class="title">–ó–∞–¥–∞—á–∞</div><div class="subtle">–ú–µ–Ω–µ–¥–∂–µ—Ä—É: {main_task}.</div></div>
        """, unsafe_allow_html=True)

    with right:
        st.markdown("<div class='title'>–ò—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã</div>", unsafe_allow_html=True)
        risks_list = [name for name,flag in {
            "–±–µ–∑ –∑–∞–¥–∞—á": deal["–ù–µ—Ç –∑–∞–¥–∞—á"], "–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": deal["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"],
            "–±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": deal["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"], "–∑–∞—Å—Ç—Ä—è–ª–∞": deal["–ó–∞—Å—Ç—Ä—è–ª–∞"]
        }.items() if flag]
        st.markdown(f"""
        <div class="card"><div class="title">–ò—Ç–æ–≥</div>
        <div class="subtle">–≠—Ç–∞–ø: {deal['–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞'] or '‚Äî'}. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {str(deal['–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'])[:19]}.<br/>
        –†–∏—Å–∫–∏: {", ".join(risks_list) if risks_list else "—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"}.</div></div>
        """, unsafe_allow_html=True)

# --- –ü–õ–ê–ù/–§–ê–ö–¢ ---
with tab_plan:
    st.subheader("–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ")
    yearly_target = st.number_input("–¶–µ–ª—å –Ω–∞ –≥–æ–¥, ‚ÇΩ", min_value=0, value=10_000_000, step=100_000, format="%d")
    start_month = st.selectbox("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Å—è—Ü –æ—Ç—á—ë—Ç–∞", list(range(1,13)), index=datetime.now().month-1)

    df_year = view_df.copy()
    df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"] = pd.to_datetime(df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])
    df_year = df_year[df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.year == datetime.now().year]
    df_year["–ú–µ—Å—è—Ü"] = df_year["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"].dt.month

    actual = df_year.groupby("–ú–µ—Å—è—Ü")["–°—É–º–º–∞"].sum().reindex(range(1,12+1), fill_value=0)
    months = list(range(start_month, start_month+12))
    months = [((m-1)%12)+1 for m in months]

    current_month = datetime.now().month
    months_left = [m for m in months if m >= current_month]
    revenue_to_go = yearly_target - actual.sum()
    monthly_plan = {m: max(0, revenue_to_go/len(months_left)) for m in months_left} if months_left else {}

    plan_df = pd.DataFrame({
        "–ú–µ—Å—è—Ü": months,
        "–§–∞–∫—Ç, ‚ÇΩ": [actual.get(m,0) for m in months],
        "–ü–ª–∞–Ω, ‚ÇΩ": [monthly_plan.get(m,0) if m in monthly_plan else None for m in months]
    }).copy()
    plan_df["–ü–ª–∞–Ω, ‚ÇΩ"] = plan_df["–ü–ª–∞–Ω, ‚ÇΩ"].ffill().bfill()

    if px:
        fig_plan = px.area(
            plan_df, x="–ú–µ—Å—è—Ü", y=["–§–∞–∫—Ç, ‚ÇΩ","–ü–ª–∞–Ω, ‚ÇΩ"],
            labels={"value":"–°—É–º–º–∞, ‚ÇΩ","–ú–µ—Å—è—Ü":"–ú–µ—Å—è—Ü"},
            title="–§–∞–∫—Ç vs –ü–ª–∞–Ω –ø–æ –º–µ—Å—è—Ü–∞–º",
            color_discrete_map={"–§–∞–∫—Ç, ‚ÇΩ":"#111111","–ü–ª–∞–Ω, ‚ÇΩ":"#ff7a00"}
        )
        st.plotly_chart(fig_plan, use_container_width=True, key="chart_year_plan")

    st.dataframe(
        plan_df.assign(**{"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, ‚ÇΩ": plan_df["–§–∞–∫—Ç, ‚ÇΩ"] - plan_df["–ü–ª–∞–Ω, ‚ÇΩ"]}).round(0),
        use_container_width=True
    )

# --- AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
with tab_ai:
    st.subheader("ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
    if not PERPLEXITY_API_KEY:
        st.info("PERPLEXITY_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        for mgr in selected_managers:
            mg = view_df[view_df["–ú–µ–Ω–µ–¥–∂–µ—Ä"]==mgr]
            if mg.empty: continue
            summary = {
                "total_deals": int(len(mg)),
                "revenue": int(mg["–°—É–º–º–∞"].sum()),
                "avg_health": float(mg["–ó–¥–æ—Ä–æ–≤—å–µ"].mean()),
                "no_tasks": int(mg["–ù–µ—Ç –∑–∞–¥–∞—á"].sum()),
                "no_company": int(mg["–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏"].sum()),
                "no_contact": int(mg["–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"].sum()),
                "stuck": int(mg["–ó–∞—Å—Ç—Ä—è–ª–∞"].sum()),
                "lost": int(mg["–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞"].sum()),
                "won": int(len(mg[mg["–≠—Ç–∞–ø ID"].astype(str).str.contains("WON", case=False)]))
            }
            with st.expander(f"üë§ {mgr} ({summary['total_deals']} —Å–¥–µ–ª–æ–∫)"):
                # –ª—ë–≥–∫–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è ¬´AI-–∑–∞–≥–ª—É—à–∫–∞¬ª, –µ—Å–ª–∏ —Å–µ—Ç—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
                try:
                    import json
                    data = {
                        "model": "sonar-pro",
                        "messages": [
                            {"role":"system","content":"–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ."},
                            {"role":"user","content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π KPI –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {mgr}. –î–∞–Ω–Ω—ã–µ: {summary}. –î–∞–π 3 –±–ª–æ–∫–∞: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–æ–±–ª–µ–º—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."}
                        ],
                        "max_tokens": 600, "temperature": 0.3
                    }
                    resp = requests.post(
                        "https://api.perplexity.ai/chat/completions",
                        headers={"Authorization": f"Bearer {PERPLEXITY_API_KEY}"},
                        json=data, timeout=30
                    )
                    txt = resp.json()["choices"][0]["message"]["content"]
                except Exception as e:
                    txt = f"_AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}_"
                st.markdown(txt)

st.markdown("---")
st.caption("–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ v4.3")
