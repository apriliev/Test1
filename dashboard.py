import streamlit as st
import streamlit_authenticator as stauth
from analyzer import SimpleAnalyzer
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="CRM-–¥—ç—à–±–æ—Ä–¥ | Bitrix24 + Perplexity", page_icon="ü§ñ", layout="wide")

# ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====
credentials = {
    "usernames": {
        "admin": {
            "name": "Admin",
            "password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW"  # –ø–∞—Ä–æ–ª—å: admin123
        }
    }
}

authenticator = stauth.Authenticate(
    credentials,
    "crm_dashboard_cookie",
    "abcdef_random_key",
    cookie_expiry_days=7
)

name, authentication_status, username = authenticator.login("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", "main")

if authentication_status == False:
    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    st.stop()
elif authentication_status == None:
    st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
    st.stop()

# ===== –ì–õ–ê–í–ù–´–ô –î–≠–®–ë–û–†–î =====
st.title("ü§ñ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ CRM | Bitrix24 + Perplexity")
st.sidebar.success(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {name}")
authenticator.logout("–í—ã–π—Ç–∏", "sidebar")

@st.cache_resource
def load_analyzer():
    return SimpleAnalyzer()

analyzer = load_analyzer()

st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
date_from = st.sidebar.date_input("C –∫–∞–∫–æ–π –¥–∞—Ç—ã?", pd.Timestamp.today() - pd.Timedelta(days=30))
date_to = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É?", pd.Timestamp.today())

with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å–¥–µ–ª–∫–∏ —Å Bitrix24..."):
    deals = analyzer.get_deals(
        date_from=str(date_from),
        date_to=str(date_to),
        limit=50
    )

if not deals:
    st.warning("–í –ë–∏—Ç—Ä–∏–∫—Å24 –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    st.stop()

df = pd.DataFrame(deals)
df['OPPORTUNITY'] = pd.to_numeric(df['OPPORTUNITY'], errors='coerce').fillna(0)
df['DATE_CREATE'] = pd.to_datetime(df['DATE_CREATE'], errors='coerce')
df['DATE_MODIFY'] = pd.to_datetime(df['DATE_MODIFY'], errors='coerce')

col1, col2, col3, col4 = st.columns(4)
col1.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", len(df))
col2.metric("–û–±—â–∏–π –æ–±—ä—ë–º, ‚ÇΩ", f"{int(df['OPPORTUNITY'].sum()):,}")
col3.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", f"{int(df['OPPORTUNITY'].mean()):,}")
col4.metric("–û–±–Ω–æ–≤–ª–µ–Ω–æ", str(df['DATE_MODIFY'].max())[:19])

st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º")
fig = px.bar(
    df.groupby('STAGE_ID').agg({'OPPORTUNITY': 'sum', 'ID': 'count'}).reset_index(),
    x='STAGE_ID', y='OPPORTUNITY', text='ID',
    labels={'STAGE_ID': "–≠—Ç–∞–ø", "OPPORTUNITY": "–°—É–º–º–∞, ‚ÇΩ", "ID": "–°–¥–µ–ª–æ–∫"}
)
st.plotly_chart(fig, use_container_width=True)

st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫")
st.dataframe(
    df[['ID', 'TITLE', 'STAGE_ID', 'OPPORTUNITY', 'DATE_CREATE', 'DATE_MODIFY']]
    .sort_values("DATE_CREATE", ascending=False),
    height=300
)

st.subheader("ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Perplexity")
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
    with st.spinner("AI –¥—É–º–∞–µ—Ç..."):
        result = analyzer.run_ai_analysis(deals)
        st.success(f"üíØ –û—Ü–µ–Ω–∫–∞: **{result.get('health_score', 'N/A')}%**")
        st.info(result.get("summary", ""))
        st.markdown("**üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
        for rec in result.get("recommendations", []):
            st.write(f"‚úÖ {rec}")
