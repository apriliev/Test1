# -*- coding: utf-8 -*-
import os
import json
import time
import hashlib
from datetime import datetime, timedelta

import requests
import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –°–¢–ò–õ–ò
# =========================
st.set_page_config(page_title="RUBI-like CRM –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", page_icon="üßä", layout="wide")

CUSTOM_CSS = """
<style>
/* –ë—Ä–µ–Ω–¥–∏–Ω–≥ –≤ —Å—Ç–∏–ª–µ RUBI */
:root { --rubi-accent:#6C5CE7; --rubi-red:#ff4d4f; --rubi-green:#22c55e; --rubi-yellow:#f59e0b; }
.block-container { padding-top: 1.2rem; padding-bottom: 2rem; }
.rubi-card { border-radius:18px; padding:18px 18px 12px; background:#111418; border:1px solid #222; box-shadow:0 4px 18px rgba(0,0,0,.25); }
.rubi-title { font-weight:700; font-size:18px; margin-bottom:6px; }
.rubi-chip { display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; border:1px solid #2a2f36; background:#0e1216; font-size:12px; }
.rubi-good { color: var(--rubi-green) !important; }
.rubi-bad  { color: var(--rubi-red) !important; }
.metric-row .stMetric { background:#0f1318; border:1px solid #262b33; border-radius:16px; padding:10px 12px; }
div[data-testid="stMetricValue"] { font-size:22px !important; }
.small { opacity:.8; font-size:12px; }
h1,h2,h3 { letter-spacing:.2px }
hr { border: 0; border-top:1px solid #222; margin: 12px 0 6px }
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# =========================
# –ü–†–û–°–¢–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
# =========================
def check_password():
    def password_entered():
        ok_user = st.session_state.get("username") in {"admin"}
        ok_pass = hashlib.sha256(st.session_state.get("password","").encode()).hexdigest() \
                  == "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9"
        st.session_state["password_correct"] = bool(ok_user and ok_pass)
        st.session_state.pop("password", None)

    if "password_correct" not in st.session_state or not st.session_state["password_correct"]:
        st.markdown("### üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.text_input("–õ–æ–≥–∏–Ω", key="username")
        st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="password", on_change=password_entered)
        st.stop()

check_password()
with st.sidebar:
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state["password_correct"] = False
        st.experimental_rerun()

# =========================
# –°–ï–ö–†–ï–¢–´
# =========================
BITRIX24_WEBHOOK = os.getenv("BITRIX24_WEBHOOK")
PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")
PERPLEXITY_API_URL = "https://api.perplexity.ai/chat/completions"

if not BITRIX24_WEBHOOK:
    st.error("‚ùå –£–∫–∞–∂–∏ BITRIX24_WEBHOOK –≤ Secrets/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    st.stop()

# =========================
# –•–ï–õ–ü–ï–†–´ –î–õ–Ø API
# =========================
def bx_get(method, params=None, pause=0.4):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET –∫ Bitrix —Å –∞–≤—Ç–æ-–ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 50"""
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        r = requests.get(url, params=params, timeout=30)
        data = r.json()
        res = data.get("result")
        if isinstance(res, dict) and "items" in res:  # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–¥–∞—é—Ç items
            batch = res.get("items", [])
        else:
            batch = res or []
        if not batch:
            break
        out.extend(batch)
        if len(batch) < 50:
            break
        start += 50
        time.sleep(pause)
    return out

@st.cache_data(show_spinner=False, ttl=300)
def get_deals(date_from=None, date_to=None, limit=1000):
    filt = {}
    if date_from: filt["filter[>=DATE_CREATE]"] = date_from
    if date_to:   filt["filter[<=DATE_CREATE]"] = date_to
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID",
        "COMPANY_ID","CONTACT_ID","PROBABILITY",
        "DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"
    ], **filt}
    deals = bx_get("crm.deal.list", params)
    deals = deals[:limit]
    return deals

@st.cache_data(show_spinner=False, ttl=300)
def get_users():
    users = bx_get("user.get", {})
    return {int(u["ID"]): (u.get("NAME","")+ " " + u.get("LAST_NAME","")).strip() or u.get("LOGIN", "") for u in users}

@st.cache_data(show_spinner=False, ttl=300)
def get_open_activities_for_deal_ids(deal_ids):
    """–û—Ç–∫—Ä—ã—Ç—ã–µ –∞–∫—Ç–∏–≤–∏—Ç–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º: 0 = –Ω–µ—Ç –∑–∞–¥–∞—á ‚Üí '–±–µ–∑ –∑–∞–¥–∞—á'"""
    out = {}
    if not deal_ids: return out
    for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
        params = {
            "filter[OWNER_TYPE_ID]": 2,  # 2 = Deal
            "filter[OWNER_ID]": ",".join(map(str, chunk)),
            "filter[COMPLETED]": "N"
        }
        acts = bx_get("crm.activity.list", params)
        for a in acts:
            k = int(a["OWNER_ID"])
            out.setdefault(k, []).append(a)
    return out

# =========================
# –õ–û–ì–ò–ö–ê –û–¶–ï–ù–û–ö
# =========================
def to_dt(x):
    try:
        return pd.to_datetime(x)
    except:
        return pd.NaT

def compute_health_scores(df, open_tasks_map, stuck_days=5):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ/–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª/—Ñ–ª–∞–≥–∏ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏"""
    now = pd.Timestamp.utcnow()
    records = []
    for _, r in df.iterrows():
        last = to_dt(r["LAST_ACTIVITY_TIME"]) or to_dt(r["DATE_MODIFY"]) or to_dt(r["DATE_CREATE"])
        days_in_work = max(0, (now - to_dt(r["DATE_CREATE"])).days if pd.notna(to_dt(r["DATE_CREATE"])) else 0)
        days_no_activity = (now - (last if pd.notna(last) else now)).days
        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0

        flags = {
            "no_company": int(r.get("COMPANY_ID") or 0) == 0,
            "no_contact": int(r.get("CONTACT_ID") or 0) == 0,
            "no_tasks": not has_task,
            "stuck": days_no_activity >= stuck_days,
            "lost": isinstance(r.get("STAGE_ID"), str) and ("LOSE" in r["STAGE_ID"] or "LOSE" in r["STAGE_ID"].upper())
        }

        # –ü—Ä–∞–≤–∏–ª–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ (–ø—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–µ)
        score = 100
        if flags["no_company"]: score -= 10
        if flags["no_contact"]: score -= 10
        if flags["no_tasks"]:   score -= 25
        if flags["stuck"]:      score -= 25
        if flags["lost"]:       score = min(score, 15)

        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª = –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ä—ë–º –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        opp = float(r.get("OPPORTUNITY") or 0)
        prob = float(r.get("PROBABILITY") or 0)
        potential = min(100, int((opp > 0) * (30 + min(70, np.log10(max(1, opp))/5 * 70)) * (0.4 + prob/100*0.6)))

        records.append({
            "ID": int(r["ID"]),
            "TITLE": r["TITLE"],
            "ASSIGNED_BY_ID": int(r.get("ASSIGNED_BY_ID") or 0),
            "STAGE_ID": r.get("STAGE_ID",""),
            "OPPORTUNITY": opp,
            "PROBABILITY": prob,
            "DATE_CREATE": to_dt(r["DATE_CREATE"]),
            "DATE_MODIFY": to_dt(r["DATE_MODIFY"]),
            "LAST_ACTIVITY_TIME": last,
            "days_in_work": days_in_work,
            "days_no_activity": days_no_activity,
            "health": max(0, min(100, int(score))),
            "potential": max(0, min(100, int(potential))),
            **{f"flag_{k}": v for k, v in flags.items()}
        })
    return pd.DataFrame(records)

def split_green_red(manager_df):
    """–ó–µ–ª—ë–Ω–∞—è/–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å"""
    g = manager_df.copy()
    # –ë–æ–ª—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è, –º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º ‚Äî –ª—É—á—à–µ
    g["problem_index"] = (
        g["flag_no_tasks"].sum(level=0) if isinstance(g.index, pd.MultiIndex) else 0
    )
    g["score"] = (
        g["health"].mean(level=0) if isinstance(g.index, pd.MultiIndex) else 0
    )
    # –£–ø—Ä–æ—Å—Ç–∏–º:
    grp = g.groupby("ASSIGNED_BY_ID").agg(
        deals=("ID","count"),
        health_avg=("health","mean"),
        potential_sum=("potential","sum"),
        opp_sum=("OPPORTUNITY","sum"),
        no_tasks=("flag_no_tasks","sum"),
        stuck=("flag_stuck","sum"),
        lost=("flag_lost","sum"),
    ).reset_index()
    grp["zone"] = np.where((grp["health_avg"]>=70) & (grp["no_tasks"]<=2) & (grp["stuck"]<=2), "green", "red")
    return grp

# =========================
# –§–£–ù–ö–¶–ò–ò AI-–†–ï–ó–Æ–ú–ï
# =========================
def ai_sumarize(company_name, df_summary, df_managers, examples=4):
    if not PERPLEXITY_API_KEY:  # —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ò–ò, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        return "AI-—Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –Ω–µ—Ç PERPLEXITY_API_KEY.", []

    sample_deals = df_summary.head(examples)[[
        "ID","TITLE","health","potential","OPPORTUNITY","days_in_work",
        "flag_no_tasks","flag_stuck","flag_no_company","flag_no_contact","flag_lost"
    ]].to_dict(orient="records")

    payload = {
        "model": "sonar-pro",
        "messages": [
            {"role":"system","content":"–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON —Å –∫–ª—é—á–∞–º–∏: summary (—Å—Ç—Ä–æ–∫–∞), actions (—Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—É–Ω–∫—Ç–æ–≤)."},
            {"role":"user","content": json.dumps({
                "company": company_name,
                "kpi_summary": df_managers.describe(include="all").to_dict(),
                "sample_deals": sample_deals
            }, ensure_ascii=False)}
        ],
        "temperature": 0.1,
        "max_tokens": 800
    }
    r = requests.post(PERPLEXITY_API_URL, headers={"Authorization":f"Bearer {PERPLEXITY_API_KEY}"}, json=payload, timeout=60)
    txt = r.json().get("choices",[{}])[0].get("message",{}).get("content","")
    i,j = txt.find("{"), txt.rfind("}")+1
    try:
        data = json.loads(txt[i:j])
        return data.get("summary",""), data.get("actions",[])
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å AI-—Ä–µ–∑—é–º–µ.", []

# =========================
# –§–ò–õ–¨–¢–†–´
# =========================
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
company_alias = st.sidebar.text_input("–ö–æ–º–ø–∞–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—á—ë—Ç–∞)", "–û–û–û ¬´–§–æ–∫—É—Å¬ª")
date_from = st.sidebar.date_input("–° –∫–∞–∫–æ–π –¥–∞—Ç—ã", datetime.now().date() - timedelta(days=30))
date_to   = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É", datetime.now().date())
stuck_days = st.sidebar.slider("–°—á–∏—Ç–∞—Ç—å ¬´–∑–∞—Å—Ç—Ä—è–ª–∞¬ª, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω–µ–π", 2, 21, 5)
limit = st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏", 50, 3000, 600, step=50)

# =========================
# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# =========================
with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é —Å–¥–µ–ª–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix24‚Ä¶"):
    deals_raw = get_deals(str(date_from), str(date_to), limit=limit)
    if not deals_raw:
        st.warning("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        st.stop()

    df = pd.DataFrame(deals_raw)
    df["OPPORTUNITY"] = pd.to_numeric(df["OPPORTUNITY"], errors="coerce").fillna(0.0)
    users_map = get_users()
    open_tasks_map = get_open_activities_for_deal_ids(df["ID"].tolist())
    df_scores = compute_health_scores(df, open_tasks_map, stuck_days=stuck_days)
    df_scores["manager"] = df_scores["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    mgr = split_green_red(df_scores)

st.title("RUBI-style –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")
st.caption("–ê–≤—Ç–æ–∞—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏ ‚Ä¢ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫ ‚Ä¢ –ó–µ–ª—ë–Ω–∞—è/–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω—ã ‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")

# =========================
# –í–ï–†–•–ù–ò–ï –ú–ï–¢–†–ò–ö–ò
# =========================
col1,col2,col3,col4,col5 = st.columns(5, gap="small")
with col1: st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", int(df_scores.shape[0]))
with col2: st.metric("–û–±—ä—ë–º, ‚ÇΩ", f"{int(df_scores['OPPORTUNITY'].sum()):,}".replace(","," "))
with col3: st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", f"{int(df_scores['OPPORTUNITY'].replace(0,np.nan).mean() or 0):,}".replace(","," "))
with col4: st.metric("–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ", f"{df_scores['health'].mean():.0f}%")
with col5: st.metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—Å—É–º–º–∞)", int(df_scores["potential"].sum()))

# =========================
# –í–ö–õ–ê–î–ö–ò
# =========================
tab_pulse, tab_audit, tab_managers, tab_cards, tab_export = st.tabs([
    "‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫", "üöÅ –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏", "üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–ü", "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–æ–∫", "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç"
])

# --- –ü–£–õ–¨–°
with tab_pulse:
    c1,c2 = st.columns([3,2], gap="large")
    with c1:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º")
        fig = px.bar(
            df_scores.groupby("STAGE_ID").agg(–°—É–º–º–∞=("OPPORTUNITY","sum"), –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID","count")).reset_index(),
            x="STAGE_ID", y="–°—É–º–º–∞", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
        st.plotly_chart(fig, use_container_width=True)
    with c2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è")
        fig2 = px.histogram(df_scores, x="health", nbins=20)
        st.plotly_chart(fig2, use_container_width=True)

    st.subheader("–õ–µ–Ω—Ç–∞ —Å–¥–µ–ª–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
    st.dataframe(
        df_scores.sort_values("DATE_MODIFY", ascending=False)[
            ["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","health","potential","DATE_MODIFY"]
        ].head(200),
        height=360
    )

# --- –ê–£–î–ò–¢
with tab_audit:
    st.subheader("–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã")
    kpis = {
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á": int((~df_scores["ID"].isin(open_tasks_map.keys())).sum()),
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": int(df_scores["flag_no_contact"].sum()),
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π": int(df_scores["flag_no_company"].sum()),
        "–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏": int(df_scores["flag_stuck"].sum()),
        "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏": int(df_scores["flag_lost"].sum()),
    }
    a,b,c,d,e = st.columns(5)
    a.metric("–ë–µ–∑ –∑–∞–¥–∞—á", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á"])
    b.metric("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    c.metric("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π"])
    d.metric("–ó–∞—Å—Ç—Ä—è–ª–∏", kpis["–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏"])
    e.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", kpis["–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏"])

    st.markdown("##### –°–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    cols = st.columns(5, gap="small")
    lists = [
        ("–ë–µ–∑ –∑–∞–¥–∞—á", ~df_scores["ID"].isin(open_tasks_map.keys())),
        ("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", df_scores["flag_no_contact"]),
        ("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", df_scores["flag_no_company"]),
        ("–ó–∞—Å—Ç—Ä—è–ª–∏", df_scores["flag_stuck"]),
        ("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", df_scores["flag_lost"]),
    ]
    for (title, mask), holder in zip(lists, cols):
        with holder:
            st.markdown(f'<div class="rubi-card"><div class="rubi-title">{title}</div>', unsafe_allow_html=True)
            st.dataframe(df_scores[mask][["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","health","days_no_activity"]].head(50), height=280)
            st.markdown("</div>", unsafe_allow_html=True)

# --- –ú–ï–ù–ï–î–ñ–ï–†–´
with tab_managers:
    st.subheader("–ó–µ–ª—ë–Ω–∞—è / –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
    mgr["manager"] = mgr["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    left, right = st.columns([1.4,1], gap="large")

    with left:
        fig = px.scatter(
            mgr, x="health_avg", y="no_tasks", size="opp_sum", color="zone",
            hover_data=["manager","deals","stuck","lost","potential_sum"],
            labels={"health_avg":"–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ","no_tasks":"–ë–µ–∑ –∑–∞–¥–∞—á (—à—Ç)"}
        )
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("**–¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**")
        st.dataframe(
            mgr[["manager","deals","opp_sum","health_avg","no_tasks","stuck","lost","zone"]].sort_values(["zone","health_avg"], ascending=[True,False]),
            height=360
        )

    with right:
        st.markdown("#### –õ–∏–¥–µ—Ä—ã –∏ —Ä–∏—Å–∫–æ–≤—ã–µ")
        top = df_scores.groupby("manager").agg(
            deals=("ID","count"),
            health_avg=("health","mean"),
            opp=("OPPORTUNITY","sum"),
            stuck=("flag_stuck","sum"),
            no_tasks=("flag_no_tasks","sum"),
            lost=("flag_lost","sum"),
        ).reset_index()

        st.markdown("**–ó–µ–ª—ë–Ω–∞—è –∑–æ–Ω–∞**")
        st.dataframe(top.query("health_avg>=70").sort_values("health_avg", ascending=False).head(10), height=180)
        st.markdown("**–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞**")
        st.dataframe(top.query("health_avg<70 or no_tasks>2 or stuck>2").sort_values(["health_avg","no_tasks","stuck"], ascending=[True,False,False]).head(10), height=180)

# --- –ö–ê–†–¢–û–ß–ö–ò –°–î–ï–õ–û–ö
with tab_cards:
    st.subheader("–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—Ü–µ–Ω–∫–æ–π –∏ –ø–ª–∞–Ω–æ–º")
    pick_manager = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", sorted(df_scores["manager"].unique()), default=[])
    pick = df_scores[df_scores["manager"].isin(pick_manager)] if pick_manager else df_scores
    pick = pick.sort_values(["health","potential","OPPORTUNITY"], ascending=[True,False,False]).head(30)

    grid_cols = st.columns(3, gap="medium")
    for i, (_, row) in enumerate(pick.iterrows()):
        with grid_cols[i % 3]:
            status = "rubi-bad" if row["health"] < 60 else ("rubi-good" if row["health"]>=80 else "")
            st.markdown(f"""
            <div class="rubi-card">
              <div class="rubi-title">{row['TITLE']}</div>
              <div class="small">ID {row['ID']} ‚Ä¢ {row['manager']}</div>
              <hr/>
              <div class="rubi-chip {status}">–ó–¥–æ—Ä–æ–≤—å–µ: <b>{row['health']}%</b></div>
              <div class="rubi-chip">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: <b>{row['potential']}%</b></div>
              <div class="rubi-chip">–°—É–º–º–∞: <b>{int(row['OPPORTUNITY']):,} ‚ÇΩ</b></div>
              <div class="rubi-chip">–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ: <b>{row['days_in_work']}</b></div>
              <div class="rubi-chip">–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <b>{row['days_no_activity']} –¥–Ω</b></div>
              <hr/>
              <div class="small">
                ‚ö†Ô∏è –†–∏—Å–∫–∏: {", ".join([k.replace("flag_","").replace("_"," ") for k,v in row.items() if k.startswith("flag_") and v and k not in ["flag_lost"]]) or "–Ω–µ—Ç"}<br/>
                ‚ùå –ü–æ—Ç–µ—Ä—è–Ω–∞: {"–¥–∞" if row["flag_lost"] else "–Ω–µ—Ç"}<br/>
              </div>
            </div>
            """, unsafe_allow_html=True)

# --- –≠–ö–°–ü–û–†–¢
with tab_export:
    st.subheader("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ XLS-–æ—Ç—á—ë—Ç–∞ (–≤ —Å—Ç–∏–ª–µ –†–£–ë–ò)")
    def build_excel_bytes():
        from io import BytesIO
        bio = BytesIO()
        with pd.ExcelWriter(bio, engine="xlsxwriter") as xw:
            # –°–≤–æ–¥–∫–∞
            summary = pd.DataFrame({
                "–ú–µ—Ç—Ä–∏–∫–∞": ["–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫","–û–±—ä—ë–º","–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ","–ó–∞—Å—Ç—Ä—è–ª–∏","–ë–µ–∑ –∑–∞–¥–∞—á","–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤","–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π","–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                    df_scores.shape[0],
                    int(df_scores["OPPORTUNITY"].sum()),
                    f"{df_scores['health'].mean():.0f}%",
                    int(df_scores["flag_stuck"].sum()),
                    int((~df_scores['ID'].isin(open_tasks_map.keys())).sum()),
                    int(df_scores["flag_no_contact"].sum()),
                    int(df_scores["flag_no_company"].sum()),
                    int(df_scores["flag_lost"].sum()),
                ]
            })
            summary.to_excel(xw, sheet_name="01_–°–≤–æ–¥–∫–∞", index=False)

            # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
            mgr_out = mgr[["manager","deals","opp_sum","health_avg","no_tasks","stuck","lost","zone"]]
            mgr_out.to_excel(xw, sheet_name="02_–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", index=False)

            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫
            detail_cols = ["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","PROBABILITY","health","potential","days_in_work","days_no_activity",
                           "flag_no_tasks","flag_no_contact","flag_no_company","flag_stuck","flag_lost","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"]
            df_scores[detail_cols].to_excel(xw, sheet_name="03_–°–¥–µ–ª–∫–∏", index=False)

        bio.seek(0)
        return bio.getvalue()

    xls_bytes = build_excel_bytes()
    st.download_button("–°–∫–∞—á–∞—Ç—å XLS-–æ—Ç—á—ë—Ç", data=xls_bytes, file_name="rubi_like_report.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# =========================
# AI-–ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –ò –ü–õ–ê–ù
# =========================
st.markdown("### üîÆ AI-–†–µ–∑—é–º–µ –∏ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä"):
    with st.spinner("–ì–æ—Ç–æ–≤–ª—é AI-—Ä–µ–∑—é–º–µ –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º‚Ä¶"):
        text, actions = ai_sumarize(company_alias, df_scores, mgr)
    st.info(text or "‚Äî")
    if actions:
        st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–≥–∏:**")
        for a in actions:
            st.write(f"‚Ä¢ {a}")
    else:
        st.caption("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π / –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# =========================
# –ü–û–î–í–ê–õ
# =========================
st.caption("–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ –†–£–ë–ò –ß–ê–¢: –∞–≤—Ç–æ–∞—É–¥–∏—Ç, –ø—É–ª—å—Å —Å–¥–µ–ª–æ–∫, –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∑–æ–Ω—ã, –∫–∞—Ä—Ç–æ—á–∫–∏, —ç–∫—Å–ø–æ—Ä—Ç. –í–µ—Ä—Å–∏—è 1.0")
