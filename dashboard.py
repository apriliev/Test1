# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ (v5.6)
‚Äî –§–∏–∫—Å ValueError –≤ compute_health_scores (NaN –≤ PROBABILITY/OPPORTUNITY).
‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è + –∫–ª–∞–º–ø–∏–Ω–≥.
‚Äî –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º –º–µ—Ç—Ä–∏–∫–∞–º (—Å–æ–∑–¥–∞–Ω–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å).
‚Äî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –æ—Ç–¥–µ–ª—ã/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∞–Ω—Ç–∏—á–∏—Ç-—ç–≤—Ä–∏—Å—Ç–∏–∫–∏.
‚Äî –ë–µ–∑ –≤—ã–≥—Ä—É–∑–æ–∫/—Ñ–∞–π–ª–æ–≤. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: admin / admin123.
"""

import os, time, math, calendar
from datetime import datetime, timedelta, date
import numpy as np
import pandas as pd
import streamlit as st
import requests

try:
    import plotly.express as px
except Exception:
    px = None

# ============ UI ============
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM", page_icon="üüß", layout="wide")
THEME_CSS = """
<style>
:root{ --brand:#ff7a00; --black:#0a0a0a; --border:#e9edf2; --muted:#6b7280; --good:#10b981; --bad:#ef4444; --warn:#f59e0b; }
html,body,[data-testid="stAppViewContainer"]{ background:#ffffff; color:var(--black); }
.block-container{ padding-top:.6rem; padding-bottom:1.2rem; }
.card{ background:#fff; border:1px solid var(--border); border-radius:14px; padding:16px 16px 10px; box-shadow:0 2px 12px rgba(0,0,0,.04); }
.title{ font-weight:700; font-size:18px; margin-bottom:6px; }
.subtle{ color:var(--muted); font-size:12px; }
.badge{ display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; border:1px solid var(--border); background:#fff; font-size:12px; margin-right:6px; margin-bottom:6px;}
.badge.good{ color:var(--good); border-color:rgba(16,185,129,.3); }
.badge.bad{ color:var(--bad); border-color:rgba(239,68,68,.3); }
.badge.warn{ color:var(--warn); border-color:rgba(245,158,11,.3); }
.kpi{ font-weight:800; font-size:28px; line-height:1; }
.kpi-caption{ color:var(--muted); font-size:12px; margin-top:-6px }
.pill{ display:inline-block; padding:8px 12px; border-radius:12px; background:rgba(255,122,0,.08); color:var(--brand); font-weight:800; border:1px solid rgba(255,122,0,.25); }
hr{ border:0; border-top:1px solid var(--border); margin:10px 0 8px }
div[data-testid="stMetricValue"]{ font-size:22px !important; }
.score{ width:64px;height:64px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;background:#fff;border:2px solid var(--border);font-weight:800;font-size:22px;margin-right:10px }
.grid2{ display:grid; grid-template-columns:1fr 1fr; gap:12px; }
.grid3{ display:grid; grid-template-columns:1fr 1fr 1fr; gap:12px; }
.headerbar{ display:flex; align-items:center; gap:16px; margin-bottom:8px; }
.small{ font-size:12px; color:var(--muted); }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# ============ AUTH ============
AUTH_KEY = "burmash_auth_ok"
def require_auth():
    if AUTH_KEY not in st.session_state:
        st.session_state[AUTH_KEY] = False
    if st.session_state[AUTH_KEY]:
        return
    st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
    with st.form("login_form", clear_on_submit=False):
        login = st.text_input("–õ–æ–≥–∏–Ω", value="", key="auth_user")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", value="", type="password", key="auth_pass")
        ok = st.form_submit_button("–í–æ–π—Ç–∏")
    if ok:
        st.session_state[AUTH_KEY] = (login == "admin" and password == "admin123")
        if not st.session_state[AUTH_KEY]:
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        st.rerun()
    st.stop()
require_auth()
with st.sidebar:
    if st.button("–í—ã–π—Ç–∏", key="logout_btn"):
        st.session_state[AUTH_KEY] = False
        st.rerun()

# ============ Secrets ============
def get_secret(name, default=None):
    if name in st.secrets: return st.secrets[name]
    return os.getenv(name, default)
BITRIX24_WEBHOOK   = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
PERPLEXITY_API_KEY = (get_secret("PERPLEXITY_API_KEY", "") or "").strip()

# ============ Bitrix helpers ============
def _bx_call(method, params=None, timeout=30):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    r = requests.get(url, params=(params or {}), timeout=timeout)
    r.raise_for_status()
    data = r.json()
    if "error" in data:
        raise RuntimeError(f"{method}: {data.get('error_description') or data.get('error')}")
    return data

def _bx_get(method, params=None, pause=0.35):
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        data = _bx_call(method, params=params)
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        if not batch: break
        out.extend(batch)
        if len(batch) < 50 and "next" not in data: break
        start = data.get("next", start + 50)
        time.sleep(pause)
    return out

@st.cache_data(ttl=300)
def bx_get_deals_by_date(field_from, field_to, limit=3000):
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID",
        "PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME","CATEGORY_ID",
        "BEGINDATE","CLOSEDATE","STAGE_SEMANTIC_ID"
    ]}
    if field_from: params[f"filter[>={field_from[0]}]"] = str(field_from[1])
    if field_to:   params[f"filter[<={field_to[0]}]"]  = str(field_to[1])
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=300)
def bx_get_deals_dual(start, end, limit=3000):
    created = bx_get_deals_by_date(("DATE_CREATE", start), ("DATE_CREATE", end), limit=limit)
    closed  = bx_get_deals_by_date(("CLOSEDATE",  start), ("CLOSEDATE",  end), limit=limit)
    by_id = {}
    for r in created + closed:
        by_id[int(r["ID"])] = r
    out = [by_id[k] for k in sorted(by_id.keys())][:limit]
    return out

@st.cache_data(ttl=600)
def bx_get_categories():
    try:
        cats = _bx_get("crm.dealcategory.list")
        return {int(c["ID"]): c.get("NAME","–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
    except Exception:
        try:
            cats = _bx_get("crm.category.list")
            return {int(c["ID"]): c.get("NAME","–í–æ—Ä–æ–Ω–∫–∞") for c in cats}
        except Exception:
            return {}

@st.cache_data(ttl=600)
def bx_get_stage_map_by_category(category_ids):
    sort_map, name_map = {}, {}
    if not category_ids:
        return sort_map, name_map
    for cid in sorted(set(int(x) for x in category_ids if pd.notna(x))):
        try:
            stages = _bx_get("crm.dealcategory.stage.list", {"id": cid})
            for s in stages:
                sid = s.get("STATUS_ID") or s.get("ID")
                if not sid: continue
                sort_map[sid] = int(s.get("SORT", 5000))
                name_map[sid] = s.get("NAME") or sid
        except Exception:
            continue
    if not name_map:
        try:
            base = _bx_get("crm.status.list", {"filter[ENTITY_ID]":"DEAL_STAGE"})
            for s in base:
                sid = s.get("STATUS_ID")
                if not sid: continue
                sort_map[sid] = int(s.get("SORT", 5000))
                name_map[sid] = s.get("NAME") or sid
        except Exception:
            pass
    return sort_map, name_map

@st.cache_data(ttl=300)
def bx_get_departments():
    try:
        return _bx_get("department.get", {})
    except:
        return []

@st.cache_data(ttl=300)
def bx_get_users_full():
    users = _bx_get("user.get", {})
    out = {}
    for u in users:
        depts = u.get("UF_DEPARTMENT") or []
        if isinstance(depts, str):
            depts = [int(x) for x in depts.split(",") if x]
        out[int(u["ID"])] = {
            "name": ((u.get("NAME","")+" "+u.get("LAST_NAME","")).strip() or u.get("LOGIN","")).strip(),
            "depts": list(map(int, depts)) if depts else [],
            "active": (u.get("ACTIVE","Y")=="Y")
        }
    return out

@st.cache_data(ttl=600)
def bx_get_activities(deal_ids, include_completed=True):
    out = {}
    if not deal_ids: return out
    states = ["N","Y"] if include_completed else ["N"]
    for state in states:
        for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
            params = {
                "filter[OWNER_TYPE_ID]":2, "filter[OWNER_ID]":",".join(map(str,chunk)),
                "filter[COMPLETED]": state
            }
            try:
                acts = _bx_get("crm.activity.list", params)
            except Exception:
                acts = []
            for a in acts:
                out.setdefault(int(a["OWNER_ID"]), []).append(a)
    return out

@st.cache_data(ttl=300)
def bx_get_stage_history_lite(deal_ids, max_deals=300):
    if not deal_ids: return {}
    hist = {}
    ids = list(map(int, deal_ids))[:max_deals]
    try:
        for did in ids:
            items = _bx_get("crm.stagehistory.deal.list", {"filter[OWNER_ID]": did})
            if items:
                hist[did] = items
    except Exception:
        pass
    try:
        remain = [i for i in ids if i not in hist]
        for did in remain:
            items = _bx_get("crm.stagehistory.list", {"filter[OWNER_TYPE_ID]":2, "filter[OWNER_ID]": did})
            if items:
                hist[did] = items
    except Exception:
        pass
    return hist

# ============ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ============
CAT_MAIN   = "–æ—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"
CAT_PHYS   = "—Ñ–∏–∑.–ª–∏—Ü–∞"
CAT_LOW    = "–Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏"
SUCCESS_NAME_BY_CAT = {
    CAT_MAIN: "–£—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
    CAT_PHYS: "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞",
    CAT_LOW:  "–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞",
}
FAIL_GROUP1 = {
    "–ù–µ–¥–æ–∑–≤–æ–Ω","–ù–µ –∞–±–æ–Ω–µ–Ω—Ç","–°–ü–ê–ú","–ù–µ—Ü–µ–ª–µ–≤–æ–π","–î–æ—Ä–æ–≥–æ","–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç","–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç",
    "–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞","–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏","–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º","–£–¥–∞–ª–µ–Ω–æ –∏–∑ –Ω–µ—Ä–∞–∑–æ–±—Ä. –ê–≤–∏—Ç–æ"
}
FAIL_GROUP2 = {
    "–í—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤","–î–æ—Ä–æ–≥–æ","–ë—ã–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç","–ù–µ –æ–¥–æ–±—Ä–∏–ª–∏ –æ—Ç—Å—Ä–æ—á–∫—É –ø–ª–∞—Ç–µ–∂–∞","–ù–µ —É—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ä–æ–∫–∏","–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"
}

# ============ –î–∞—Ç—ã/–ø–µ—Ä–∏–æ–¥—ã ============
def to_dt(x):
    try:
        ts = pd.to_datetime(x, utc=True, errors="coerce")
        if pd.isna(ts): return pd.NaT
        return ts.tz_convert(None)
    except:
        return pd.NaT

def period_range(mode, start_date=None, end_date=None, year=None, quarter=None, month=None, iso_week=None):
    today = date.today()
    if mode == "–ù–ò–¢":
        start = start_date or (today - timedelta(days=30)); end = today
    elif mode == "–ì–æ–¥":
        y = int(year or today.year); start = date(y,1,1); end = date(y,12,31)
    elif mode == "–ö–≤–∞—Ä—Ç–∞–ª":
        y = int(year or today.year); q = int(quarter or ((today.month-1)//3 + 1))
        m1 = 3*(q-1)+1; m2 = m1+2; start = date(y,m1,1); end = date(y,m2, calendar.monthrange(y,m2)[1])
    elif mode == "–ú–µ—Å—è—Ü":
        y = int(year or today.year); m = int(month or today.month)
        start = date(y,m,1); end = date(y,m, calendar.monthrange(y,m)[1])
    elif mode == "–ù–µ–¥–µ–ª—è":
        y = int(year or today.isocalendar().year); w = int(iso_week or today.isocalendar().week)
        start = pd.to_datetime(f"{y}-W{w}-1").date(); end = start + timedelta(days=6)
    elif mode == "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç":
        s = start_date or (today - timedelta(days=30))
        e = end_date or today
        if e < s: s, e = e, s
        start, end = s, e
    else:
        start = today - timedelta(days=30); end = today
    return start, end

def previous_period(start, end):
    length = (end - start).days + 1
    prev_end = start - timedelta(days=1)
    prev_start = prev_end - timedelta(days=length-1)
    return prev_start, prev_end

def period_freq(mode):
    if mode in ("–ù–ò–¢","–ú–µ—Å—è—Ü","–ù–µ–¥–µ–ª—è","–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"): return "D"
    if mode == "–ì–æ–¥": return "M"
    if mode == "–ö–≤–∞—Ä—Ç–∞–ª": return "W-MON"
    return "D"

def freq_from_label(label):
    if label.startswith("–ê–≤—Ç–æ"): return None
    return {"–î–Ω–∏":"D","–ù–µ–¥–µ–ª–∏":"W-MON","–ú–µ—Å—è—Ü—ã":"M"}[label]

def ts_with_prev(df, date_col, value_col, start, end, mode, agg="sum", freq_override=None):
    if df.empty:
        return pd.DataFrame(columns=["period","value","prev_value"])
    m = (df[date_col].dt.date.between(start, end))
    cur = df.loc[m].copy()
    freq = freq_override or period_freq(mode)
    cur = cur.set_index(date_col).resample(freq)[value_col].agg(agg).rename("value")
    pstart, pend = previous_period(start, end)
    m2 = df[date_col].dt.date.between(pstart, pend)
    prev = df.loc[m2].copy().set_index(date_col).resample(freq)[value_col].agg(agg).rename("prev_value")
    out = pd.concat([cur, prev], axis=1).fillna(0).reset_index().rename(columns={date_col:"period"})
    return out

# ============ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ============
def safe_float(x, default=0.0):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç float, –Ω–æ –µ—Å–ª–∏ NaN/inf/–æ—à–∏–±–∫–∞ ‚Äî default."""
    try:
        v = float(x)
        if np.isnan(v) or np.isinf(v):
            return default
        return v
    except Exception:
        return default

def clamp(v, lo, hi):
    try:
        v = float(v)
        if np.isnan(v) or np.isinf(v):
            return lo
    except Exception:
        return lo
    return max(lo, min(hi, v))

# ============ –°–∫–æ—Ä–∏–Ω–≥/–º–µ—Ç–∫–∏ ============
def days_between(later, earlier):
    a, b = to_dt(later), to_dt(earlier)
    if pd.isna(a) or pd.isna(b): return None
    return max(0, int((a - b) / pd.Timedelta(days=1)))

def compute_health_scores(df, open_tasks_map, stuck_days=5):
    now = to_dt(pd.Timestamp.utcnow())
    rows = []
    for _, r in df.iterrows():
        create_dt = to_dt(r.get("DATE_CREATE"))
        last = to_dt(r.get("LAST_ACTIVITY_TIME")) or to_dt(r.get("DATE_MODIFY")) or create_dt
        begin_dt = to_dt(r.get("BEGINDATE")) or create_dt

        d_work  = days_between(now, create_dt) or 0
        d_noact = days_between(now, last) or 0
        d_stage = days_between(now, begin_dt) or 0

        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0

        flags = {
            "no_company": int(safe_float(r.get("COMPANY_ID"), 0)) == 0,
            "no_contact": int(safe_float(r.get("CONTACT_ID"), 0)) == 0,
            "no_tasks": not has_task,
            "stuck": d_noact >= stuck_days,
            "lost": str(r.get("STAGE_ID","")).upper().find("LOSE") >= 0
        }

        # –ó–¥–æ—Ä–æ–≤—å–µ
        score = 100
        if flags["no_company"]: score -= 10
        if flags["no_contact"]: score -= 10
        if flags["no_tasks"]:   score -= 25
        if flags["stuck"]:      score -= 25
        if flags["lost"]:       score = min(score, 15)
        health = int(clamp(score, 0, 100))

        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ NaN/inf)
        opp  = safe_float(r.get("OPPORTUNITY"), 0.0)
        prob = clamp(r.get("PROBABILITY"), 0.0, 100.0)
        if opp <= 0:
            potential = 0
        else:
            # –≤–µ—Å –æ—Ç —Å—É–º–º—ã: 30..100 (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞, –Ω–æ —Å –ø–æ—Ç–æ–ª–∫–æ–º)
            try:
                opp_boost = 30 + min(70, math.log10(max(1.0, opp)) / 5.0 * 70.0)
            except ValueError:
                opp_boost = 30.0
            # –≤–µ—Å –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: 0.4..1.0
            prob_coef = 0.4 + (prob/100.0)*0.6
            val = opp_boost * prob_coef
            potential = int(clamp(round(val), 0, 100))

        rows.append({
            "ID": int(safe_float(r.get("ID"), 0)),
            "TITLE": r.get("TITLE",""),
            "ASSIGNED_BY_ID": int(safe_float(r.get("ASSIGNED_BY_ID"), 0)),
            "STAGE_ID": r.get("STAGE_ID",""),
            "CATEGORY_ID": safe_float(r.get("CATEGORY_ID"), np.nan),
            "OPPORTUNITY": opp,
            "PROBABILITY": prob,
            "DATE_CREATE": create_dt,
            "DATE_MODIFY": to_dt(r.get("DATE_MODIFY")),
            "LAST_ACTIVITY_TIME": last,
            "BEGINDATE": begin_dt,
            "CLOSEDATE": to_dt(r.get("CLOSEDATE")),
            "SEMANTIC": (r.get("STAGE_SEMANTIC_ID") or "").upper(),
            "days_in_work": d_work,
            "days_no_activity": d_noact,
            "days_on_stage": d_stage,
            "health": health,
            "potential": potential,
            "flag_no_company": flags["no_company"],
            "flag_no_contact": flags["no_contact"],
            "flag_no_tasks": flags["no_tasks"],
            "flag_stuck": flags["stuck"],
            "flag_lost": flags["lost"],
        })
    return pd.DataFrame(rows)

def normalize_name(x): return str(x or "").strip().casefold()
def is_failure_reason(stage_name):
    name = str(stage_name or "")
    return (name in FAIL_GROUP1) or (name in FAIL_GROUP2)
def failure_group(stage_name):
    name = str(stage_name or "")
    if name in FAIL_GROUP1: return "–ì—Ä—É–ø–ø–∞ 1 (—Ä–∞–Ω–Ω–∏–µ —ç—Ç–∞–ø—ã)"
    if name in FAIL_GROUP2: return "–ì—Ä—É–ø–ø–∞ 2 (–ø–æ–∑–¥–Ω–∏–µ —ç—Ç–∞–ø—ã)"
    return "–ü—Ä–æ—á–µ–µ"

def cheat_flags_for_deal(acts):
    if not acts: return {"reschedules":0, "micro_tasks":0}
    df = pd.DataFrame(acts)
    for col in ["CREATED","LAST_UPDATED","DEADLINE","START_TIME","END_TIME"]:
        if col in df: df[col] = pd.to_datetime(df[col], errors="coerce")
    reschedules = 0
    if "SUBJECT" in df.columns and "DEADLINE" in df.columns:
        for _, g in df.groupby("SUBJECT"):
            uniq = g["DEADLINE"].dropna().dt.floor("D").nunique()
            if uniq > 1: reschedules += (uniq - 1)
    micro = 0
    if "START_TIME" in df.columns and "END_TIME" in df.columns:
        dur = (df["END_TIME"] - df["START_TIME"]).dt.total_seconds() / 60.0
        micro += int((dur.dropna() <= 15).sum())
    return {"reschedules":int(reschedules), "micro_tasks":int(micro)}

# ============ –§–∏–ª—å—Ç—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ============
def ss_get(k, default):
    if k not in st.session_state: st.session_state[k] = default
    return st.session_state[k]

st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞")

mode_options = ["–ù–ò–¢","–ì–æ–¥","–ö–≤–∞—Ä—Ç–∞–ª","–ú–µ—Å—è—Ü","–ù–µ–¥–µ–ª—è","–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"]
default_mode = ss_get("flt_mode", "–ù–ò–¢")
mode = st.sidebar.selectbox("–†–µ–∂–∏–º –ø–µ—Ä–∏–æ–¥–∞", mode_options,
                            index=mode_options.index(default_mode), key="flt_mode")

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ss_get("flt_nit_from", datetime.now().date()-timedelta(days=30))
ss_get("flt_year", datetime.now().year)
ss_get("flt_quarter", (datetime.now().month-1)//3 + 1)
ss_get("flt_month", datetime.now().month)
ss_get("flt_week_year", datetime.now().isocalendar().year)
ss_get("flt_week_num", datetime.now().isocalendar().week)
ss_get("flt_range_from", datetime.now().date()-timedelta(days=30))
ss_get("flt_range_to", datetime.now().date())

if mode == "–ù–ò–¢":
    st.sidebar.date_input("–ù–ò–¢ ‚Äî —Å –∫–∞–∫–æ–π –¥–∞—Ç—ã", key="flt_nit_from")
elif mode == "–ì–æ–¥":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
elif mode == "–ö–≤–∞—Ä—Ç–∞–ª":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
    st.sidebar.selectbox("–ö–≤–∞—Ä—Ç–∞–ª", [1,2,3,4], index=st.session_state["flt_quarter"]-1, key="flt_quarter")
elif mode == "–ú–µ—Å—è—Ü":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_year")
    st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)), index=st.session_state["flt_month"]-1, key="flt_month")
elif mode == "–ù–µ–¥–µ–ª—è":
    st.sidebar.number_input("–ì–æ–¥", min_value=2020, max_value=2100, step=1, key="flt_week_year")
    st.sidebar.number_input("ISO-–Ω–µ–¥–µ–ª—è", min_value=1, max_value=53, step=1, key="flt_week_num")
elif mode == "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç":
    st.sidebar.date_input("–° –¥–∞—Ç—ã", key="flt_range_from")
    st.sidebar.date_input("–ü–æ –¥–∞—Ç—É", key="flt_range_to")

st.sidebar.title("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
agg_default = ss_get("flt_agg_label", "–ê–≤—Ç–æ (–æ—Ç —Ä–µ–∂–∏–º–∞)")
st.sidebar.selectbox("–û—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)", ["–ê–≤—Ç–æ (–æ—Ç —Ä–µ–∂–∏–º–∞)","–î–Ω–∏","–ù–µ–¥–µ–ª–∏","–ú–µ—Å—è—Ü—ã"],
                     index=["–ê–≤—Ç–æ (–æ—Ç —Ä–µ–∂–∏–º–∞)","–î–Ω–∏","–ù–µ–¥–µ–ª–∏","–ú–µ—Å—è—Ü—ã"].index(agg_default),
                     key="flt_agg_label")
agg_freq = {"–ê–≤—Ç–æ (–æ—Ç —Ä–µ–∂–∏–º–∞)":None,"–î–Ω–∏":"D","–ù–µ–¥–µ–ª–∏":"W-MON","–ú–µ—Å—è—Ü—ã":"M"}[st.session_state["flt_agg_label"]]

st.sidebar.slider("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚â• (–¥–Ω–µ–π)", 2, 21, 5, key="flt_stuck_days")
st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (API)", 50, 3000, 1500, step=50, key="flt_limit")

st.sidebar.title("–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–¥–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–¥–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)", value=True, key="flt_use_history")
st.sidebar.slider("–ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏", 50, 800, 300, step=50, key="flt_history_limit")

def reset_filters():
    for k in list(st.session_state.keys()):
        if k.startswith("flt_"):
            del st.session_state[k]
    st.rerun()
st.sidebar.button("‚Ü∫ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", on_click=reset_filters, key="flt_reset_btn")

# –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
mode = st.session_state["flt_mode"]
agg_label = st.session_state["flt_agg_label"]
stuck_days = st.session_state["flt_stuck_days"]
limit = st.session_state["flt_limit"]
use_history = st.session_state["flt_use_history"]
history_limit = st.session_state["flt_history_limit"]

# –ü–µ—Ä–∏–æ–¥
if mode == "–ù–ò–¢":
    start_input = st.session_state["flt_nit_from"]; end_input=None
    year=quarter=month=iso_week=None
elif mode == "–ì–æ–¥":
    year = int(st.session_state["flt_year"]); quarter=month=iso_week=None
    start_input=end_input=None
elif mode == "–ö–≤–∞—Ä—Ç–∞–ª":
    year = int(st.session_state["flt_year"]); quarter = int(st.session_state["flt_quarter"])
    month=iso_week=None; start_input=end_input=None
elif mode == "–ú–µ—Å—è—Ü":
    year = int(st.session_state["flt_year"]); month = int(st.session_state["flt_month"])
    quarter=iso_week=None; start_input=end_input=None
elif mode == "–ù–µ–¥–µ–ª—è":
    year = int(st.session_state["flt_week_year"]); iso_week = int(st.session_state["flt_week_num"])
    quarter=month=None; start_input=end_input=None
else:  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    start_input = st.session_state["flt_range_from"]; end_input = st.session_state["flt_range_to"]
    year=quarter=month=iso_week=None

start, end = period_range(mode, start_date=start_input, end_date=end_input, year=year, quarter=quarter, month=month, iso_week=iso_week)

# ============ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ============
with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶"):
    if not BITRIX24_WEBHOOK:
        st.error("–ù–µ —É–∫–∞–∑–∞–Ω BITRIX24_WEBHOOK –≤ Secrets."); st.stop()

    deals_raw = bx_get_deals_dual(start, end, limit=limit)
    if not deals_raw:
        st.error("–°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."); st.stop()
    df_raw = pd.DataFrame(deals_raw)

    # –ß–∏—Å–ª–∞ ‚Üí –±–µ–∑–æ–ø–∞—Å–Ω–æ
    for c in ["OPPORTUNITY","PROBABILITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID","CATEGORY_ID"]:
        df_raw[c] = pd.to_numeric(df_raw.get(c), errors="coerce")

    users_full   = bx_get_users_full()
    users_map    = {uid: users_full[uid]["name"] for uid in users_full}
    categories   = bx_get_categories()
    activities   = bx_get_activities(df_raw["ID"].astype(int).tolist(), include_completed=True)

# –°–∫–æ—Ä–∏–Ω–≥
df_all = compute_health_scores(df_raw, {k:v for k,v in activities.items() if v}, stuck_days=stuck_days)

# –ö–∞—Ä—Ç–∞ —Å—Ç–∞–¥–∏–π
cat_ids   = df_all["CATEGORY_ID"].dropna().astype(int).unique().tolist()
sort_map, name_map = bx_get_stage_map_by_category(cat_ids)
FALLBACK_ORDER = ["NEW","NEW_LEAD","PREPARATION","PREPAYMENT_INVOICE","EXECUTING","FINAL_INVOICE","WON","LOSE"]
def fallback_sort(sid):
    sid = str(sid or ""); sid_short = sid.split(":")[1] if ":" in sid else sid
    return (FALLBACK_ORDER.index(sid_short)*100 if sid_short in FALLBACK_ORDER else 10000 + hash(sid_short)%1000)

df_all["stage_sort"] = df_all["STAGE_ID"].map(lambda s: sort_map.get(str(s), fallback_sort(s)))
df_all["stage_name"] = df_all["STAGE_ID"].map(lambda s: name_map.get(str(s), str(s)))
df_all["manager"]    = df_all["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
df_all["category"]   = df_all["CATEGORY_ID"].map(lambda x: categories.get(int(x or 0), "–í–æ—Ä–æ–Ω–∫–∞") if pd.notna(x) else "–í–æ—Ä–æ–Ω–∫–∞")
df_all["cat_norm"]   = df_all["category"].map(lambda x: str(x or "").strip().casefold())

# –£—Å–ø–µ—Ö/–ø—Ä–æ–≤–∞–ª
df_all["is_success"] = df_all.apply(lambda r: (SUCCESS_NAME_BY_CAT.get(r["cat_norm"]) == r["stage_name"]), axis=1)
df_all["is_fail"]    = df_all["stage_name"].map(is_failure_reason)
df_all["fail_group"] = df_all["stage_name"].map(failure_group)

# –ê–Ω—Ç–∏—á–∏—Ç
df_all["reschedules"] = df_all["ID"].map(lambda i: cheat_flags_for_deal(activities.get(int(i))).get("reschedules",0))
df_all["micro_tasks"] = df_all["ID"].map(lambda i: cheat_flags_for_deal(activities.get(int(i))).get("micro_tasks",0))
df_all["cheat_flag"]  = (df_all["reschedules"]>=3) | (df_all["micro_tasks"]>=5)

# –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–¥–∏–π
history_info = {}
if st.session_state["flt_use_history"]:
    try:
        history_raw = bx_get_stage_history_lite(df_all["ID"].astype(int).tolist(), max_deals=st.session_state["flt_history_limit"])
        for did, items in history_raw.items():
            h = pd.DataFrame(items)
            if h.empty: 
                continue
            if "STAGE_ID" not in h.columns and "STATUS_ID" in h.columns:
                h["STAGE_ID"] = h["STATUS_ID"]
            time_cols = []
            for c in ["CREATED_TIME","CREATED","CHANGED_TIME","DATE_CREATE"]:
                if c in h.columns:
                    h[c] = pd.to_datetime(h[c], errors="coerce"); time_cols.append(c)
            if not time_cols:
                continue
            tcol = time_cols[0]
            h = h.dropna(subset=[tcol]).sort_values(tcol)
            history_info[did] = h[["STAGE_ID", tcol]].rename(columns={tcol:"TS"})
    except Exception:
        history_info = {}
if history_info:
    fail_from_stage = {}
    for did, hist in history_info.items():
        if len(hist) >= 2:
            prev = hist.iloc[-2]["STAGE_ID"]
            fail_from_stage[did] = name_map.get(str(prev), str(prev))
    df_all["fail_from_stage_hist"] = df_all["ID"].map(fail_from_stage)
else:
    df_all["fail_from_stage_hist"] = np.nan

# ============ –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª–∞–º ============
st.sidebar.title("–û—Ç–¥–µ–ª—ã / —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
departments = bx_get_departments()
sales_depts = [d for d in departments if "–ø—Ä–æ–¥–∞–∂" in (d.get("NAME","").lower())]
sales_dept_ids = {int(d["ID"]) for d in sales_depts}
ss_get("flt_sales_only", True if sales_dept_ids else False)

dept_options = [(int(d["ID"]), d["NAME"]) for d in departments]
default_depts = [(int(d["ID"]), d["NAME"]) for d in sales_depts] if st.session_state["flt_sales_only"] else []
if "flt_depts" not in st.session_state:
    st.session_state["flt_depts"] = default_depts
st.sidebar.checkbox("–¢–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂", key="flt_sales_only")
st.sidebar.multiselect("–í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–æ–≤", options=dept_options, key="flt_depts",
                       default=default_depts, format_func=lambda t: t[1] if isinstance(t, tuple) else str(t))
selected_dept_ids = {t[0] for t in st.session_state["flt_depts"]} if st.session_state["flt_depts"] else (sales_dept_ids if st.session_state["flt_sales_only"] else set())
if selected_dept_ids:
    users_full_all = bx_get_users_full()
    keep_users = [uid for uid, info in users_full_all.items() if set(info["depts"]) & selected_dept_ids]
    if keep_users:
        df_all = df_all[df_all["ASSIGNED_BY_ID"].isin(keep_users)]

# ============ –ü–æ–¥–Ω–∞–±–æ—Ä—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É ============
m_created = df_all["DATE_CREATE"].dt.date.between(start, end)
m_closed  = df_all["CLOSEDATE"].dt.date.between(start, end)
m_modify  = df_all["DATE_MODIFY"].dt.date.between(start, end)

df_created = df_all[m_created].copy()   # ¬´–°–¥–µ–ª–∫–∏ (—à—Ç.)¬ª ‚Äî –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
df_closed  = df_all[m_closed].copy()    # ¬´–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)¬ª ‚Äî –ø–æ –¥–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏—è
df_mod     = df_all[m_modify].copy()    # ¬´–ó–¥–æ—Ä–æ–≤—å–µ/–ø—Ä–æ–±–ª–µ–º—ã/–≥—Ä–∞–¥–∞—Ü–∏—è/AI¬ª ‚Äî –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –®–∞–ø–∫–∞
def fmt_currency(x):
    try: return f"{int(float(x)):,}".replace(","," ")
    except: return "0"

st.markdown("<div class='headerbar'><div class='pill'>–ë–£–†–ú–ê–® ¬∑ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂</div></div>", unsafe_allow_html=True)
st.caption(f"–ü–µ—Ä–∏–æ–¥: {start} ‚Üí {end}. –î–∏–Ω–∞–º–∏–∫–∞ ‚Äî –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã. –ê–≥—Ä–µ–≥–∞—Ü–∏—è: {agg_label}. –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–¥–∏–π: {'–≤–∫–ª' if st.session_state['flt_use_history'] else '–≤—ã–∫–ª'}.")

# ============ –í–∫–ª–∞–¥–∫–∏ ============
tab_over, tab_prob, tab_mgr, tab_grad, tab_time, tab_ai, tab_plan = st.tabs([
    "üìä –û–±–∑–æ—Ä", "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã", "üë• –ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", "üóÇ –ì—Ä–∞–¥–∞—Ü–∏—è", "‚è± –í—Ä–µ–º—è –Ω–∞ —ç—Ç–∞–ø–∞—Ö", "ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "üìÖ –ü–ª–∞–Ω/—Ñ–∞–∫—Ç"
])

# =========================
# –û–ë–ó–û–†
# =========================
with tab_over:
    st.subheader("–°—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

    ts_deals = ts_with_prev(df_created.assign(dc=pd.to_datetime(df_created["DATE_CREATE"])), "dc", "ID",
                            start, end, mode, agg="count", freq_override=agg_freq)

    target_cats = {CAT_MAIN, CAT_PHYS, CAT_LOW}
    df_succ_closed = df_closed[(df_closed["is_success"]) & (df_closed["cat_norm"].isin(target_cats))].copy()
    df_succ_closed["rev_date"] = df_succ_closed["CLOSEDATE"].fillna(df_succ_closed["DATE_MODIFY"])
    ts_rev_total = ts_with_prev(df_succ_closed.assign(rd=pd.to_datetime(df_succ_closed["rev_date"])), "rd", "OPPORTUNITY",
                                start, end, mode, agg="sum", freq_override=agg_freq)

    per_cat = []
    for cat in [CAT_MAIN, CAT_PHYS, CAT_LOW]:
        part = df_succ_closed[df_succ_closed["cat_norm"]==cat].copy()
        ts = ts_with_prev(part.assign(rd=pd.to_datetime(part["rev_date"])), "rd", "OPPORTUNITY",
                          start, end, mode, agg="sum", freq_override=agg_freq)
        ts["cat"] = cat; per_cat.append(ts)
    ts_rev_by_cat = pd.concat(per_cat, ignore_index=True) if per_cat else pd.DataFrame(columns=["period","value","prev_value","cat"])

    ts_health = ts_with_prev(df_mod.assign(dm=pd.to_datetime(df_mod["DATE_MODIFY"])), "dm", "health",
                             start, end, mode, agg="mean", freq_override=agg_freq)
    ts_poten  = ts_with_prev(df_mod.assign(dm=pd.to_datetime(df_mod["DATE_MODIFY"])), "dm", "potential",
                             start, end, mode, agg="mean", freq_override=agg_freq)

    def delta_str(cur_prev_df, agg="sum"):
        if cur_prev_df.empty: return "0", "0%"
        cur = cur_prev_df["value"].sum() if agg=="sum" else cur_prev_df["value"].mean()
        pre = cur_prev_df["prev_value"].sum() if agg=="sum" else cur_prev_df["prev_value"].mean()
        diff = cur - pre; pct = (diff / pre * 100.0) if pre else 0.0
        s1 = fmt_currency(cur) if agg=="sum" else f"{cur:.1f}"
        s2 = f"{'+' if diff>=0 else ''}{fmt_currency(diff) if agg=='sum' else f'{diff:.1f}'} ({pct:+.1f}%)"
        return s1, s2

    c1,c2,c3,c4 = st.columns(4)
    val, delta = delta_str(ts_deals, agg="sum"); c1.metric("–°–¥–µ–ª–æ–∫", val, delta)
    val, delta = delta_str(ts_rev_total, agg="sum"); c2.metric("–í—ã—Ä—É—á–∫–∞, ‚ÇΩ", val, delta)
    val, delta = delta_str(ts_health, agg="mean"); c3.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ, %", val, delta)
    val, delta = delta_str(ts_poten, agg="mean"); c4.metric("–°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, %", val, delta)

    if px:
        st.markdown("###### –õ–∏–Ω–∏—è: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ (–ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)")
        if not ts_deals.empty:
            fig_d = px.line(ts_deals, x="period", y="value", markers=True, labels={"value":"–ö–æ–ª-–≤–æ","period":"–ü–µ—Ä–∏–æ–¥"})
            fig_d.add_scatter(x=ts_deals["period"], y=ts_deals["prev_value"], mode="lines", name="–ü—Ä–µ–¥. –ø–µ—Ä–∏–æ–¥", line=dict(dash="dash"))
            st.plotly_chart(fig_d, use_container_width=True, key="ov_deals_ts")

        st.markdown("###### –õ–∏–Ω–∏—è: –≤—ã—Ä—É—á–∫–∞ (–ø–æ –¥–∞—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏—è) –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º")
        if not ts_rev_by_cat.empty:
            fig_r = px.line(ts_rev_by_cat, x="period", y="value", color="cat",
                            labels={"value":"–í—ã—Ä—É—á–∫–∞, ‚ÇΩ","period":"–ü–µ—Ä–∏–æ–¥","cat":"–í–æ—Ä–æ–Ω–∫–∞"},
                            color_discrete_map={CAT_MAIN:"#111111", CAT_PHYS:"#ff7a00", CAT_LOW:"#999999"})
            if not ts_rev_total.empty:
                fig_r.add_scatter(x=ts_rev_total["period"], y=ts_rev_total["prev_value"], name="–°—É–º–º–∞ (–ø—Ä–µ–¥.)", line=dict(dash="dash"))
            st.plotly_chart(fig_r, use_container_width=True, key="ov_revenue_bycat")

        st.markdown("###### –õ–∏–Ω–∏–∏: —Å—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª (–ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)")
        colA, colB = st.columns(2)
        with colA:
            if not ts_health.empty:
                fig_h = px.line(ts_health, x="period", y="value", markers=True, labels={"value":"–ó–¥–æ—Ä–æ–≤—å–µ %","period":"–ü–µ—Ä–∏–æ–¥"})
                fig_h.add_scatter(x=ts_health["period"], y=ts_health["prev_value"], mode="lines", name="–ü—Ä–µ–¥. –ø–µ—Ä–∏–æ–¥", line=dict(dash="dash"))
                st.plotly_chart(fig_h, use_container_width=True, key="ov_health_ts")
        with colB:
            if not ts_poten.empty:
                fig_p = px.line(ts_poten, x="period", y="value", markers=True, labels={"value":"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª %","period":"–ü–µ—Ä–∏–æ–¥"})
                fig_p.add_scatter(x=ts_poten["period"], y=ts_poten["prev_value"], mode="lines", name="–ü—Ä–µ–¥. –ø–µ—Ä–∏–æ–¥", line=dict(dash="dash"))
                st.plotly_chart(fig_p, use_container_width=True, key="ov_potential_ts")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (—à–∞–≥ 5%)")
    bins = list(range(0, 105, 5))
    if not df_mod.empty:
        hist = pd.cut(df_mod["health"], bins=bins, right=False).value_counts().sort_index()
        dist = pd.DataFrame({"–î–∏–∞–ø–∞–∑–æ–Ω": hist.index.astype(str), "–ö–æ–ª-–≤–æ": hist.values})
    else:
        dist = pd.DataFrame(columns=["–î–∏–∞–ø–∞–∑–æ–Ω","–ö–æ–ª-–≤–æ"])
    if px and not dist.empty:
        fig_funnel = px.funnel(dist, y="–î–∏–∞–ø–∞–∑–æ–Ω", x="–ö–æ–ª-–≤–æ", color_discrete_sequence=["#ff7a00"])
        st.plotly_chart(fig_funnel, use_container_width=True, key="ov_health_funnel")
    st.dataframe(dist.rename(columns={"–ö–æ–ª-–≤–æ":"–ö–æ–ª-–≤–æ (—Ç–µ–∫)"}), use_container_width=True)

    # –í–æ—Ä–æ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º (–±–µ–∑ –ø—Ä–æ–≤–∞–ª–æ–≤)
    st.subheader("–í–æ—Ä–æ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º (–±–µ–∑ –ø—Ä–æ–≤–∞–ª–æ–≤) + ¬´–ü—Ä–æ–≤–∞–ª¬ª –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º")
    for cat, title in [(CAT_MAIN, "–û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"), (CAT_PHYS, "–§–∏–∑.–õ–∏—Ü–∞"), (CAT_LOW, "–ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏")]:
        sub = df_created[(df_created["cat_norm"]==cat) & (~df_created["is_fail"])]
        stage = (sub.groupby(["STAGE_ID","stage_name","stage_sort"])["ID"].count()
                 .reset_index().rename(columns={"ID":"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"}).sort_values("stage_sort"))
        with st.expander(f"–í–æ—Ä–æ–Ω–∫–∞: {title}"):
            if px and not stage.empty:
                fig_v = px.funnel(stage, y="stage_name", x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color_discrete_sequence=["#111111" if cat==CAT_MAIN else "#ff7a00"])
                st.plotly_chart(fig_v, use_container_width=True, key=f"ov_funnel_{cat}")
            st.dataframe(stage[["stage_name","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]].rename(columns={"stage_name":"–≠—Ç–∞–ø"}), use_container_width=True)

    # –ü—Ä–æ–≤–∞–ª—ã
    fails = df_mod[df_mod["is_fail"]].copy()
    if not fails.empty:
        fails["–ü—Ä–∏—á–∏–Ω–∞"] = fails["stage_name"]
        fails["–≠—Ç–∞–ø (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)"] = fails["fail_from_stage_hist"]
        fails["–ì—Ä—É–ø–ø–∞"] = fails["–ü—Ä–∏—á–∏–Ω–∞"].map(failure_group)
        fail_by_reason = (fails.groupby(["category","–ì—Ä—É–ø–ø–∞","–ü—Ä–∏—á–∏–Ω–∞","–≠—Ç–∞–ø (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)"])["ID"].count()
                          .reset_index().rename(columns={"ID":"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"}))
    else:
        fail_by_reason = pd.DataFrame(columns=["category","–ì—Ä—É–ø–ø–∞","–ü—Ä–∏—á–∏–Ω–∞","–≠—Ç–∞–ø (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    with st.expander("–ü—Ä–æ–≤–∞–ª: –ø—Ä–∏—á–∏–Ω—ã –ø–æ –≥—Ä—É–ø–ø–∞–º (–∏—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–¥–∏–π, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"):
        if px and not fail_by_reason.empty:
            fig_fail = px.bar(fail_by_reason, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ü—Ä–∏—á–∏–Ω–∞", color="–ì—Ä—É–ø–ø–∞",
                              orientation="h", facet_col="category", height=520,
                              title="–ü—Ä–æ–≤–∞–ª—ã –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º (–≥—Ä—É–ø–ø—ã/–≤–æ—Ä–æ–Ω–∫–∏)")
            st.plotly_chart(fig_fail, use_container_width=True, key="ov_fails_bar")
        st.dataframe(fail_by_reason.rename(columns={"category":"–í–æ—Ä–æ–Ω–∫–∞"}), use_container_width=True)

# =========================
# –ü–†–û–ë–õ–ï–ú–´
# =========================
with tab_prob:
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º (DATE_MODIFY –≤ –ø–µ—Ä–∏–æ–¥)")
    problems = {
        "–ë–µ–∑ –∑–∞–¥–∞—á": int(df_mod["flag_no_tasks"].sum()),
        "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": int(df_mod["flag_no_company"].sum()),
        "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞": int(df_mod["flag_no_contact"].sum()),
        "–ó–∞—Å—Ç—Ä—è–ª–∏": int(df_mod["flag_stuck"].sum()),
        "–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã": int(df_mod["is_fail"].sum()),
    }
    a,b,c,d,e = st.columns(5)
    a.metric("–ë–µ–∑ –∑–∞–¥–∞—á", problems["–ë–µ–∑ –∑–∞–¥–∞—á"])
    b.metric("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏", problems["–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏"])
    c.metric("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞", problems["–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞"])
    d.metric("–ó–∞—Å—Ç—Ä—è–ª–∏", problems["–ó–∞—Å—Ç—Ä—è–ª–∏"])
    e.metric("–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã", problems["–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã"])

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    if px and not df_mod.empty:
        def build_problem_ts(mask_col):
            tmp = df_mod.assign(dm=pd.to_datetime(df_mod["DATE_MODIFY"]))
            tmp[mask_col] = tmp[mask_col].astype(int)
            return ts_with_prev(tmp, "dm", mask_col, start, end, mode, agg="sum", freq_override=agg_freq)
        lines = []
        for name, col in [("–ë–µ–∑ –∑–∞–¥–∞—á","flag_no_tasks"),("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏","flag_no_company"),
                          ("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞","flag_no_contact"),("–ó–∞—Å—Ç—Ä—è–ª–∏","flag_stuck"),("–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã","is_fail")]:
            t = build_problem_ts(col); t["type"]=name; lines.append(t)
        prob_ts = pd.concat(lines, ignore_index=True)
        fig = px.line(prob_ts, x="period", y="value", color="type", labels={"value":"–ö–æ–ª-–≤–æ","period":"–ü–µ—Ä–∏–æ–¥","type":"–ü—Ä–æ–±–ª–µ–º–∞"})
        base_prev = (prob_ts.groupby("period")["prev_value"].sum().reset_index())
        fig.add_scatter(x=base_prev["period"], y=base_prev["prev_value"], name="–ü—Ä–µ–¥. –ø–µ—Ä–∏–æ–¥ (—Å—É–º–º–∞)", line=dict(dash="dash"))
        st.plotly_chart(fig, use_container_width=True, key="prob_lines")

    st.subheader("–°–ø–∏—Å–∫–∏ –ø–æ –≤–∏–¥–∞–º –ø—Ä–æ–±–ª–µ–º (DATE_MODIFY –≤ –ø–µ—Ä–∏–æ–¥)")
    cols = st.columns(5)
    masks = [("–ë–µ–∑ –∑–∞–¥–∞—á", df_mod["flag_no_tasks"]),("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞", df_mod["flag_no_contact"]),
             ("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏", df_mod["flag_no_company"]),("–ó–∞—Å—Ç—Ä—è–ª–∏", df_mod["flag_stuck"]),("–ü—Ä–æ–∏–≥—Ä–∞–Ω—ã", df_mod["is_fail"])]
    for (title, mask), box in zip(masks, cols):
        with box:
            st.markdown(f"<div class='card'><div class='title'>{title}</div>", unsafe_allow_html=True)
            st.dataframe(df_mod[mask][["ID","TITLE","manager","stage_name","OPPORTUNITY","health","days_no_activity"]],
                         use_container_width=True, height=260)
            st.markdown("</div>", unsafe_allow_html=True)

# =========================
# –ü–û –ú–ï–ù–ï–î–ñ–ï–†–ê–ú
# =========================
with tab_mgr:
    st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (DATE_MODIFY / CLOSEDATE –≤ –ø–µ—Ä–∏–æ–¥)")
    succ = df_closed[(df_closed["is_success"]) & (df_closed["cat_norm"].isin({CAT_MAIN,CAT_PHYS,CAT_LOW}))].copy()
    succ["rev_date"] = succ["CLOSEDATE"].fillna(succ["DATE_MODIFY"])
    won_cnt = succ.groupby("manager")["ID"].count().rename("–í—ã–∏–≥—Ä–∞–Ω–æ").reset_index()
    won_sum = succ.groupby("manager")["OPPORTUNITY"].sum().rename("–í—ã—Ä—É—á–∫–∞, ‚ÇΩ").reset_index()
    lost_cnt = df_mod[df_mod["is_fail"]].groupby("manager")["ID"].count().rename("–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ").reset_index()
    base = df_mod.groupby("manager").agg(–°–¥–µ–ª–æ–∫=("ID","count"), –°—Ä–ó–¥–æ—Ä–æ–≤—å–µ=("health","mean")).reset_index()
    mgr = base.merge(won_cnt, on="manager", how="left").merge(won_sum, on="manager", how="left").merge(lost_cnt, on="manager", how="left")
    mgr[["–í—ã–∏–≥—Ä–∞–Ω–æ","–í—ã—Ä—É—á–∫–∞, ‚ÇΩ","–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ"]] = mgr[["–í—ã–∏–≥—Ä–∞–Ω–æ","–í—ã—Ä—É—á–∫–∞, ‚ÇΩ","–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ"]].fillna(0)
    mgr["–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–±–µ–¥—É, %"] = (mgr["–í—ã–∏–≥—Ä–∞–Ω–æ"]/mgr["–°–¥–µ–ª–æ–∫"]*100).round(1).replace([np.inf,np.nan],0)
    mgr["–°—Ä–ó–¥–æ—Ä–æ–≤—å–µ"] = mgr["–°—Ä–ó–¥–æ—Ä–æ–≤—å–µ"].round(1)
    st.dataframe(mgr.rename(columns={"manager":"–ú–µ–Ω–µ–¥–∂–µ—Ä"}), use_container_width=True)

    if px and not mgr.empty:
        st.markdown("###### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        fig1 = px.bar(mgr, x="manager", y="–í—ã—Ä—É—á–∫–∞, ‚ÇΩ", color="–°—Ä–ó–¥–æ—Ä–æ–≤—å–µ", color_continuous_scale="RdYlGn", labels={"manager":"–ú–µ–Ω–µ–¥–∂–µ—Ä"})
        st.plotly_chart(fig1, use_container_width=True, key="mgr_revenue")
        st.markdown("###### –°–¥–µ–ª–∫–∏ vs –ö–æ–Ω–≤–µ—Ä—Å–∏—è")
        fig2 = px.scatter(mgr, x="–°–¥–µ–ª–æ–∫", y="–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–±–µ–¥—É, %", size="–í—ã—Ä—É—á–∫–∞, ‚ÇΩ", hover_name="manager")
        st.plotly_chart(fig2, use_container_width=True, key="mgr_scatter")

    st.subheader("–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º (—á–∏—Ç–∞–±–µ–ª—å–Ω–æ)")
    for cat, title in [(CAT_MAIN,"–û—Å–Ω–æ–≤–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"), (CAT_PHYS,"–§–∏–∑.–õ–∏—Ü–∞"), (CAT_LOW,"–ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏")]:
        sub = df_mod[df_mod["cat_norm"]==cat]
        st.markdown(f"**{title}**")
        left, right = st.columns(2)
        with left:
            stages = sub[~sub["is_fail"]].groupby(["stage_name","stage_sort"]).size().reset_index(name="–ö–æ–ª-–≤–æ").sort_values("stage_sort")
            total = stages["–ö–æ–ª-–≤–æ"].sum() or 1
            stages["–î–æ–ª—è, %"] = (stages["–ö–æ–ª-–≤–æ"]/total*100).round(1)
            st.dataframe(stages[["stage_name","–ö–æ–ª-–≤–æ","–î–æ–ª—è, %"]].rename(columns={"stage_name":"–≠—Ç–∞–ø"}), use_container_width=True)
            if px and not stages.empty:
                fig = px.funnel(stages, y="stage_name", x="–ö–æ–ª-–≤–æ", color_discrete_sequence=["#ff7a00"])
                st.plotly_chart(fig, use_container_width=True, key=f"mgr_conv_funnel_{cat}")
        with right:
            if history_info and "fail_from_stage_hist" in df_all.columns:
                fails_by = sub[sub["is_fail"]].groupby("fail_from_stage_hist").size().reset_index(name="–ö–æ–ª-–≤–æ")
                fails_by = fails_by.rename(columns={"fail_from_stage_hist":"–≠—Ç–∞–ø (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)"}).sort_values("–ö–æ–ª-–≤–æ", ascending=False)
                st.dataframe(fails_by, use_container_width=True)
                if px and not fails_by.empty:
                    figb = px.bar(fails_by, x="–ö–æ–ª-–≤–æ", y="–≠—Ç–∞–ø (–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏)", orientation="h")
                    st.plotly_chart(figb, use_container_width=True, key=f"mgr_conv_failhist_{cat}")
            else:
                fails = sub[sub["is_fail"]].groupby(["fail_group","stage_name"]).size().reset_index(name="–ö–æ–ª-–≤–æ")
                if fails.empty:
                    st.info("–ü—Ä–æ–≤–∞–ª–æ–≤ –Ω–µ—Ç.")
                else:
                    fails_plot = fails.rename(columns={"stage_name":"–ü—Ä–∏—á–∏–Ω–∞","fail_group":"–ì—Ä—É–ø–ø–∞"})
                    st.dataframe(fails_plot[["–ü—Ä–∏—á–∏–Ω–∞","–ì—Ä—É–ø–ø–∞","–ö–æ–ª-–≤–æ"]], use_container_width=True)
                    if px and not fails_plot.empty:
                        figb = px.bar(fails_plot, x="–ö–æ–ª-–≤–æ", y="–ü—Ä–∏—á–∏–Ω–∞", color="–ì—Ä—É–ø–ø–∞", orientation="h")
                        st.plotly_chart(figb, use_container_width=True, key=f"mgr_conv_fail_{cat}")

# =========================
# –ì–†–ê–î–ê–¶–ò–Ø / –í–†–ï–ú–Ø / AI
# =========================
with tab_grad:
    st.subheader("–ì—Ä–∞–¥–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ (DATE_MODIFY –≤ –ø–µ—Ä–∏–æ–¥)")
    quick = df_mod[(~df_mod["is_fail"]) & (df_mod["PROBABILITY"]>=50) & (df_mod["health"]>=60)].copy()
    work  = df_mod[(~df_mod["is_fail"]) & (~df_mod.index.isin(quick.index))].copy()
    drop  = df_mod[df_mod["is_fail"]]
    c1,c2,c3 = st.columns(3)
    c1.metric("üü¢ Quick Wins", len(quick), fmt_currency(quick["OPPORTUNITY"].sum())+" ‚ÇΩ")
    c2.metric("üü° –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞", len(work), fmt_currency(work["OPPORTUNITY"].sum())+" ‚ÇΩ")
    c3.metric("üî¥ Stop List", len(drop), fmt_currency(drop["OPPORTUNITY"].sum())+" ‚ÇΩ")
    with st.expander("–°–ø–∏—Å–∫–∏"):
        st.dataframe(quick[["ID","TITLE","manager","OPPORTUNITY","health","PROBABILITY"]].rename(columns={"OPPORTUNITY":"–°—É–º–º–∞"}), use_container_width=True)
        st.dataframe(work[["ID","TITLE","manager","OPPORTUNITY","health","PROBABILITY"]].rename(columns={"OPPORTUNITY":"–°—É–º–º–∞"}), use_container_width=True)
        st.dataframe(drop[["ID","TITLE","manager","stage_name","OPPORTUNITY"]].rename(columns={"OPPORTUNITY":"–°—É–º–º–∞"}), use_container_width=True)

with tab_time:
    st.subheader("–í—Ä–µ–º—è –Ω–∞ —ç—Ç–∞–ø–∞—Ö (DATE_MODIFY –≤ –ø–µ—Ä–∏–æ–¥)")
    if not df_mod.empty:
        stage_time = df_mod.groupby("stage_name").agg(–°—Ä–î–Ω–µ–π=("days_on_stage","mean"), –ú–∏–Ω=("days_on_stage","min"), –ú–∞–∫—Å=("days_on_stage","max")).round(1).reset_index()
    else:
        stage_time = pd.DataFrame(columns=["–≠—Ç–∞–ø","–°—Ä–î–Ω–µ–π","–ú–∏–Ω","–ú–∞–∫—Å"])
    st.dataframe(stage_time.rename(columns={"stage_name":"–≠—Ç–∞–ø"}), use_container_width=True)

with tab_ai:
    st.subheader("ü§ñ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (DATE_MODIFY –≤ –ø–µ—Ä–∏–æ–¥)")
    st.caption("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–∫ –¥–µ—Ä–∂–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ ‚â•70% + –ø–æ–∏—Å–∫ ¬´–æ–±—Ö–æ–¥–æ–≤¬ª (–ø–µ—Ä–µ–Ω–æ—Å—ã –¥–µ–¥–ª–∞–π–Ω–æ–≤, –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á–∏).")
    def ai_block(mgr_name, g):
        summary = {
            "deals": int(len(g)),
            "avg_health": float(pd.to_numeric(g["health"], errors="coerce").mean() or 0),
            "avg_potential": float(pd.to_numeric(g["potential"], errors="coerce").mean() or 0),
            "no_tasks": int(g["flag_no_tasks"].sum()),
            "stuck": int(g["flag_stuck"].sum()),
            "fails": int(g["is_fail"].sum()),
            "reschedules": int(g["reschedules"].sum()),
            "micro_tasks": int(g["micro_tasks"].sum()),
        }
        if not PERPLEXITY_API_KEY:
            return f"AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–≤–æ–¥–∫–∞: {summary}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Ü–µ–ª—å/—Ä–µ–∑—É–ª—å—Ç–∞—Ç/–¥–µ–¥–ª–∞–π–Ω).\n‚Ä¢ –ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –±–æ–ª–µ–µ 1 —Ä–∞–∑–∞.\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç-—Ä–∏—Ç–º: 1 —Ä–∞–∑ –≤ 3‚Äì5 –¥–Ω–µ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–¥–∏—è—Ö.\n‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∑–≤–æ–Ω–æ–∫/–ø–∏—Å—å–º–æ/–≤—Å—Ç—Ä–µ—á–∞) –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ CRM. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ "{mgr_name}".
–î–∞–Ω–Ω—ã–µ: {summary}.
1) –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
2) –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã.
3) –ß–µ–∫-–ª–∏—Å—Ç, —á—Ç–æ–±—ã –∑–¥–æ—Ä–æ–≤—å–µ —Å–¥–µ–ª–æ–∫ ‚â•70% –∏ –Ω–µ –ø–∞–¥–∞–ª–æ (–∑–∞–¥–∞—á–∏, —Å—Ä–æ–∫–∏, –∫–æ–Ω—Ç–∞–∫—Ç-—Ä–∏—Ç–º, —Ñ–∏–∫—Å–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π).
4) –ü—Ä–∏–∑–Ω–∞–∫–∏ ¬´–æ–±—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã¬ª (–ø–µ—Ä–µ–Ω–æ—Å—ã –¥–µ–¥–ª–∞–π–Ω–æ–≤, –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á–∏) –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é.
–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –¥–µ–ª–æ–≤—ã–º —Å—Ç–∏–ª–µ–º.
"""
        try:
            resp = requests.post("https://api.perplexity.ai/chat/completions",
                                 headers={"Authorization": f"Bearer {PERPLEXITY_API_KEY}"},
                                 json={"model":"sonar-pro","messages":[{"role":"user","content":prompt}],
                                       "temperature":0.3,"max_tokens":800},
                                 timeout=30)
            return resp.json()["choices"][0]["message"]["content"]
        except Exception as e:
            return f"AI –æ—à–∏–±–∫–∞: {e}"
    for mgr_name, g in df_mod.groupby("manager"):
        with st.expander(f"üë§ {mgr_name} ({len(g)} —Å–¥–µ–ª–æ–∫)"):
            st.markdown(ai_block(mgr_name, g))

# =========================
# –ü–õ–ê–ù/–§–ê–ö–¢
# =========================
with tab_plan:
    st.subheader("–ì–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω –ø–æ –≤—ã—Ä—É—á–∫–µ ‚Äî –ü–ª–∞–Ω/–§–∞–∫—Ç/–ü—Ä–æ–≥–Ω–æ–∑")
    st.number_input("–¶–µ–ª–µ–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –≥–æ–¥, ‚ÇΩ", min_value=0, step=100_000, format="%d", key="flt_year_plan")
    year_plan = st.session_state["flt_year_plan"] if st.session_state["flt_year_plan"] else 10_000_000
    this_year = datetime.now().year

    succ_y = df_all[(df_all["is_success"]) & (df_all["cat_norm"].isin({CAT_MAIN,CAT_PHYS,CAT_LOW}))].copy()
    succ_y["rev_date"] = succ_y["CLOSEDATE"].fillna(succ_y["DATE_MODIFY"])
    succ_y["year"] = pd.to_datetime(succ_y["rev_date"]).dt.year
    succ_y = succ_y[succ_y["year"]==this_year].copy()
    succ_y["month"] = pd.to_datetime(succ_y["rev_date"]).dt.month
    succ_y["quarter"] = ((succ_y["month"]-1)//3 + 1)

    fact_year = float(succ_y["OPPORTUNITY"].sum())
    fact_by_q = succ_y.groupby("quarter")["OPPORTUNITY"].sum().reindex([1,2,3,4], fill_value=0)
    fact_by_m = succ_y.groupby("month")["OPPORTUNITY"].sum().reindex(range(1,13), fill_value=0)

    today = date.today()
    months_passed = today.month
    months_left   = 12 - months_passed + 1
    remaining = max(0.0, year_plan - fact_year)
    need_per_month = (remaining / months_left) if months_left>0 else 0.0
    pct_year = (fact_year / year_plan * 100.0) if year_plan>0 else 0.0

    open_pipe = df_all[(~df_all["is_success"]) & (~df_all["is_fail"])]
    forecast_add = float((open_pipe["OPPORTUNITY"] * open_pipe["PROBABILITY"]/100.0).sum())
    forecast_year = fact_year + forecast_add

    c1,c2,c3,c4 = st.columns(4)
    c1.metric("–ü–ª–∞–Ω (–≥–æ–¥), ‚ÇΩ", fmt_currency(year_plan))
    c2.metric("–§–∞–∫—Ç YTD, ‚ÇΩ", fmt_currency(fact_year), f"{pct_year:.1f}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    c3.metric("–û—Å—Ç–∞–ª–æ—Å—å, ‚ÇΩ", fmt_currency(remaining), f"‚âà {fmt_currency(need_per_month)} ‚ÇΩ/–º–µ—Å")
    c4.metric("–ü—Ä–æ–≥–Ω–æ–∑ –≥–æ–¥–∞, ‚ÇΩ", fmt_currency(forecast_year), f"{(forecast_year/year_plan*100 if year_plan else 0):.1f}%")

    plan_q = pd.Series(year_plan/4, index=[1,2,3,4])
    plan_m = pd.Series(year_plan/12, index=range(1,13))
    q_df = pd.DataFrame({"–ö–≤–∞—Ä—Ç–∞–ª":[1,2,3,4], "–ü–ª–∞–Ω, ‚ÇΩ":plan_q.values.round(0), "–§–∞–∫—Ç, ‚ÇΩ":fact_by_q.values.round(0)})
    q_df["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, %"] = (q_df["–§–∞–∫—Ç, ‚ÇΩ"]/q_df["–ü–ª–∞–Ω, ‚ÇΩ"]*100).replace([np.inf,np.nan],0).round(1)
    q_df["–û—Å—Ç–∞–ª–æ—Å—å, ‚ÇΩ"] = (q_df["–ü–ª–∞–Ω, ‚ÇΩ"] - q_df["–§–∞–∫—Ç, ‚ÇΩ"]).round(0)

    m_df = pd.DataFrame({"–ú–µ—Å—è—Ü":range(1,13), "–ü–ª–∞–Ω, ‚ÇΩ":plan_m.values.round(0), "–§–∞–∫—Ç, ‚ÇΩ":fact_by_m.values.round(0)})
    m_df["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, %"] = (m_df["–§–∞–∫—Ç, ‚ÇΩ"]/m_df["–ü–ª–∞–Ω, ‚ÇΩ"]*100).replace([np.inf,np.nan],0).round(1)
    m_df["–û—Å—Ç–∞–ª–æ—Å—å, ‚ÇΩ"] = (m_df["–ü–ª–∞–Ω, ‚ÇΩ"] - m_df["–§–∞–∫—Ç, ‚ÇΩ"]).round(0)

    st.markdown("###### –ö–≤–∞—Ä—Ç–∞–ª—ã ‚Äî –ø–ª–∞–Ω/—Ñ–∞–∫—Ç")
    st.dataframe(q_df, use_container_width=True)
    st.markdown("###### –ú–µ—Å—è—Ü—ã ‚Äî –ø–ª–∞–Ω/—Ñ–∞–∫—Ç")
    st.dataframe(m_df, use_container_width=True)

    if px:
        st.markdown("###### –ì—Ä–∞—Ñ–∏–∫: –§–∞–∫—Ç vs –ü–ª–∞–Ω (–º–µ—Å—è—Ü—ã)")
        fig_plan = px.line(m_df, x="–ú–µ—Å—è—Ü", y="–§–∞–∫—Ç, ‚ÇΩ", markers=True)
        fig_plan.add_scatter(x=m_df["–ú–µ—Å—è—Ü"], y=m_df["–ü–ª–∞–Ω, ‚ÇΩ"], name="–ü–ª–∞–Ω", line=dict(dash="dash"))
        st.plotly_chart(fig_plan, use_container_width=True, key="plan_fact_months")

st.markdown("---")
st.caption("–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ v5.6 ‚Äî —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
