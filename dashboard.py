# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ (v3.2 ‚Äî –±–µ–ª–æ/–æ—Ä–∞–Ω–∂/—á—ë—Ä–Ω–∞—è —Ç–µ–º–∞, –ª–æ–≥–æ—Ç–∏–ø, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤, sales-only)
"""

import os
import time
import math
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import streamlit as st

try:
    import plotly.express as px
except Exception:
    px = None

# ------------------------
# UI
# ------------------------
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥", page_icon="üüß", layout="wide")

THEME_CSS = """
<style>
:root{ --brand:#ff7a00; --black:#0a0a0a; --border:#e9edf2; --muted:#6b7280; --good:#10b981; --bad:#ef4444; --warn:#f59e0b; }
html,body,[data-testid="stAppViewContainer"]{ background:#ffffff; color:var(--black); }
.block-container{ padding-top:.6rem; padding-bottom:1.2rem; }
.card{ background:#fff; border:1px solid var(--border); border-radius:14px; padding:16px 16px 10px; box-shadow:0 2px 12px rgba(0,0,0,.04); }
.title{ font-weight:700; font-size:18px; margin-bottom:6px; }
.subtle{ color:var(--muted); font-size:12px; }
.badge{ display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; border:1px solid var(--border); background:#fff; font-size:12px; margin-right:6px; margin-bottom:6px;}
.badge.good{ color:var(--good); border-color:rgba(16,185,129,.3); }
.badge.bad{ color:var(--bad); border-color:rgba(239,68,68,.3); }
.badge.warn{ color:var(--warn); border-color:rgba(245,158,11,.3); }
.kpi{ font-weight:800; font-size:28px; line-height:1; }
.kpi-caption{ color:var(--muted); font-size:12px; margin-top:-6px }
.pill{ display:inline-block; padding:8px 12px; border-radius:12px; background:rgba(255,122,0,.08); color:var(--brand); font-weight:800; border:1px solid rgba(255,122,0,.25); }
hr{ border:0; border-top:1px solid var(--border); margin:10px 0 8px }
div[data-testid="stMetricValue"]{ font-size:22px !important; }
.score{ width:64px;height:64px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;background:#fff;border:2px solid var(--border);font-weight:800;font-size:22px;margin-right:10px }
.grid2{ display:grid; grid-template-columns:1fr 1fr; gap:12px; }
.grid3{ display:grid; grid-template-columns:1fr 1fr 1fr; gap:12px; }
.headerbar{ display:flex; align-items:center; gap:16px; margin-bottom:8px; }
.headerbar img{ height:38px; }
</style>
"""
st.markdown(THEME_CSS, unsafe_allow_html=True)

# ------------------------
# –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (admin/admin123)
# ------------------------
def check_password():
    def password_entered():
        st.session_state["password_correct"] = (
            st.session_state.get("username") == "admin"
            and st.session_state.get("password") == "admin123"
        )
        st.session_state.pop("password", None)

    if st.secrets.get("DISABLE_AUTH", False):
        st.session_state["password_correct"] = True

    if not st.session_state.get("password_correct", False):
        st.markdown("### üîê –í—Ö–æ–¥ ‚Äî –ë–£–†–ú–ê–®")
        st.text_input("–õ–æ–≥–∏–Ω", key="username")
        st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="password", on_change=password_entered)
        st.stop()

check_password()
with st.sidebar:
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state["password_correct"] = False
        st.rerun()

# ------------------------
# –°–µ–∫—Ä–µ—Ç—ã / –æ–∫—Ä—É–∂–µ–Ω–∏–µ
# ------------------------
def get_secret(name, default=None):
    if name in st.secrets:
        return st.secrets[name]
    return os.getenv(name, default)

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
LOGO_PATH = "/mnt/data/burmash-logo-rgb-01.png"

# ------------------------
# Bitrix24 helpers
# ------------------------
def _bx_get(method, params=None, pause=0.4):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        import requests
        r = requests.get(url, params=params, timeout=30)
        data = r.json()
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        if not batch: break
        out.extend(batch)
        if len(batch) < 50: break
        start += 50
        time.sleep(pause)
    return out

@st.cache_data(ttl=300)
def bx_get_deals(date_from=None, date_to=None, limit=1000):
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID",
        "PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME","CATEGORY_ID"
    ]}
    if date_from: params["filter[>=DATE_CREATE]"] = date_from
    if date_to:   params["filter[<=DATE_CREATE]"] = date_to
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=300)
def bx_get_departments():
    try:
        return _bx_get("department.get", {})
    except Exception:
        return []

@st.cache_data(ttl=300)
def bx_get_users_full():
    users = _bx_get("user.get", {})
    out = {}
    for u in users:
        depts = u.get("UF_DEPARTMENT") or []
        if isinstance(depts, str):
            depts = [int(x) for x in depts.split(",") if x]
        out[int(u["ID"])] = {
            "name": ((u.get("NAME","")+" "+u.get("LAST_NAME","")).strip() or u.get("LOGIN","")).strip(),
            "depts": list(map(int, depts)) if depts else [],
            "active": (u.get("ACTIVE","Y")=="Y")
        }
    return out

@st.cache_data(ttl=300)
def bx_get_open_activities_for_deal_ids(deal_ids):
    out = {}
    if not deal_ids: return out
    for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
        params = {"filter[OWNER_TYPE_ID]":2,"filter[OWNER_ID]":",".join(map(str,chunk)),"filter[COMPLETED]":"N"}
        acts = _bx_get("crm.activity.list", params)
        for a in acts:
            out.setdefault(int(a["OWNER_ID"]), []).append(a)
    return out

# ---- –≠–¢–ê–ü–´/–°–¢–ê–¢–£–°–´: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è ----
@st.cache_data(ttl=600)
def bx_get_stage_map(stage_ids):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - sort_map: {STAGE_ID -> SORT:int}
    - name_map: {STAGE_ID -> NAME:str}
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ç—è–Ω—É—Ç—å crm.status.list –ø–æ –Ω—É–∂–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    sort_map, name_map = {}, {}

    if not BITRIX24_WEBHOOK or not stage_ids:
        return sort_map, name_map

    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É "C{ID}:"
    cats = set()
    for sid in stage_ids:
        if isinstance(sid, str) and sid.startswith("C"):
            try:
                cid = int(sid.split(":")[0][1:])
                cats.add(cid)
            except Exception:
                pass

    # –±–∞–∑–æ–≤–∞—è (–¥–µ—Ñ–æ–ª—Ç–Ω–∞—è) –≤–æ—Ä–æ–Ω–∫–∞
    try:
        base = _bx_get("crm.status.list", {"filter[ENTITY_ID]":"DEAL_STAGE"})
        for s in base:
            sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
            name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
    except Exception:
        pass

    # –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for cid in cats:
        try:
            resp = _bx_get("crm.status.list", {"filter[ENTITY_ID]": f"DEAL_STAGE_{cid}"})
            for s in resp:
                sort_map[s.get("STATUS_ID")] = int(s.get("SORT", 5000))
                name_map[s.get("STATUS_ID")] = s.get("NAME") or s.get("STATUS_ID")
        except Exception:
            continue

    return sort_map, name_map

# ------------------------
# –î–∞—Ç—ã/–ø–æ–¥—Å—á—ë—Ç—ã
# ------------------------
def to_dt(x):
    try:
        ts = pd.to_datetime(x, utc=True, errors="coerce")
        if pd.isna(ts): return pd.NaT
        return ts.tz_convert(None)
    except Exception:
        return pd.NaT

def days_between(later, earlier):
    a, b = to_dt(later), to_dt(earlier)
    if pd.isna(a) or pd.isna(b): return None
    return max(0, int((a - b) / pd.Timedelta(days=1)))

def compute_health_scores(df, open_tasks_map, stuck_days=5):
    now = to_dt(pd.Timestamp.utcnow())
    rows = []
    for _, r in df.iterrows():
        create_dt = to_dt(r.get("DATE_CREATE"))
        last = to_dt(r.get("LAST_ACTIVITY_TIME")) or to_dt(r.get("DATE_MODIFY")) or create_dt
        d_work  = days_between(now, create_dt) or 0
        d_noact = days_between(now, last) or 0
        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0

        flags = {
            "no_company": int(r.get("COMPANY_ID") or 0) == 0,
            "no_contact": int(r.get("CONTACT_ID") or 0) == 0,
            "no_tasks": not has_task,
            "stuck": d_noact >= stuck_days,
            "lost": str(r.get("STAGE_ID","")).upper().find("LOSE") >= 0
        }

        score = 100
        if flags["no_company"]: score -= 10
        if flags["no_contact"]: score -= 10
        if flags["no_tasks"]:   score -= 25
        if flags["stuck"]:      score -= 25
        if flags["lost"]:       score = min(score, 15)

        opp  = float(r.get("OPPORTUNITY") or 0.0)
        prob = float(r.get("PROBABILITY")  or 0.0)
        potential = min(100, int((opp > 0) * (30 + min(70, math.log10(max(1, opp))/5 * 70)) * (0.4 + prob/100*0.6)))

        rows.append({
            "ID": int(r["ID"]), "TITLE": r.get("TITLE",""),
            "ASSIGNED_BY_ID": int(r.get("ASSIGNED_BY_ID") or 0),
            "STAGE_ID": r.get("STAGE_ID",""),
            "CATEGORY_ID": r.get("CATEGORY_ID"),
            "OPPORTUNITY": opp, "PROBABILITY": prob,
            "DATE_CREATE": create_dt, "DATE_MODIFY": to_dt(r.get("DATE_MODIFY")), "LAST_ACTIVITY_TIME": last,
            "days_in_work": d_work, "days_no_activity": d_noact,
            "health": max(0, min(100, int(score))), "potential": max(0, min(100, int(potential))),
            "flag_no_company": flags["no_company"], "flag_no_contact": flags["no_contact"],
            "flag_no_tasks": flags["no_tasks"], "flag_stuck": flags["stuck"], "flag_lost": flags["lost"],
        })
    return pd.DataFrame(rows)

def deal_recommendations(row):
    recs = []
    if row["flag_lost"]:
        return ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –ø—Ä–∏ —à–∞–Ω—Å–µ ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –≤ —Ä–∞–±–æ—Ç—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞/—Ä–∞—Å—Å—Ä–æ—á–∫–∞)."]
    if row["flag_no_tasks"]:   recs.append("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–¥–∞—Ç–∞ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π).")
    if row["flag_stuck"]:      recs.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –∑–≤–æ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è + –ø–∏—Å—å–º–æ-—Ä–µ–∑—é–º–µ. –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∞–ø.")
    if row["flag_no_contact"]: recs.append("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –õ–ü–† (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω/email).")
    if row["flag_no_company"]: recs.append("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ (–ò–ù–ù, —Å–∞–π—Ç, –æ—Ç—Ä–∞—Å–ª—å).")
    if row["health"] < 60 and row["potential"] >= 50:
        recs.append("–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–∞–∑–Ω–∞—á—å—Ç–µ –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ, —É—Å–∫–æ—Ä—å—Ç–µ –ö–ü/–¢–ó.")
    if row["OPPORTUNITY"] > 0 and row["PROBABILITY"] < 40:
        recs.append("–ï—Å—Ç—å —Å—É–º–º–∞, –Ω–æ –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç/—Å—Ä–æ–∫–∏/–õ–ü–† –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.")
    if row["days_in_work"] > 20 and row["PROBABILITY"] < 30:
        recs.append("–î–æ–ª–≥–æ–µ –≤–µ–¥–µ–Ω–∏–µ ‚Äî –ø–æ–¥–Ω–∏–º–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω.")
    if not recs:
        recs.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ —ç—Ç–∞–ø—É: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.")
    return recs

def activity_series(row, points=60):
    end = to_dt(pd.Timestamp.utcnow())
    start = row["DATE_CREATE"] if pd.notna(row["DATE_CREATE"]) else end - pd.Timedelta(days=30)
    start = to_dt(start)
    if not pd.notna(start) or start >= end:
        start = end - pd.Timedelta(days=1)
    idx = pd.date_range(start, end, periods=max(2,int(points)))
    y = np.random.default_rng(int(row["ID"])).normal(0.1, 0.02, size=len(idx)).clip(0,1)
    near_start = np.argmin(np.abs(idx - start))
    last = row["LAST_ACTIVITY_TIME"] if pd.notna(row["LAST_ACTIVITY_TIME"]) else end
    near_last = np.argmin(np.abs(idx - to_dt(last)))
    for i in range(len(idx)):
        y[i] += 0.4 * math.exp(-abs(i-near_start)/6)
        y[i] += 0.8 * math.exp(-abs(i-near_last)/4)
    return pd.DataFrame({"ts": idx, "activity": y})

# ------------------------
# –°–∞–π–¥–±–∞—Ä: —Ñ–∏–ª—å—Ç—Ä—ã
# ------------------------
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
date_from  = st.sidebar.date_input("–° –∫–∞–∫–æ–π –¥–∞—Ç—ã", datetime.now().date() - timedelta(days=30))
date_to    = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É", datetime.now().date())
stuck_days = st.sidebar.slider("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚â• (–¥–Ω–µ–π)", 2, 21, 5)
limit      = st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (API)", 50, 3000, 600, step=50)

uploaded_offline = None
if not BITRIX24_WEBHOOK:
    st.sidebar.warning("–ù–µ—Ç BITRIX24_WEBHOOK ‚Äî –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV/XLSX).")
    uploaded_offline = st.sidebar.file_uploader("CSV/XLSX —Å–æ —Å–¥–µ–ª–∫–∞–º–∏", type=["csv","xlsx"])

# ------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ------------------------
with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ‚Ä¶"):
    if BITRIX24_WEBHOOK:
        deals_raw = bx_get_deals(str(date_from), str(date_to), limit=limit)
        if not deals_raw:
            st.error("–°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."); st.stop()
        df_raw = pd.DataFrame(deals_raw)
        df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw.get("OPPORTUNITY"), errors="coerce").fillna(0.0)

        users_full = bx_get_users_full()
        departments = bx_get_departments()
        # –æ—Ç–¥–µ–ª—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        sales_depts = [d for d in departments if "–ø—Ä–æ–¥–∞–∂" in (d.get("NAME","").lower())]
        sales_dept_ids = {int(d["ID"]) for d in sales_depts}
        # —Ñ–ª–∞–≥–∏ —Å–∞–π–¥–±–∞—Ä–∞
        default_sales_only = bool(sales_dept_ids)
        show_sales_only = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂", value=default_sales_only, disabled=not bool(users_full))
        selected_depts = st.sidebar.multiselect(
            "–û—Ç–¥–µ–ª—ã (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º)",
            options=[(int(d["ID"]), d["NAME"]) for d in departments],
            default=[(int(d["ID"]), d["NAME"]) for d in sales_depts],
            format_func=lambda t: t[1] if isinstance(t, tuple) else str(t)
        ) if departments else []
        selected_dept_ids = {t[0] for t in selected_depts} if selected_depts else sales_dept_ids

        users_map = {uid: users_full[uid]["name"] for uid in users_full}
        open_tasks_map = bx_get_open_activities_for_deal_ids(df_raw["ID"].tolist())

    else:
        if not uploaded_offline:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/XLSX —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏: ID, TITLE, STAGE_ID, OPPORTUNITY, ASSIGNED_BY_ID, COMPANY_ID, CONTACT_ID, PROBABILITY, DATE_CREATE, DATE_MODIFY, LAST_ACTIVITY_TIME.")
            st.stop()
        if uploaded_offline.name.lower().endswith(".csv"):
            df_raw = pd.read_csv(uploaded_offline)
        else:
            df_raw = pd.read_excel(uploaded_offline)
        df_raw.columns = [c.strip() for c in df_raw.columns]
        must = ["ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID","PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"]
        missing = [c for c in must if c not in df_raw.columns]
        if missing: st.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {missing}"); st.stop()
        df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw["OPPORTUNITY"], errors="coerce").fillna(0.0)
        users_map = {int(i): str(i) for i in pd.to_numeric(df_raw["ASSIGNED_BY_ID"], errors="coerce").fillna(0).astype(int).unique()}
        open_tasks_map = {}
        show_sales_only = False
        selected_dept_ids = set()
        users_full = {}

    # —Ä–∞—Å—á—ë—Ç –º–µ—Ç—Ä–∏–∫
    df_scores = compute_health_scores(df_raw, open_tasks_map, stuck_days=stuck_days)

    # —Ñ–∏–ª—å—Ç—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂
    if BITRIX24_WEBHOOK and show_sales_only and selected_dept_ids:
        keep_ids = [uid for uid, info in users_full.items() if set(info["depts"]) & selected_dept_ids]
        df_scores = df_scores[df_scores["ASSIGNED_BY_ID"].isin(keep_ids)]

    # –∫–∞—Ä—Ç–∞ —ç—Ç–∞–ø–æ–≤ (–ø–æ—Ä—è–¥–æ–∫/–∏–º–µ–Ω–∞)
    stage_ids = df_scores["STAGE_ID"].dropna().unique().tolist()
    sort_map, name_map = bx_get_stage_map(stage_ids)

    # –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å
    FALLBACK_ORDER = [
        "NEW","NEW_LEAD","PREPARATION","PREPAYMENT_INVOICE","EXECUTING","FINAL_INVOICE","WON","LOSE","LOSE_REASON"
    ]
    def fallback_sort(sid):
        sid = str(sid or "")
        # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "C*:" –µ—Å–ª–∏ –µ—Å—Ç—å
        if ":" in sid: sid_short = sid.split(":")[1]
        else: sid_short = sid
        if sid_short in FALLBACK_ORDER:
            return FALLBACK_ORDER.index(sid_short)*100
        # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è ‚Äî –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö
        return 10000 + hash(sid_short)%1000

    df_scores["stage_sort"] = df_scores["STAGE_ID"].map(lambda s: sort_map.get(str(s), fallback_sort(s)))
    df_scores["stage_name"] = df_scores["STAGE_ID"].map(lambda s: name_map.get(str(s), str(s)))

    df_scores["manager"] = df_scores["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

# –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
manager_options = sorted(df_scores["manager"].unique())
selected_managers = st.sidebar.multiselect("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", manager_options, default=[])
view_df = df_scores[df_scores["manager"].isin(selected_managers)] if selected_managers else df_scores.copy()

# ------------------------
# –®–∞–ø–∫–∞ + –ª–æ–≥–æ—Ç–∏–ø
# ------------------------
col_logo, col_title = st.columns([1,5], vertical_alignment="center")
with col_logo:
    try:
        st.image(LOGO_PATH, use_column_width=False)
    except Exception:
        st.markdown("<div class='pill'>–ë–£–†–ú–ê–®</div>", unsafe_allow_html=True)
with col_title:
    st.markdown("<div class='headerbar'><div class='pill'>–ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂</div></div>", unsafe_allow_html=True)
    st.caption("–ê–≤—Ç–æ–∞—É–¥–∏—Ç ¬∑ –ü—É–ª—å—Å –≤–æ—Ä–æ–Ω–∫–∏ ¬∑ –ó–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ¬∑ –ö–∞—Ä—Ç–æ—á–∫–∏ ¬∑ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ")

# –≤–µ—Ä—Ö–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
c1,c2,c3,c4,c5 = st.columns(5, gap="small")
with c1: st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", int(view_df.shape[0]))
with c2: st.metric("–û–±—ä—ë–º, ‚ÇΩ", f"{int(view_df['OPPORTUNITY'].sum()):,}".replace(","," "))
with c3: st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", f"{int(view_df['OPPORTUNITY'].replace(0,np.nan).mean() or 0):,}".replace(","," "))
with c4: st.metric("–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ", f"{view_df['health'].mean():.0f}%")
with c5: st.metric("–°—É–º–º–∞—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", int(view_df["potential"].sum()))

# ------------------------
# –í–∫–ª–∞–¥–∫–∏
# ------------------------
tab_pulse, tab_audit, tab_managers, tab_cards, tab_deal = st.tabs([
    "‚õµ –ü—É–ª—å—Å –≤–æ—Ä–æ–Ω–∫–∏", "üöß –ê—É–¥–∏—Ç", "üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏", "üìÑ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ"
])

# --- –ü–£–õ–¨–° –í–û–†–û–ù–ö–ò
with tab_pulse:
    st.markdown("##### –í–æ—Ä–æ–Ω–∫–∞ —ç—Ç–∞–ø–æ–≤ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)")
    if px is None:
        st.info("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        metric_kind = st.radio("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", ["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—É–º–º–∞, ‚ÇΩ"], horizontal=True, key="metric_kind")
        funnel_df = (
            view_df.groupby(["STAGE_ID","stage_name","stage_sort"])
            .agg(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID","count"), –°—É–º–º–∞=("OPPORTUNITY","sum"))
            .reset_index()
            .sort_values("stage_sort")
        )
        if metric_kind == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            fig = px.funnel(funnel_df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="stage_name", color_discrete_sequence=["#ff7a00"])
        else:
            fig = px.funnel(funnel_df, x="–°—É–º–º–∞", y="stage_name", color_discrete_sequence=["#ff7a00"])
        fig.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=420)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("##### –¢—Ä–µ–Ω–¥ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω–∏—è")
    if px:
        trend = view_df.copy()
        trend["date"] = pd.to_datetime(trend["DATE_CREATE"]).dt.date
        trend = trend.groupby("date").agg(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID","count"), –°—É–º–º–∞=("OPPORTUNITY","sum")).reset_index()
        tcol1, tcol2 = st.columns(2, gap="large")
        with tcol1:
            fig1 = px.line(trend, x="date", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", markers=True, color_discrete_sequence=["#ff7a00"])
            fig1.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=280)
            st.plotly_chart(fig1, use_container_width=True)
        with tcol2:
            fig2 = px.area(trend, x="date", y="–°—É–º–º–∞", color_discrete_sequence=["#111111"])
            fig2.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=280)
            st.plotly_chart(fig2, use_container_width=True)

    st.markdown("##### –õ–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)")
    st.dataframe(
        view_df.sort_values("DATE_MODIFY", ascending=False)[
            ["ID","TITLE","manager","stage_name","OPPORTUNITY","health","potential","DATE_MODIFY"]
        ].head(200),
        height=360
    )

# --- –ê–£–î–ò–¢
with tab_audit:
    st.markdown("##### –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã")
    kpis = {
        "–ë–µ–∑ –∑–∞–¥–∞—á": int(view_df["flag_no_tasks"].sum()),
        "–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": int(view_df["flag_no_contact"].sum()),
        "–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π": int(view_df["flag_no_company"].sum()),
        "–ó–∞—Å—Ç—Ä—è–ª–∏": int(view_df["flag_stuck"].sum()),
        "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ": int(view_df["flag_lost"].sum()),
    }
    a,b,c,d,e = st.columns(5)
    a.metric("–ë–µ–∑ –∑–∞–¥–∞—á", kpis["–ë–µ–∑ –∑–∞–¥–∞—á"])
    b.metric("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", kpis["–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    c.metric("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", kpis["–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π"])
    d.metric("–ó–∞—Å—Ç—Ä—è–ª–∏", kpis["–ó–∞—Å—Ç—Ä—è–ª–∏"])
    e.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", kpis["–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ"])

    if px:
        audit_df = pd.DataFrame({"–ü—Ä–æ–±–ª–µ–º–∞": list(kpis.keys()), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": list(kpis.values())}).sort_values("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", ascending=False)
        fig = px.bar(audit_df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", y="–ü—Ä–æ–±–ª–µ–º–∞", orientation="h",
                     color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color_continuous_scale=["#ffe8d6","#ff7a00"])
        fig.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=320)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("##### –°–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    cols = st.columns(5, gap="small")
    lists = [
        ("–ë–µ–∑ –∑–∞–¥–∞—á", view_df["flag_no_tasks"]),
        ("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", view_df["flag_no_contact"]),
        ("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", view_df["flag_no_company"]),
        ("–ó–∞—Å—Ç—Ä—è–ª–∏", view_df["flag_stuck"]),
        ("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", view_df["flag_lost"]),
    ]
    for (title, mask), holder in zip(lists, cols):
        with holder:
            st.markdown("<div class='card'><div class='title'>%s</div>" % title, unsafe_allow_html=True)
            st.dataframe(
                view_df[mask][["ID","TITLE","manager","stage_name","OPPORTUNITY","health","days_no_activity"]].head(80),
                height=260
            )
            st.markdown("</div>", unsafe_allow_html=True)

# --- –ú–ï–ù–ï–î–ñ–ï–†–´
with tab_managers:
    st.markdown("##### –ö–≤–∞–¥—Ä–∞–Ω—Ç: –∑–¥–æ—Ä–æ–≤—å–µ √ó –±–µ–∑ –∑–∞–¥–∞—á (—Ä–∞–∑–º–µ—Ä ‚Äî —Å—É–º–º–∞)")
    if px:
        quad = view_df.groupby("manager").agg(
            health_avg=("health","mean"),
            no_tasks=("flag_no_tasks","sum"),
            opp_sum=("OPPORTUNITY","sum"),
            deals=("ID","count")
        ).reset_index()
        fig = px.scatter(quad, x="health_avg", y="no_tasks", size="opp_sum",
                         hover_data=["deals","manager"], color="health_avg",
                         color_continuous_scale=["#ffe8d6","#ff7a00","#111111"])
        fig.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=420)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("##### –†–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é")
    if px:
        rating = view_df.groupby("manager").agg(health_avg=("health","mean"), deals=("ID","count")).reset_index()
        rating = rating.sort_values("health_avg", ascending=True)
        fig = px.bar(rating, x="health_avg", y="manager", orientation="h", text="deals",
                     color="health_avg", color_continuous_scale=["#ffe8d6","#ff7a00"])
        fig.update_traces(texttemplate="—Å–¥–µ–ª–æ–∫: %{text}", textposition="outside", cliponaxis=False)
        fig.update_layout(coloraxis_showscale=False, margin=dict(l=10,r=10,t=10,b=10), height=520)
        st.plotly_chart(fig, use_container_width=True)

# --- –ö–ê–†–¢–û–ß–ö–ò
with tab_cards:
    st.markdown("##### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ —Å–ª–∞–±—ã–µ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é)")
    pick = view_df.sort_values(["health","potential","OPPORTUNITY"], ascending=[True,False,False]).head(30)
    cols = st.columns(3, gap="medium")
    for i, (_, row) in enumerate(pick.iterrows()):
        with cols[i % 3]:
            badge_cls = "bad" if row["health"] < 60 else ("good" if row["health"]>=80 else "warn")
            risks_list = [k.replace("flag_","").replace("_"," ") for k in
                          ["flag_no_tasks","flag_no_company","flag_no_contact","flag_stuck"] if row[k]]
            recs = deal_recommendations(row)
            st.markdown(f"""
            <div class="card">
              <div class="title">{row['TITLE']}</div>
              <div class="subtle">ID {row['ID']} ‚Ä¢ {row['manager']}</div>
              <hr/>
              <span class="badge {badge_cls}">–ó–¥–æ—Ä–æ–≤—å–µ: <b>{row['health']}%</b></span>
              <span class="badge">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: <b>{row['potential']}%</b></span>
              <span class="badge">–°—É–º–º–∞: <b>{int(row['OPPORTUNITY']):,} ‚ÇΩ</b></span>
              <span class="badge">–≠—Ç–∞–ø: <b>{row['stage_name']}</b></span>
              <span class="badge">–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ: <b>{row['days_in_work']}</b></span>
              <span class="badge">–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <b>{row['days_no_activity']} –¥–Ω</b></span>
              <hr/>
              <div class="subtle">‚ö†Ô∏è –†–∏—Å–∫–∏: {", ".join(risks_list) or "–Ω–µ—Ç"}</div>
              <div class="subtle">‚úÖ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:<br/>‚Ä¢ {"<br/>‚Ä¢ ".join(recs)}</div>
            </div>
            """, unsafe_allow_html=True)

# --- –û–¢–ß–Å–¢ –ü–û –°–î–ï–õ–ö–ï
with tab_deal:
    st.markdown("##### –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
    options = view_df.sort_values("DATE_MODIFY", ascending=False)
    if options.empty:
        st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º."); st.stop()
    label_map = {int(r.ID): f"[{int(r.ID)}] {r.TITLE} ‚Äî {r.manager}" for r in options[["ID","TITLE","manager"]].itertuples(index=False)}
    chosen_id = st.selectbox("–°–¥–µ–ª–∫–∞", list(label_map.keys()), format_func=lambda x: label_map[x])
    deal = view_df[view_df["ID"]==chosen_id].iloc[0]

    # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
    a,b,c,d = st.columns([1.4,1,1,1], vertical_alignment="center")
    with a:
        st.markdown(f"<div class='title'>{deal['TITLE']}</div>", unsafe_allow_html=True)
        st.caption(f"–ö–æ–º–ø–∞–Ω–∏—è: –ë–£–†–ú–ê–® ‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {deal['manager']} ‚Ä¢ –≠—Ç–∞–ø: {deal['stage_name']}")
    with b: st.markdown(f"<div class='score'>{deal['potential']}</div><div class='kpi-caption'>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</div>", unsafe_allow_html=True)
    with c: st.markdown(f"<div class='score'>{deal['health']}</div><div class='kpi-caption'>–ó–¥–æ—Ä–æ–≤—å–µ</div>", unsafe_allow_html=True)
    with d: st.markdown(f"<div class='kpi'>{int(deal['OPPORTUNITY'])}</div><div class='kpi-caption'>–°—É–º–º–∞, ‚ÇΩ</div>", unsafe_allow_html=True)

    # –∫–∞—Ä—Ç–æ—á–∫–∏
    left, right = st.columns(2, gap="large")
    with left:
        st.markdown("<div class='title'>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</div>", unsafe_allow_html=True)
        st.markdown(f"""
        <div class="grid2">
          <div class="card"><div class="title">–°—É–º–º–∞</div><div class="kpi">{int(deal['OPPORTUNITY'])}</div><div class="kpi-caption">–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {int(deal['PROBABILITY'])}%</div></div>
          <div class="card"><div class="title">–°—Ä–æ–∫–∏</div><div class="kpi">{deal['days_in_work']}</div><div class="kpi-caption">–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {deal['days_no_activity']} –¥–Ω</div></div>
        </div>
        """, unsafe_allow_html=True)

        fin = ("–ë—é–¥–∂–µ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Å—É–º–º–∞ –≤ —Å–¥–µ–ª–∫–µ = 0." if deal["OPPORTUNITY"]<=0
               else ("–ë—é–¥–∂–µ—Ç –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –õ–ü–† –∏ –ö–ü."
                     if deal["PROBABILITY"]<40 else
                     "–ë—é–¥–∂–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π."))
        lpr = "–ö–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å" if not deal["flag_no_contact"] else "–õ–ü–† –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –§–ò–û –∏ —Ä–æ–ª—å."
        need = "–ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω; —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏ —Å—Ä–æ–∫–∏." if deal["PROBABILITY"]>=30 else "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        timebox = ("–ù–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–∞." if deal["flag_no_tasks"]
                   else ("–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∞–ø." if deal["flag_stuck"]
                         else "–°—Ä–æ–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è –∑–∞–¥–∞—á–∞–º–∏."))
        main_task = "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ö–ü" if deal["PROBABILITY"]<50 else "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä/—Å—á—ë—Ç"

        st.markdown(f"""
        <div class="grid2">
          <div class="card"><div class="title">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</div><div class="subtle">{fin}</div></div>
          <div class="card"><div class="title">–ü–æ–ª–Ω–æ–º–æ—á–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è</div><div class="subtle">{lpr}</div></div>
        </div>
        <div class="grid2">
          <div class="card"><div class="title">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ –Ω–∞—à —Ñ–æ–∫—É—Å</div><div class="subtle">{need}</div></div>
          <div class="card"><div class="title">–°—Ä–æ–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</div><div class="subtle">{timebox}</div></div>
        </div>
        <div class="card"><div class="title">–ó–∞–¥–∞—á–∞</div><div class="subtle">–ú–µ–Ω–µ–¥–∂–µ—Ä—É: {main_task}.</div></div>
        """, unsafe_allow_html=True)

    with right:
        st.markdown("<div class='title'>–î–∏–Ω–∞–º–∏–∫–∞ –∏ –∏—Ç–æ–≥</div>", unsafe_allow_html=True)
        if px:
            line = activity_series(deal)
            fig = px.line(line, x="ts", y="activity", markers=True, color_discrete_sequence=["#ff7a00"])
            fig.update_yaxes(visible=False)
            fig.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=240)
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.plotly_chart(fig, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)

        risks_list = [name for name,flag in {
            "–±–µ–∑ –∑–∞–¥–∞—á": deal["flag_no_tasks"], "–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": deal["flag_no_contact"],
            "–±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏": deal["flag_no_company"], "–∑–∞—Å—Ç—Ä—è–ª–∞": deal["flag_stuck"]
        }.items() if flag]
        st.markdown(f"""
        <div class="card"><div class="title">–ò—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã</div>
        <div class="subtle">–≠—Ç–∞–ø: {deal['stage_name'] or '‚Äî'}. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {str(deal['LAST_ACTIVITY_TIME'])[:19]}.<br/>
        –†–∏—Å–∫–∏: {", ".join(risks_list) if risks_list else "—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"}.</div></div>
        """, unsafe_allow_html=True)
        recs = deal_recommendations(deal)
        st.markdown(f"<div class='card'><div class='title'>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</div><div class='subtle'>‚Ä¢ {'<br/>‚Ä¢ '.join(recs)}</div></div>", unsafe_allow_html=True)
