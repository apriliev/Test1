# -*- coding: utf-8 -*-
"""
–ë–£–†–ú–ê–® CRM Dashboard (Streamlit, v2.2 ‚Äî —Ñ–∏–∫—Å –¥–∞—Ç, –±—Ä–µ–Ω–¥ –ë–£–†–ú–ê–®, –ø–∞—Ä–æ–ª—å admin123)
- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
- –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ (–∫–∞–∫ –≤ –ë–£–†–ú–ê–®) + rule-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –≠–∫—Å–ø–æ—Ä—Ç: ZIP —Å CSV (–±–µ–∑ Excel)
"""

import os
import json
import time
from datetime import datetime, timedelta
from io import BytesIO
import zipfile
import math

import numpy as np
import pandas as pd
import streamlit as st

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
try:
    import plotly.express as px
except Exception:
    px = None

# ==== UI ====
st.set_page_config(page_title="–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥", page_icon="üìà", layout="wide")
st.markdown("""
<style>
:root { --brand:#6C5CE7; --bad:#ff4d4f; --good:#22c55e; --warn:#f59e0b; }
.block-container { padding-top:.8rem; padding-bottom:1.2rem; }
.rubi-card { border-radius:18px; padding:18px 18px 12px; background:#111418; border:1px solid #222; box-shadow:0 4px 18px rgba(0,0,0,.25); }
.rubi-title { font-weight:700; font-size:18px; margin-bottom:6px; }
.rubi-chip { display:inline-flex; align-items:center; gap:6px; padding:4px 10px; border-radius:999px; border:1px solid #2a2f36; background:#0e1216; font-size:12px; margin-right:6px; margin-bottom:6px;}
.rubi-good { color: var(--good) !important; }
.rubi-bad  { color: var(--bad) !important; }
.rubi-warn { color: var(--warn) !important; }
.small { opacity:.8; font-size:12px; }
hr { border:0; border-top:1px solid #222; margin:10px 0 6px }
div[data-testid="stMetricValue"] { font-size:22px !important; }
.kpi-number { font-weight:800; font-size:28px; }
.kpi-caption { color:#a8b3bf; font-size:12px; margin-top:-6px }
.score-circle { width:64px;height:64px;border-radius:50%;display:inline-flex;align-items:center;justify-content:center;background:#0f141a;border:1px solid #2b3139;font-weight:800;font-size:22px;margin-right:10px}
.grid-3 { display:grid; grid-template-columns:1fr 1fr 1fr; gap:12px; }
.grid-2 { display:grid; grid-template-columns:1fr 1fr; gap:12px; }
</style>
""", unsafe_allow_html=True)

# ==== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø (admin / admin123) ====
def check_password():
    def password_entered():
        ok_user = st.session_state.get("username") in {"admin"}
        ok_pass = (st.session_state.get("password","") == "admin123")
        st.session_state["password_correct"] = bool(ok_user and ok_pass)
        st.session_state.pop("password", None)

    if st.secrets.get("DISABLE_AUTH", False):
        st.session_state["password_correct"] = True

    if "password_correct" not in st.session_state or not st.session_state["password_correct"]:
        st.markdown("### üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.text_input("–õ–æ–≥–∏–Ω", key="username")
        st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="password", on_change=password_entered)
        st.stop()

check_password()
with st.sidebar:
    if st.button("–í—ã–π—Ç–∏"):
        st.session_state["password_correct"] = False
        st.rerun()

# ==== –°–ï–ö–†–ï–¢–´ / –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====
def get_secret(name, default=None):
    if name in st.secrets:
        return st.secrets[name]
    return os.getenv(name, default)

BITRIX24_WEBHOOK = (get_secret("BITRIX24_WEBHOOK", "") or "").strip()
COMPANY_NAME = "–ë–£–†–ú–ê–®"

# ==== Bitrix24 helpers (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ====
def _bx_get(method, params=None, pause=0.4):
    url = BITRIX24_WEBHOOK.rstrip("/") + f"/{method}.json"
    out, start = [], 0
    params = dict(params or {})
    while True:
        params["start"] = start
        import requests
        r = requests.get(url, params=params, timeout=30)
        data = r.json()
        res = data.get("result")
        batch = (res.get("items", []) if isinstance(res, dict) and "items" in res else res) or []
        if not batch:
            break
        out.extend(batch)
        if len(batch) < 50:
            break
        start += 50
        time.sleep(pause)
    return out

@st.cache_data(ttl=300, show_spinner=False)
def bx_get_deals(date_from=None, date_to=None, limit=1000):
    params = {"select[]":[
        "ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID",
        "COMPANY_ID","CONTACT_ID","PROBABILITY",
        "DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"
    ]}
    if date_from: params["filter[>=DATE_CREATE]"] = date_from
    if date_to:   params["filter[<=DATE_CREATE]"] = date_to
    deals = _bx_get("crm.deal.list", params)
    return deals[:limit]

@st.cache_data(ttl=300, show_spinner=False)
def bx_get_users():
    users = _bx_get("user.get", {})
    return {int(u["ID"]): (u.get("NAME","")+ " " + u.get("LAST_NAME","")).strip() or u.get("LOGIN", "") for u in users}

@st.cache_data(ttl=300, show_spinner=False)
def bx_get_open_activities_for_deal_ids(deal_ids):
    out = {}
    if not deal_ids:
        return out
    for chunk in np.array_split(list(map(int, deal_ids)), max(1, len(deal_ids)//40 + 1)):
        params = {"filter[OWNER_TYPE_ID]":2,"filter[OWNER_ID]":",".join(map(str,chunk)),"filter[COMPLETED]":"N"}
        acts = _bx_get("crm.activity.list", params)
        for a in acts:
            out.setdefault(int(a["OWNER_ID"]), []).append(a)
    return out

# ==== –î–∞—Ç—ã: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∏ —Ä–∞–∑–Ω–∏—Ü–∞ ====
def to_dt(x):
    """–í –ª—é–±–æ–π –≤—Ö–æ–¥: –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∞–∏–≤–Ω–æ–º—É UTC Timestamp (–±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã)."""
    try:
        ts = pd.to_datetime(x, utc=True, errors="coerce")
        if pd.isna(ts): return pd.NaT
        # —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∏–≤–Ω—ã–º
        return ts.tz_convert(None)
    except Exception:
        return pd.NaT

def days_between(later, earlier):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª—ã–µ –¥–Ω–∏ –º–µ–∂–¥—É –º–æ–º–µ–Ω—Ç–∞–º–∏ (>=0), –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è NaT/tz."""
    a = to_dt(later)
    b = to_dt(earlier)
    if pd.isna(a) or pd.isna(b):
        return None
    delta = a - b  # Timedelta
    try:
        return int(delta / pd.Timedelta(days=1))
    except Exception:
        try:
            return int(delta.days)
        except Exception:
            return None

# ==== –°—á—ë—Ç—á–∏–∫–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ç–µ–∫—Å—Ç—ã ====
def compute_health_scores(df, open_tasks_map, stuck_days=5):
    now = to_dt(pd.Timestamp.utcnow())
    rows = []
    for _, r in df.iterrows():
        create_dt = to_dt(r.get("DATE_CREATE"))
        last = to_dt(r.get("LAST_ACTIVITY_TIME")) or to_dt(r.get("DATE_MODIFY")) or create_dt
        d_work = days_between(now, create_dt) or 0
        d_noact = days_between(now, last) or 0
        has_task = len(open_tasks_map.get(int(r["ID"]), [])) > 0

        flags = {
            "no_company": int(r.get("COMPANY_ID") or 0) == 0,
            "no_contact": int(r.get("CONTACT_ID") or 0) == 0,
            "no_tasks": not has_task,
            "stuck": (d_noact >= stuck_days),
            "lost": str(r.get("STAGE_ID","")).upper().find("LOSE") >= 0
        }

        score = 100
        if flags["no_company"]: score -= 10
        if flags["no_contact"]: score -= 10
        if flags["no_tasks"]:   score -= 25
        if flags["stuck"]:      score -= 25
        if flags["lost"]:       score = min(score, 15)

        opp = float(r.get("OPPORTUNITY") or 0.0)
        prob = float(r.get("PROBABILITY") or 0.0)
        potential = min(100, int((opp > 0) * (30 + min(70, math.log10(max(1, opp))/5 * 70)) * (0.4 + prob/100*0.6)))

        rows.append({
            "ID": int(r["ID"]),
            "TITLE": r.get("TITLE",""),
            "ASSIGNED_BY_ID": int(r.get("ASSIGNED_BY_ID") or 0),
            "STAGE_ID": r.get("STAGE_ID",""),
            "OPPORTUNITY": opp,
            "PROBABILITY": prob,
            "DATE_CREATE": create_dt,
            "DATE_MODIFY": to_dt(r.get("DATE_MODIFY")),
            "LAST_ACTIVITY_TIME": last,
            "days_in_work": max(0, d_work),
            "days_no_activity": max(0, d_noact),
            "health": max(0, min(100, int(score))),
            "potential": max(0, min(100, int(potential))),
            "flag_no_company": flags["no_company"],
            "flag_no_contact": flags["no_contact"],
            "flag_no_tasks": flags["no_tasks"],
            "flag_stuck": flags["stuck"],
            "flag_lost": flags["lost"],
        })
    return pd.DataFrame(rows)

def split_green_red(df_scores):
    grp = df_scores.groupby("ASSIGNED_BY_ID").agg(
        deals=("ID","count"),
        health_avg=("health","mean"),
        potential_sum=("potential","sum"),
        opp_sum=("OPPORTUNITY","sum"),
        no_tasks=("flag_no_tasks","sum"),
        stuck=("flag_stuck","sum"),
        lost=("flag_lost","sum"),
    ).reset_index()
    grp["zone"] = np.where((grp["health_avg"]>=70) & (grp["no_tasks"]<=2) & (grp["stuck"]<=2), "green", "red")
    return grp

def deal_recommendations(row):
    recs = []
    if row["flag_lost"]:
        recs.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –∏ –≤–µ—Ä–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É –≤ —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —à–∞–Ω—Å–∞: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É/—Ä–∞—Å—Å—Ä–æ—á–∫—É.")
        return recs
    if row["flag_no_tasks"]:
        recs.append("–ü–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–¥–∞—Ç–∞ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π).")
    if row["flag_stuck"]:
        recs.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –∑–≤–æ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è + –ø–∏—Å—å–º–æ-—Ä–µ–∑—é–º–µ. –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∞–ø.")
    if row["flag_no_contact"]:
        recs.append("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –õ–ü–† (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω/email).")
    if row["flag_no_company"]:
        recs.append("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ (–ò–ù–ù, —Å–∞–π—Ç, –æ—Ç—Ä–∞—Å–ª—å).")
    if row["health"] < 60 and row["potential"] >= 50:
        recs.append("–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî –Ω–∞–∑–Ω–∞—á—å—Ç–µ –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ –∏ —É—Å–∫–æ—Ä—å—Ç–µ –ö–ü/–¢–ó.")
    if row["OPPORTUNITY"] > 0 and row["PROBABILITY"] < 40:
        recs.append("–ï—Å—Ç—å —Å—É–º–º–∞, –Ω–æ –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å ‚Äî —É—Ç–æ—á–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç/—Å—Ä–æ–∫–∏/–õ–ü–† –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.")
    if row["days_in_work"] > 20 and row["PROBABILITY"] < 30:
        recs.append("–î–æ–ª–≥–æ–µ –≤–µ–¥–µ–Ω–∏–µ ‚Äî –ø–æ–¥–Ω–∏–º–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω.")
    if not recs:
        recs.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ —ç—Ç–∞–ø—É: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.")
    return recs

def comm_scores(row):
    contact = 30 + (0 if row["flag_no_contact"] else 30) + (0 if row["flag_no_company"] else 10) + (10 if not row["flag_stuck"] else 0)
    need = 30 + (20 if not row["flag_no_tasks"] else 0) + (10 if row["OPPORTUNITY"]>0 else 0) + (0 if row["flag_stuck"] else 10)
    present = 20 + int(row["PROBABILITY"]/2) + (10 if row["potential"]>50 else 0)
    struct = 30 + (20 if not row["flag_no_tasks"] else 0) + (10 if row["days_no_activity"]<=2 else 0)
    close = 20 + int(row["PROBABILITY"]) + (10 if row["OPPORTUNITY"]>0 else 0) - (10 if row["flag_stuck"] else 0)
    return {
        "–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞": int(np.clip(contact, 0, 100)),
        "–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏": int(np.clip(need, 0, 100)),
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è": int(np.clip(present, 0, 100)),
        "–í–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞": int(np.clip(struct, 0, 100)),
        "–ó–∞–∫—Ä—ã—Ç–∏–µ –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è": int(np.clip(close, 0, 100)),
    }

def report_texts(row):
    if row["OPPORTUNITY"] <= 0:
        fin = "–ë—é–¥–∂–µ—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Å—É–º–º–∞ –≤ —Å–¥–µ–ª–∫–µ = 0."
    elif row["PROBABILITY"] < 40:
        fin = "–ë—é–¥–∂–µ—Ç –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –õ–ü–† –∏ –ö–ü."
    else:
        fin = "–ë—é–¥–∂–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π."
    lpr = "–ö–æ–Ω—Ç–∞–∫—Ç –µ—Å—Ç—å" if not row["flag_no_contact"] else "–õ–ü–† –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –§–ò–û –∏ —Ä–æ–ª—å."
    need = "–ò–Ω—Ç–µ—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, —É—Ç–æ—á–Ω–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –∏ —Å—Ä–æ–∫–∏." if row["PROBABILITY"]>=30 else "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    if row["flag_no_tasks"]:
        timebox = "–ù–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç–∞."
    elif row["flag_stuck"]:
        timebox = "–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∞–ø."
    else:
        timebox = "–°—Ä–æ–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è –∑–∞–¥–∞—á–∞–º–∏."
    main_task = "–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É/–¥–µ–º–æ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –ö–ü" if row["PROBABILITY"]<50 else "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä/—Å—á—ë—Ç"
    return fin, lpr, need, timebox, main_task

def activity_series(row, points=60):
    end = to_dt(pd.Timestamp.utcnow())
    start = row["DATE_CREATE"]
    if pd.isna(start):
        start = end - pd.Timedelta(days=30)
    start = to_dt(start)
    if not pd.notna(start) or start >= end:
        start = end - pd.Timedelta(days=1)
    points = max(2, int(points))
    idx = pd.date_range(start, end, periods=points)
    y = np.random.default_rng(int(row["ID"])).normal(0.1, 0.02, size=points).clip(0,1)
    near_start = np.argmin(np.abs(idx - start))
    last = row["LAST_ACTIVITY_TIME"] if pd.notna(row["LAST_ACTIVITY_TIME"]) else end
    near_last = np.argmin(np.abs(idx - to_dt(last)))
    for i in range(points):
        y[i] += 0.4 * math.exp(-abs(i-near_start)/6)
        y[i] += 0.8 * math.exp(-abs(i-near_last)/4)
    return pd.DataFrame({"ts": idx, "activity": y})

# ==== –§–∏–ª—å—Ç—Ä—ã (–±–µ–∑ –ø–æ–ª—è "–ö–æ–º–ø–∞–Ω–∏—è") ====
st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
date_from = st.sidebar.date_input("–° –∫–∞–∫–æ–π –¥–∞—Ç—ã", datetime.now().date() - timedelta(days=30))
date_to   = st.sidebar.date_input("–ü–æ –∫–∞–∫—É—é –¥–∞—Ç—É", datetime.now().date())
stuck_days = st.sidebar.slider("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚â• (–¥–Ω–µ–π)", 2, 21, 5)
limit = st.sidebar.slider("–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ (API)", 50, 3000, 600, step=50)

uploaded_offline = None
if not BITRIX24_WEBHOOK:
    st.sidebar.warning("BITRIX24_WEBHOOK –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV/XLSX).")
    uploaded_offline = st.sidebar.file_uploader("CSV/XLSX —Å–æ —Å–¥–µ–ª–∫–∞–º–∏", type=["csv","xlsx"])

# ==== –î–∞–Ω–Ω—ã–µ ====
with st.spinner("–ì–æ—Ç–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ‚Ä¶"):
    if BITRIX24_WEBHOOK:
        deals_raw = bx_get_deals(str(date_from), str(date_to), limit=limit)
        if not deals_raw:
            st.error("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (Bitrix24)."); st.stop()
        df_raw = pd.DataFrame(deals_raw)
        df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw.get("OPPORTUNITY"), errors="coerce").fillna(0.0)
        users_map = bx_get_users()
        open_tasks_map = bx_get_open_activities_for_deal_ids(df_raw["ID"].tolist())
    else:
        if not uploaded_offline:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/XLSX: ID,TITLE,STAGE_ID,OPPORTUNITY,ASSIGNED_BY_ID,COMPANY_ID,CONTACT_ID,PROBABILITY,DATE_CREATE,DATE_MODIFY,LAST_ACTIVITY_TIME.")
            st.stop()
        if uploaded_offline.name.lower().endswith(".csv"):
            df_raw = pd.read_csv(uploaded_offline)
        else:
            df_raw = pd.read_excel(uploaded_offline)
        df_raw.columns = [c.strip() for c in df_raw.columns]
        must = ["ID","TITLE","STAGE_ID","OPPORTUNITY","ASSIGNED_BY_ID","COMPANY_ID","CONTACT_ID","PROBABILITY","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"]
        missing = [c for c in must if c not in df_raw.columns]
        if missing: st.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {missing}"); st.stop()
        df_raw["OPPORTUNITY"] = pd.to_numeric(df_raw["OPPORTUNITY"], errors="coerce").fillna(0.0)
        users_map = {int(i): str(i) for i in pd.to_numeric(df_raw["ASSIGNED_BY_ID"], errors="coerce").fillna(0).astype(int).unique()}
        if "manager" in df_raw.columns:
            for aid, name in df_raw[["ASSIGNED_BY_ID","manager"]].dropna().values:
                try: users_map[int(aid)] = str(name)
                except: pass
        open_tasks_map = {}  # –æ—Ñ–ª–∞–π–Ω ‚Äî –∑–∞–¥–∞—á –Ω–µ –∑–Ω–∞–µ–º

    df_scores = compute_health_scores(df_raw, open_tasks_map, stuck_days=stuck_days)
    df_scores["manager"] = df_scores["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

manager_options = sorted(df_scores["manager"].unique())
selected_managers = st.sidebar.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º", manager_options, default=[])
view_df = df_scores[df_scores["manager"].isin(selected_managers)] if selected_managers else df_scores.copy()
mgr = split_green_red(view_df)

# ==== –ú–µ—Ç—Ä–∏–∫–∏ ====
st.title("–ë–£–†–ú–ê–® ¬∑ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂")
st.caption("–ê–≤—Ç–æ–∞—É–¥–∏—Ç ‚Ä¢ –ü—É–ª—å—Å ‚Ä¢ –ó–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∏ ‚Ä¢ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç CSV")

c1,c2,c3,c4,c5 = st.columns(5, gap="small")
with c1: st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", int(view_df.shape[0]))
with c2: st.metric("–û–±—ä—ë–º, ‚ÇΩ", f"{int(view_df['OPPORTUNITY'].sum()):,}".replace(","," "))
with c3: st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫, ‚ÇΩ", f"{int(view_df['OPPORTUNITY'].replace(0,np.nan).mean() or 0):,}".replace(","," "))
with c4: st.metric("–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ", f"{view_df['health'].mean():.0f}%")
with c5: st.metric("–°—É–º–º–∞—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", int(view_df["potential"].sum()))

# ==== –í–∫–ª–∞–¥–∫–∏ ====
tab_pulse, tab_audit, tab_managers, tab_cards, tab_deal, tab_export = st.tabs([
    "‚õµ –ü—É–ª—å—Å —Å–¥–µ–ª–æ–∫", "üöÅ –ê—É–¥–∏—Ç –≤–æ—Ä–æ–Ω–∫–∏", "üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã", "üóÇ –ö–∞—Ä—Ç–æ—á–∫–∏", "üìÑ –û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ", "‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç (CSV)"
])

# --- –ü–£–õ–¨–°
with tab_pulse:
    if px is None:
        st.warning("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    else:
        a,b = st.columns([3,2], gap="large")
        with a:
            st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º")
            stage_df = view_df.groupby("STAGE_ID").agg(–°—É–º–º–∞=("OPPORTUNITY","sum"), –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID","count")).reset_index()
            fig = px.bar(stage_df, x="STAGE_ID", y="–°—É–º–º–∞", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            st.plotly_chart(fig, use_container_width=True)
        with b:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è")
            fig2 = px.histogram(view_df, x="health", nbins=20)
            st.plotly_chart(fig2, use_container_width=True)

    st.subheader("–õ–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)")
    st.dataframe(
        view_df.sort_values("DATE_MODIFY", ascending=False)[
            ["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","health","potential","DATE_MODIFY"]
        ].head(200),
        height=360
    )

# --- –ê–£–î–ò–¢
with tab_audit:
    st.subheader("–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã (–ø–æ —Ñ–∏–ª—å—Ç—Ä—É)")
    kpis = {
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á": int((~view_df["ID"].isin(open_tasks_map.keys())).sum()),
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤": int(view_df["flag_no_contact"].sum()),
        "–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π": int(view_df["flag_no_company"].sum()),
        "–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏": int(view_df["flag_stuck"].sum()),
        "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏": int(view_df["flag_lost"].sum()),
    }
    a,b,c,d,e = st.columns(5)
    a.metric("–ë–µ–∑ –∑–∞–¥–∞—á", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∑–∞–¥–∞—á"])
    b.metric("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"])
    c.metric("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", kpis["–°–¥–µ–ª–æ–∫ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π"])
    d.metric("–ó–∞—Å—Ç—Ä—è–ª–∏", kpis["–ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–¥–µ–ª–∫–∏"])
    e.metric("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", kpis["–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏"])

    st.markdown("##### –°–ø–∏—Å–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    cols = st.columns(5, gap="small")
    lists = [
        ("–ë–µ–∑ –∑–∞–¥–∞—á", ~view_df["ID"].isin(open_tasks_map.keys())),
        ("–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", view_df["flag_no_contact"]),
        ("–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π", view_df["flag_no_company"]),
        ("–ó–∞—Å—Ç—Ä—è–ª–∏", view_df["flag_stuck"]),
        ("–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ", view_df["flag_lost"]),
    ]
    for (title, mask), holder in zip(lists, cols):
        with holder:
            st.markdown(f'<div class="rubi-card"><div class="rubi-title">{title}</div>', unsafe_allow_html=True)
            st.dataframe(
                view_df[mask][["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","health","days_no_activity"]].head(80),
                height=260
            )
            st.markdown("</div>", unsafe_allow_html=True)

# --- –ú–ï–ù–ï–î–ñ–ï–†–´
with tab_managers:
    st.subheader("–ó–µ–ª—ë–Ω–∞—è / –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω—ã –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º (–ø–æ —Ñ–∏–ª—å—Ç—Ä—É)")
    mgr = split_green_red(view_df)
    mgr["manager"] = mgr["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    left, right = st.columns([1.5,1], gap="large")
    with left:
        if px is None:
            st.info("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        else:
            fig = px.scatter(
                mgr, x="health_avg", y="no_tasks", size="opp_sum", color="zone",
                hover_data=["manager","deals","stuck","lost","potential_sum"],
                labels={"health_avg":"–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ","no_tasks":"–ë–µ–∑ –∑–∞–¥–∞—á (—à—Ç)"}
            )
            st.plotly_chart(fig, use_container_width=True)

        st.markdown("**–¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**")
        st.dataframe(
            mgr[["manager","deals","opp_sum","health_avg","no_tasks","stuck","lost","zone"]]
            .sort_values(["zone","health_avg"], ascending=[True,False]),
            height=380
        )
    with right:
        st.markdown("**–õ–∏–¥–µ—Ä—ã –∏ —Ä–∏—Å–∫–æ–≤—ã–µ**")
        agg = view_df.groupby("manager").agg(
            deals=("ID","count"),
            health_avg=("health","mean"),
            opp=("OPPORTUNITY","sum"),
            stuck=("flag_stuck","sum"),
            no_tasks=("flag_no_tasks","sum"),
            lost=("flag_lost","sum"),
        ).reset_index()
        st.markdown("–ó–µ–ª—ë–Ω–∞—è –∑–æ–Ω–∞")
        st.dataframe(agg.query("health_avg>=70").sort_values("health_avg", ascending=False).head(10), height=180)
        st.markdown("–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞")
        st.dataframe(agg.query("health_avg<70 or no_tasks>2 or stuck>2")
                     .sort_values(["health_avg","no_tasks","stuck"], ascending=[True,False,False]).head(10), height=180)

# --- –ö–ê–†–¢–û–ß–ö–ò
with tab_cards:
    st.subheader("–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–æ–∫ —Å –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π")
    pick = view_df.sort_values(["health","potential","OPPORTUNITY"], ascending=[True,False,False]).head(30)
    grid_cols = st.columns(3, gap="medium")
    for i, (_, row) in enumerate(pick.iterrows()):
        with grid_cols[i % 3]:
            status = "rubi-bad" if row["health"] < 60 else ("rubi-good" if row["health"]>=80 else "rubi-warn")
            risks_list = [k.replace("flag_","").replace("_"," ") for k in
                          ["flag_no_tasks","flag_no_company","flag_no_contact","flag_stuck"] if row[k]]
            recs = deal_recommendations(row)
            st.markdown(f"""
            <div class="rubi-card">
              <div class="rubi-title">{row['TITLE']}</div>
              <div class="small">ID {row['ID']} ‚Ä¢ {row['manager']}</div>
              <hr/>
              <div class="rubi-chip {status}">–ó–¥–æ—Ä–æ–≤—å–µ: <b>{row['health']}%</b></div>
              <div class="rubi-chip">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: <b>{row['potential']}%</b></div>
              <div class="rubi-chip">–°—É–º–º–∞: <b>{int(row['OPPORTUNITY']):,} ‚ÇΩ</b></div>
              <div class="rubi-chip">–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ: <b>{row['days_in_work']}</b></div>
              <div class="rubi-chip">–ë–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: <b>{row['days_no_activity']} –¥–Ω</b></div>
              <hr/>
              <div class="small">‚ö†Ô∏è –†–∏—Å–∫–∏: {", ".join(risks_list) or "–Ω–µ—Ç"}</div>
              <div class="small">‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:<br/>‚Ä¢ {"<br/>‚Ä¢ ".join(recs)}</div>
            </div>
            """, unsafe_allow_html=True)

# --- –û–¢–ß–Å–¢ –ü–û –°–î–ï–õ–ö–ï
with tab_deal:
    st.subheader("–û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ (–ë–£–†–ú–ê–®)")
    options = view_df.sort_values("DATE_MODIFY", ascending=False)
    label_map = {int(r.ID): f"[{int(r.ID)}] {r.TITLE} ‚Äî {r.manager}" for r in options[["ID","TITLE","manager"]].itertuples(index=False)}
    chosen_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É", list(label_map.keys()), format_func=lambda x: label_map[x])
    deal = view_df[view_df["ID"]==chosen_id].iloc[0]

    fin, lpr, need, timebox, main_task = report_texts(deal)
    comm = comm_scores(deal)
    act = activity_series(deal)

    a,b,c,d = st.columns([1.2,1,1,1])
    with a:
        st.markdown(f"#### {deal['TITLE']}")
        st.caption(f"–ö–æ–º–ø–∞–Ω–∏—è: {COMPANY_NAME} ‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {deal['manager']}")
    with b: st.markdown(f"<div class='score-circle'>{deal['potential']}</div><div class='kpi-caption'>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</div>", unsafe_allow_html=True)
    with c: st.markdown(f"<div class='score-circle'>{deal['health']}</div><div class='kpi-caption'>–ó–¥–æ—Ä–æ–≤—å–µ</div>", unsafe_allow_html=True)
    with d: st.markdown(f"<div class='kpi-number'>{int(deal['OPPORTUNITY']) if deal['OPPORTUNITY'] else 0}</div><div class='kpi-caption'>–°—É–º–º–∞, ‚ÇΩ</div>", unsafe_allow_html=True)

    st.markdown("<br/>", unsafe_allow_html=True)
    col1, col2 = st.columns(2, gap="large")
    with col1:
        st.markdown("##### –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown(f"""
        <div class="grid-2">
          <div class="rubi-card"><div class="rubi-title">–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏</div><div class="kpi-number">{int(deal['OPPORTUNITY'])}</div><div class="kpi-caption">–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {int(deal['PROBABILITY'])}%</div></div>
          <div class="rubi-card"><div class="rubi-title">–î–Ω–µ–π –≤ —Ä–∞–±–æ—Ç–µ</div><div class="kpi-number">{deal['days_in_work']}</div><div class="kpi-caption">–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {deal['days_no_activity']} –¥–Ω</div></div>
        </div>
        """, unsafe_allow_html=True)
        st.markdown("##### –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∫–∏")
        st.markdown(f"""
        <div class="grid-2">
          <div class="rubi-card"><div class="rubi-title">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</div><div class="small">{fin}</div></div>
          <div class="rubi-card"><div class="rubi-title">–ü–æ–ª–Ω–æ–º–æ—á–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è</div><div class="small">{lpr}</div></div>
        </div>
        <div class="grid-2">
          <div class="rubi-card"><div class="rubi-title">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏ –Ω–∞—à —Ñ–æ–∫—É—Å</div><div class="small">{need}</div></div>
          <div class="rubi-card"><div class="rubi-title">–°—Ä–æ–∫–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ</div><div class="small">{timebox}</div></div>
        </div>
        <div class="rubi-card"><div class="rubi-title">–ó–∞–¥–∞—á–∞</div><div class="small">–ú–µ–Ω–µ–¥–∂–µ—Ä—É: {main_task}.</div></div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown("##### –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –¥–∏–Ω–∞–º–∏–∫–∞")
        st.markdown(f"""
        <div class="grid-2">
          <div class="rubi-card"><div class="rubi-title">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</div><div class="score-circle">{deal['potential']}</div></div>
          <div class="rubi-card"><div class="rubi-title">–ó–¥–æ—Ä–æ–≤—å–µ</div><div class="score-circle">{deal['health']}</div></div>
        </div>
        """, unsafe_allow_html=True)
        if px is None:
            st.info("Plotly –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –º–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª—é—á—ë–Ω.")
        else:
            fig = px.line(act, x="ts", y="activity")
            fig.update_yaxes(visible=False)
            fig.update_layout(margin=dict(l=8,r=8,t=4,b=4), height=220)
            st.markdown('<div class="rubi-card"><div class="rubi-title">–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–¥–µ–ª–∫–æ–π</div>', unsafe_allow_html=True)
            st.plotly_chart(fig, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
        risks_list = [name for name,flag in {"–±–µ–∑ –∑–∞–¥–∞—á":deal["flag_no_tasks"],"–±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤":deal["flag_no_contact"],"–±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏":deal["flag_no_company"],"–∑–∞—Å—Ç—Ä—è–ª–∞":deal["flag_stuck"]}.items() if flag]
        st.markdown(f"""
        <div class="rubi-card"><div class="rubi-title">–ò—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã</div>
        <div class="small">–≠—Ç–∞–ø: {deal['STAGE_ID'] or '‚Äî'}. –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {str(deal['LAST_ACTIVITY_TIME'])[:19]}.<br/>
        –†–∏—Å–∫–∏: {", ".join(risks_list) if risks_list else "—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"}.</div></div>
        """, unsafe_allow_html=True)

    st.markdown("##### –û—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    g1, g2 = st.columns([1.2,1], gap="large")
    with g1:
        items = list(comm.items())
        for i in range(0, len(items), 2):
            row_items = items[i:i+2]
            cols = st.columns(len(row_items))
            for (name, score), holder in zip(row_items, cols):
                with holder:
                    st.markdown(f"<div class='rubi-card'><div class='rubi-title'>{name}</div><div class='score-circle'>{score}</div></div>", unsafe_allow_html=True)
    with g2:
        recs = deal_recommendations(deal)
        st.markdown(f"<div class='rubi-card'><div class='rubi-title'>–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</div><div class='small'>‚Ä¢ {'<br/>‚Ä¢ '.join(recs)}</div></div>", unsafe_allow_html=True)

# --- –≠–∫—Å–ø–æ—Ä—Ç CSV –≤ ZIP
with tab_export:
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç CSV (ZIP) ‚Äî –±–µ–∑ Excel")
    summary_df = pd.DataFrame({
        "–ú–µ—Ç—Ä–∏–∫–∞": ["–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫","–û–±—ä—ë–º","–°—Ä–µ–¥–Ω. –∑–¥–æ—Ä–æ–≤—å–µ","–ó–∞—Å—Ç—Ä—è–ª–∏","–ë–µ–∑ –∑–∞–¥–∞—á","–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤","–ë–µ–∑ –∫–æ–º–ø–∞–Ω–∏–π","–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ"],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": [
            view_df.shape[0],
            int(view_df["OPPORTUNITY"].sum()),
            f"{view_df['health'].mean():.0f}%",
            int(view_df["flag_stuck"].sum()),
            int((~view_df['ID'].isin(open_tasks_map.keys())).sum()),
            int(view_df["flag_no_contact"].sum()),
            int(view_df["flag_no_company"].sum()),
            int(view_df["flag_lost"].sum()),
        ]
    })
    mgr_out = split_green_red(view_df)
    mgr_out["manager"] = mgr_out["ASSIGNED_BY_ID"].map(users_map).fillna("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    mgr_out = mgr_out[["manager","deals","opp_sum","health_avg","no_tasks","stuck","lost","zone"]]
    deal_cols = ["ID","TITLE","manager","STAGE_ID","OPPORTUNITY","PROBABILITY","health","potential",
                 "days_in_work","days_no_activity","flag_no_tasks","flag_no_contact","flag_no_company",
                 "flag_stuck","flag_lost","DATE_CREATE","DATE_MODIFY","LAST_ACTIVITY_TIME"]
    deals_out = view_df[deal_cols].copy()

    def pack_zip_csv():
        mem = BytesIO()
        with zipfile.ZipFile(mem, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
            zf.writestr("01_summary.csv", summary_df.to_csv(index=False, encoding="utf-8-sig"))
            zf.writestr("02_managers.csv", mgr_out.to_csv(index=False, encoding="utf-8-sig"))
            zf.writestr("03_deals.csv", deals_out.to_csv(index=False, encoding="utf-8-sig"))
        mem.seek(0); return mem.getvalue()

    st.download_button("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (CSV.zip)", data=pack_zip_csv(),
                       file_name="burmash_report_csv.zip", mime="application/zip")

st.caption("–ë–£–†–ú–ê–® ¬∑ CRM –î—ç—à–±–æ—Ä–¥ ‚Äî –∞–≤—Ç–æ–∞—É–¥–∏—Ç, –ø—É–ª—å—Å, –∑–æ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–∞—Ä—Ç–æ—á–∫–∏, –æ—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–µ, —ç–∫—Å–ø–æ—Ä—Ç CSV. v2.2")
